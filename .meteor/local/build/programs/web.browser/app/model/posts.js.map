{"version":3,"sources":["meteor://ðŸ’»app/model/posts.js"],"names":[],"mappings":";;;;;;;;AAAA,KAAK,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;;AAEtC,IAAI,MAAM,CAAC,QAAQ,EAAE;;;AAGnB,QAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;;AAE1B,UAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;AACpB,SAAK,EAAE,YAAY;AACjB,aAAO,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAC,IAAI,EAAE,EAAC,SAAS,EAAE,CAAC,CAAC,EAAC,EAAC,CAAC,CAAC;KAChD;GACF,CAAC,CAAC;;AAEH,UAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;AACzB,iBAAa,EAAE,UAAS,CAAC,EAAC;AACxB,OAAC,CAAC,cAAc,EAAE,CAAC;AACnB,UAAI,KAAK,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC,GAAG,EAAE,CAAC;AACtC,UAAI,OAAO,GAAG,CAAC,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,CAAC;;AAE1C,WAAK,CAAC,MAAM,CAAC;AACX,aAAK,EAAE,KAAK;AACZ,eAAO,EAAE,OAAO;AAChB,iBAAS,EAAE,IAAI,IAAI,EAAE;OACtB,CAAC,CAAC;AACH,OAAC,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAC1B,OAAC,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAC5B,aAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;KAC7B;AACD,0BAAsB,EAAE,UAAS,CAAC,EAAC;AACjC,UAAI,YAAY,GAAG,CAAC,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,CAAC;AAC/C,YAAM,CAAC,IAAI,CAAC,cAAc,EAAE,YAAY,EAAE,UAAS,GAAG,EAAE,OAAO,EAAC;AAC9D,YAAG,GAAG,EAAC;AACL,iBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACpB,MACG;AACF,iBAAO,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;SACnC;OACF,CAAC,CAAC;KACJ;GACF,CAAC,CAAC;;AAEH,UAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;AACnB,uBAAmB,EAAE,UAAS,CAAC,EAAC;AAC9B,OAAC,CAAC,cAAc,EAAE,CAAC;AACnB,UAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC;AAC1B,WAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;KAC1B;GACF,CAAC,CAAC;;AAEH,UAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,YAAU;AACtC,WAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;GAC7B,CAAC,CAAC;;AAEH,UAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;AACzB,aAAS,EAAE,YAAU;AACnB,aAAO,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;KACjC;GACF,CAAC,CAAC;;AAEH,UAAQ,CAAC,UAAU,CAAC,OAAO,CAAC;AAC1B,eAAW,EAAE,YAAU;AACrB,UAAI,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACzC,UAAI,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC;AACxC,aAAO,SAAS,IAAI,OAAO;KAC5B;GACF,CAAC,CAAC;CACJ,wE","file":"/model/posts.js","sourcesContent":["Posts = new Mongo.Collection('posts');\n\nif (Meteor.isClient) {\n\n  // added this, but not incl in tutorial.\n  Meteor.subscribe('posts');\n\n  Template.body.helpers({\n    posts: function () {\n      return Posts.find({}, {sort: {createdAt: -1}});\n    }\n  });\n\n  Template.createPost.events({\n    'submit form': function(e){\n      e.preventDefault();\n      var title = $('[name=\"title\"]').val();\n      var content = $('[name=\"content\"]').val();\n\n      Posts.insert({\n        title: title,\n        content: content,\n        createdAt: new Date()\n      });\n      $('[name=title]').val('');\n      $('[name=content]').val('');\n      Session.set('wordcount', 0);\n    },\n    'keyup [name=content]': function(e){\n      var wordsToCount = $('[name=\"content\"]').val();\n      Meteor.call('getWordcount', wordsToCount, function(err, results){\n        if(err){\n          console.error(err);\n        }\n        else{\n          Session.set('wordcount', results);\n        }\n      });\n    }\n  });\n\n  Template.post.events({\n    'click .deletePost': function(e){\n      e.preventDefault();\n      var thisPostId = this._id;\n      Posts.remove(thisPostId);\n    }\n  });\n\n  Template.wordcount.onRendered(function(){\n    Session.set('wordcount', 0);\n  });\n\n  Template.wordcount.helpers({\n    wordcount: function(){\n      return Session.get('wordcount');\n    }\n  });\n\n  Template.createPost.helpers({\n    enoughWords: function(){\n      var wordcount = Session.get('wordcount');\n      var theGoal = Goals.findOne().dailyGoal;\n      return wordcount >= theGoal\n    }\n  });\n}\n"]}