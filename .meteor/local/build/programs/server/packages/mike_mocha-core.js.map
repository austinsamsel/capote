{"version":3,"sources":["meteor://ðŸ’»app/packages/mike_mocha-core/packages/mike_mocha-core.js"],"names":[],"mappingsfile":"/packages/mike_mocha-core.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// packages/mike:mocha-core/server.js                                                            //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nvar Mocha = Npm.require(\"mocha\");                                                                // 1\nvar Fiber = Npm.require(\"fibers\");                                                               // 2\n                                                                                                 // 3\nsetupGlobals = function(mocha){                                                                  // 4\n  //basically a direct copy from meteor/packages/meteor/dynamics_nodejs.js                       // 5\n  //except the wrapped function has an argument (mocha distinguishes                             // 6\n  //asynchronous tests from synchronous ones by the \"length\" of the                              // 7\n  //function passed into it, before, etc.)                                                       // 8\n  var moddedBindEnvironment = function (func, onException, _this) {                              // 9\n    Meteor._nodeCodeMustBeInFiber();                                                             // 10\n                                                                                                 // 11\n    var boundValues = _.clone(Fiber.current._meteor_dynamics || []);                             // 12\n                                                                                                 // 13\n    if (!onException || typeof(onException) === 'string') {                                      // 14\n      var description = onException || \"callback of async function\";                             // 15\n      onException = function (error) {                                                           // 16\n        Meteor._debug(                                                                           // 17\n          \"Exception in \" + description + \":\",                                                   // 18\n          error && error.stack || error                                                          // 19\n        );                                                                                       // 20\n      };                                                                                         // 21\n    }                                                                                            // 22\n                                                                                                 // 23\n    //IMPORTANT note the callback variable present here, for                                     // 24\n    //Metoer.bindEnvironment this is ` return function (/* arguments */) {`                      // 25\n    return function (callback) {                                                                 // 26\n      var args = _.toArray(arguments);                                                           // 27\n                                                                                                 // 28\n      var runWithEnvironment = function () {                                                     // 29\n        var savedValues = Fiber.current._meteor_dynamics;                                        // 30\n        try {                                                                                    // 31\n          // Need to clone boundValues in case two fibers invoke this                            // 32\n          // function at the same time                                                           // 33\n          Fiber.current._meteor_dynamics = _.clone(boundValues);                                 // 34\n          var ret = func.apply(_this, args);                                                     // 35\n        } catch (e) {                                                                            // 36\n          onException(e);                                                                        // 37\n        } finally {                                                                              // 38\n          Fiber.current._meteor_dynamics = savedValues;                                          // 39\n        }                                                                                        // 40\n        return ret;                                                                              // 41\n      };                                                                                         // 42\n                                                                                                 // 43\n      if (Fiber.current)                                                                         // 44\n        return runWithEnvironment();                                                             // 45\n      Fiber(runWithEnvironment).run();                                                           // 46\n    };                                                                                           // 47\n  };                                                                                             // 48\n                                                                                                 // 49\n                                                                                                 // 50\n  var mochaExports = {};                                                                         // 51\n  mocha.suite.emit(\"pre-require\", mochaExports, undefined, mocha);                               // 52\n  //console.log(mochaExports);                                                                   // 53\n                                                                                                 // 54\n  // 1. patch up describe function so it plays nice w/ fibers                                    // 55\n  // 2. trick to allow binding the suite instance as `this` value                                // 56\n  // inside of describe blocks, to allow e.g. to set custom timeouts.                            // 57\n  function wrapRunnable(func) {                                                                  // 58\n    return function() {                                                                          // 59\n      // `this` will be bound to the suite instance, as of Mocha's `describe` implementation     // 60\n      Meteor.bindEnvironment(func.bind(this), function(err) { throw err; })();                   // 61\n    }                                                                                            // 62\n  }                                                                                              // 63\n                                                                                                 // 64\n  global.describe = function (name, func){                                                       // 65\n    return mochaExports.describe(name, wrapRunnable(func));                                      // 66\n  };                                                                                             // 67\n  global.describe.skip = mochaExports.describe.skip;                                             // 68\n  global.describe.only = function(name, func) {                                                  // 69\n    mochaExports.describe.only(name, Meteor.bindEnvironment(func, function(err){ throw err; })); // 70\n  };                                                                                             // 71\n                                                                                                 // 72\n  //In Meteor, these blocks will all be invoking Meteor code and must                            // 73\n  //run within a fiber. We must therefore wrap each with something like                          // 74\n  //bindEnvironment. The function passed off to mocha must have length                           // 75\n  //greater than zero if we want mocha to run it asynchronously. That's                          // 76\n  //why it uses the moddedBindEnivronment function described above instead                       // 77\n                                                                                                 // 78\n  //We're actually having mocha run all tests asynchronously. This                               // 79\n  //is because mocha cannot tell when a synchronous fiber test has                               // 80\n  //finished, because the test runner runs outside a fiber.                                      // 81\n                                                                                                 // 82\n  //It is possible that the mocha test runner could be run from within a                         // 83\n  //fiber, but it was unclear to me how that could be done without                               // 84\n  //forking mocha itself.                                                                        // 85\n                                                                                                 // 86\n  global['it'] = function (name, func){                                                          // 87\n    wrappedFunc = function(callback){                                                            // 88\n      if (func.length == 0){                                                                     // 89\n        func();                                                                                  // 90\n        callback();                                                                              // 91\n      }                                                                                          // 92\n      else {                                                                                     // 93\n        func(callback);                                                                          // 94\n      }                                                                                          // 95\n    }                                                                                            // 96\n                                                                                                 // 97\n    boundWrappedFunction = moddedBindEnvironment(wrappedFunc, function(err){                     // 98\n      throw err;                                                                                 // 99\n    });                                                                                          // 100\n                                                                                                 // 101\n    mochaExports['it'](name, boundWrappedFunction);                                              // 102\n  };                                                                                             // 103\n  global.it.skip = mochaExports.it.skip;                                                         // 104\n  global.it.only = function(name, func) {                                                        // 105\n    mochaExports.it.only(name, Meteor.bindEnvironment(func, function(err){ throw err; }));       // 106\n  };                                                                                             // 107\n                                                                                                 // 108\n  [\"before\", \"beforeEach\", \"after\", \"afterEach\"].forEach(function(testFunctionName){             // 109\n    global[testFunctionName] = function (func){                                                  // 110\n      wrappedFunc = function(callback){                                                          // 111\n        if (func.length == 0){                                                                   // 112\n          func();                                                                                // 113\n          callback();                                                                            // 114\n        }                                                                                        // 115\n        else {                                                                                   // 116\n          func(callback);                                                                        // 117\n        }                                                                                        // 118\n      }                                                                                          // 119\n                                                                                                 // 120\n      boundWrappedFunction = moddedBindEnvironment(wrappedFunc, function(err){                   // 121\n        throw err;                                                                               // 122\n      });                                                                                        // 123\n      mochaExports[testFunctionName](boundWrappedFunction);                                      // 124\n    }                                                                                            // 125\n  });                                                                                            // 126\n}                                                                                                // 127\n                                                                                                 // 128\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}