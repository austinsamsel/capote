[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar chai = Package['practicalmeteor:chai'].chai;\nvar assert = Package['practicalmeteor:chai'].assert;\nvar expect = Package['practicalmeteor:chai'].expect;\nvar should = Package['practicalmeteor:chai'].should;\nvar loglevel = Package['practicalmeteor:loglevel'].loglevel;\nvar ObjectLogger = Package['practicalmeteor:loglevel'].ObjectLogger;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar msg, global, MochaWeb, ddpParentConnection;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mike_mocha/template.client.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n                                                                                                                      // 1\nTemplate.__checkName(\"mochaweb\");                                                                                     // 2\nTemplate[\"mochaweb\"] = new Template(\"Template.mochaweb\", (function() {                                                // 3\n  var view = this;                                                                                                    // 4\n  return HTML.IFRAME({                                                                                                // 5\n    src: function() {                                                                                                 // 6\n      return Spacebars.mustache(view.lookup(\"mochaWebIFrameURL\"));                                                    // 7\n    }                                                                                                                 // 8\n  });                                                                                                                 // 9\n}));                                                                                                                  // 10\n                                                                                                                      // 11\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mike_mocha/mocha.js                                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n;(function(){                                                                                                         // 1\n                                                                                                                      // 2\n// CommonJS require()                                                                                                 // 3\n                                                                                                                      // 4\nfunction require(p){                                                                                                  // 5\n    var path = require.resolve(p)                                                                                     // 6\n      , mod = require.modules[path];                                                                                  // 7\n    if (!mod) throw new Error('failed to require \"' + p + '\"');                                                       // 8\n    if (!mod.exports) {                                                                                               // 9\n      mod.exports = {};                                                                                               // 10\n      mod.call(mod.exports, mod, mod.exports, require.relative(path));                                                // 11\n    }                                                                                                                 // 12\n    return mod.exports;                                                                                               // 13\n  }                                                                                                                   // 14\n                                                                                                                      // 15\nrequire.modules = {};                                                                                                 // 16\n                                                                                                                      // 17\nrequire.resolve = function (path){                                                                                    // 18\n    var orig = path                                                                                                   // 19\n      , reg = path + '.js'                                                                                            // 20\n      , index = path + '/index.js';                                                                                   // 21\n    return require.modules[reg] && reg                                                                                // 22\n      || require.modules[index] && index                                                                              // 23\n      || orig;                                                                                                        // 24\n  };                                                                                                                  // 25\n                                                                                                                      // 26\nrequire.register = function (path, fn){                                                                               // 27\n    require.modules[path] = fn;                                                                                       // 28\n  };                                                                                                                  // 29\n                                                                                                                      // 30\nrequire.relative = function (parent) {                                                                                // 31\n    return function(p){                                                                                               // 32\n      if ('.' != p.charAt(0)) return require(p);                                                                      // 33\n                                                                                                                      // 34\n      var path = parent.split('/')                                                                                    // 35\n        , segs = p.split('/');                                                                                        // 36\n      path.pop();                                                                                                     // 37\n                                                                                                                      // 38\n      for (var i = 0; i < segs.length; i++) {                                                                         // 39\n        var seg = segs[i];                                                                                            // 40\n        if ('..' == seg) path.pop();                                                                                  // 41\n        else if ('.' != seg) path.push(seg);                                                                          // 42\n      }                                                                                                               // 43\n                                                                                                                      // 44\n      return require(path.join('/'));                                                                                 // 45\n    };                                                                                                                // 46\n  };                                                                                                                  // 47\n                                                                                                                      // 48\n                                                                                                                      // 49\nrequire.register(\"browser/debug.js\", function(module, exports, require){                                              // 50\n                                                                                                                      // 51\nmodule.exports = function(type){                                                                                      // 52\n  return function(){                                                                                                  // 53\n  }                                                                                                                   // 54\n};                                                                                                                    // 55\n                                                                                                                      // 56\n}); // module: browser/debug.js                                                                                       // 57\n                                                                                                                      // 58\nrequire.register(\"browser/diff.js\", function(module, exports, require){                                               // 59\n/* See LICENSE file for terms of use */                                                                               // 60\n                                                                                                                      // 61\n/*                                                                                                                    // 62\n * Text diff implementation.                                                                                          // 63\n *                                                                                                                    // 64\n * This library supports the following APIS:                                                                          // 65\n * JsDiff.diffChars: Character by character diff                                                                      // 66\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace                                      // 67\n * JsDiff.diffLines: Line based diff                                                                                  // 68\n *                                                                                                                    // 69\n * JsDiff.diffCss: Diff targeted at CSS content                                                                       // 70\n *                                                                                                                    // 71\n * These methods are based on the implementation proposed in                                                          // 72\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).                                                  // 73\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927                                                     // 74\n */                                                                                                                   // 75\nvar JsDiff = (function() {                                                                                            // 76\n  /*jshint maxparams: 5*/                                                                                             // 77\n  function clonePath(path) {                                                                                          // 78\n    return { newPos: path.newPos, components: path.components.slice(0) };                                             // 79\n  }                                                                                                                   // 80\n  function removeEmpty(array) {                                                                                       // 81\n    var ret = [];                                                                                                     // 82\n    for (var i = 0; i < array.length; i++) {                                                                          // 83\n      if (array[i]) {                                                                                                 // 84\n        ret.push(array[i]);                                                                                           // 85\n      }                                                                                                               // 86\n    }                                                                                                                 // 87\n    return ret;                                                                                                       // 88\n  }                                                                                                                   // 89\n  function escapeHTML(s) {                                                                                            // 90\n    var n = s;                                                                                                        // 91\n    n = n.replace(/&/g, '&amp;');                                                                                     // 92\n    n = n.replace(/</g, '&lt;');                                                                                      // 93\n    n = n.replace(/>/g, '&gt;');                                                                                      // 94\n    n = n.replace(/\"/g, '&quot;');                                                                                    // 95\n                                                                                                                      // 96\n    return n;                                                                                                         // 97\n  }                                                                                                                   // 98\n                                                                                                                      // 99\n  var Diff = function(ignoreWhitespace) {                                                                             // 100\n    this.ignoreWhitespace = ignoreWhitespace;                                                                         // 101\n  };                                                                                                                  // 102\n  Diff.prototype = {                                                                                                  // 103\n      diff: function(oldString, newString) {                                                                          // 104\n        // Handle the identity case (this is due to unrolling editLength == 0                                         // 105\n        if (newString === oldString) {                                                                                // 106\n          return [{ value: newString }];                                                                              // 107\n        }                                                                                                             // 108\n        if (!newString) {                                                                                             // 109\n          return [{ value: oldString, removed: true }];                                                               // 110\n        }                                                                                                             // 111\n        if (!oldString) {                                                                                             // 112\n          return [{ value: newString, added: true }];                                                                 // 113\n        }                                                                                                             // 114\n                                                                                                                      // 115\n        newString = this.tokenize(newString);                                                                         // 116\n        oldString = this.tokenize(oldString);                                                                         // 117\n                                                                                                                      // 118\n        var newLen = newString.length, oldLen = oldString.length;                                                     // 119\n        var maxEditLength = newLen + oldLen;                                                                          // 120\n        var bestPath = [{ newPos: -1, components: [] }];                                                              // 121\n                                                                                                                      // 122\n        // Seed editLength = 0                                                                                        // 123\n        var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);                                        // 124\n        if (bestPath[0].newPos+1 >= newLen && oldPos+1 >= oldLen) {                                                   // 125\n          return bestPath[0].components;                                                                              // 126\n        }                                                                                                             // 127\n                                                                                                                      // 128\n        for (var editLength = 1; editLength <= maxEditLength; editLength++) {                                         // 129\n          for (var diagonalPath = -1*editLength; diagonalPath <= editLength; diagonalPath+=2) {                       // 130\n            var basePath;                                                                                             // 131\n            var addPath = bestPath[diagonalPath-1],                                                                   // 132\n                removePath = bestPath[diagonalPath+1];                                                                // 133\n            oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;                                             // 134\n            if (addPath) {                                                                                            // 135\n              // No one else is going to attempt to use this value, clear it                                          // 136\n              bestPath[diagonalPath-1] = undefined;                                                                   // 137\n            }                                                                                                         // 138\n                                                                                                                      // 139\n            var canAdd = addPath && addPath.newPos+1 < newLen;                                                        // 140\n            var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;                                             // 141\n            if (!canAdd && !canRemove) {                                                                              // 142\n              bestPath[diagonalPath] = undefined;                                                                     // 143\n              continue;                                                                                               // 144\n            }                                                                                                         // 145\n                                                                                                                      // 146\n            // Select the diagonal that we want to branch from. We select the prior                                   // 147\n            // path whose position in the new string is the farthest from the origin                                  // 148\n            // and does not pass the bounds of the diff graph                                                         // 149\n            if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {                                       // 150\n              basePath = clonePath(removePath);                                                                       // 151\n              this.pushComponent(basePath.components, oldString[oldPos], undefined, true);                            // 152\n            } else {                                                                                                  // 153\n              basePath = clonePath(addPath);                                                                          // 154\n              basePath.newPos++;                                                                                      // 155\n              this.pushComponent(basePath.components, newString[basePath.newPos], true, undefined);                   // 156\n            }                                                                                                         // 157\n                                                                                                                      // 158\n            var oldPos = this.extractCommon(basePath, newString, oldString, diagonalPath);                            // 159\n                                                                                                                      // 160\n            if (basePath.newPos+1 >= newLen && oldPos+1 >= oldLen) {                                                  // 161\n              return basePath.components;                                                                             // 162\n            } else {                                                                                                  // 163\n              bestPath[diagonalPath] = basePath;                                                                      // 164\n            }                                                                                                         // 165\n          }                                                                                                           // 166\n        }                                                                                                             // 167\n      },                                                                                                              // 168\n                                                                                                                      // 169\n      pushComponent: function(components, value, added, removed) {                                                    // 170\n        var last = components[components.length-1];                                                                   // 171\n        if (last && last.added === added && last.removed === removed) {                                               // 172\n          // We need to clone here as the component clone operation is just                                           // 173\n          // as shallow array clone                                                                                   // 174\n          components[components.length-1] =                                                                           // 175\n            {value: this.join(last.value, value), added: added, removed: removed };                                   // 176\n        } else {                                                                                                      // 177\n          components.push({value: value, added: added, removed: removed });                                           // 178\n        }                                                                                                             // 179\n      },                                                                                                              // 180\n      extractCommon: function(basePath, newString, oldString, diagonalPath) {                                         // 181\n        var newLen = newString.length,                                                                                // 182\n            oldLen = oldString.length,                                                                                // 183\n            newPos = basePath.newPos,                                                                                 // 184\n            oldPos = newPos - diagonalPath;                                                                           // 185\n        while (newPos+1 < newLen && oldPos+1 < oldLen && this.equals(newString[newPos+1], oldString[oldPos+1])) {     // 186\n          newPos++;                                                                                                   // 187\n          oldPos++;                                                                                                   // 188\n                                                                                                                      // 189\n          this.pushComponent(basePath.components, newString[newPos], undefined, undefined);                           // 190\n        }                                                                                                             // 191\n        basePath.newPos = newPos;                                                                                     // 192\n        return oldPos;                                                                                                // 193\n      },                                                                                                              // 194\n                                                                                                                      // 195\n      equals: function(left, right) {                                                                                 // 196\n        var reWhitespace = /\\S/;                                                                                      // 197\n        if (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right)) {                         // 198\n          return true;                                                                                                // 199\n        } else {                                                                                                      // 200\n          return left === right;                                                                                      // 201\n        }                                                                                                             // 202\n      },                                                                                                              // 203\n      join: function(left, right) {                                                                                   // 204\n        return left + right;                                                                                          // 205\n      },                                                                                                              // 206\n      tokenize: function(value) {                                                                                     // 207\n        return value;                                                                                                 // 208\n      }                                                                                                               // 209\n  };                                                                                                                  // 210\n                                                                                                                      // 211\n  var CharDiff = new Diff();                                                                                          // 212\n                                                                                                                      // 213\n  var WordDiff = new Diff(true);                                                                                      // 214\n  var WordWithSpaceDiff = new Diff();                                                                                 // 215\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {                                                  // 216\n    return removeEmpty(value.split(/(\\s+|\\b)/));                                                                      // 217\n  };                                                                                                                  // 218\n                                                                                                                      // 219\n  var CssDiff = new Diff(true);                                                                                       // 220\n  CssDiff.tokenize = function(value) {                                                                                // 221\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));                                                                 // 222\n  };                                                                                                                  // 223\n                                                                                                                      // 224\n  var LineDiff = new Diff();                                                                                          // 225\n  LineDiff.tokenize = function(value) {                                                                               // 226\n    return value.split(/^/m);                                                                                         // 227\n  };                                                                                                                  // 228\n                                                                                                                      // 229\n  return {                                                                                                            // 230\n    Diff: Diff,                                                                                                       // 231\n                                                                                                                      // 232\n    diffChars: function(oldStr, newStr) { return CharDiff.diff(oldStr, newStr); },                                    // 233\n    diffWords: function(oldStr, newStr) { return WordDiff.diff(oldStr, newStr); },                                    // 234\n    diffWordsWithSpace: function(oldStr, newStr) { return WordWithSpaceDiff.diff(oldStr, newStr); },                  // 235\n    diffLines: function(oldStr, newStr) { return LineDiff.diff(oldStr, newStr); },                                    // 236\n                                                                                                                      // 237\n    diffCss: function(oldStr, newStr) { return CssDiff.diff(oldStr, newStr); },                                       // 238\n                                                                                                                      // 239\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {                                           // 240\n      var ret = [];                                                                                                   // 241\n                                                                                                                      // 242\n      ret.push('Index: ' + fileName);                                                                                 // 243\n      ret.push('===================================================================');                                // 244\n      ret.push('--- ' + fileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));                       // 245\n      ret.push('+++ ' + fileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));                       // 246\n                                                                                                                      // 247\n      var diff = LineDiff.diff(oldStr, newStr);                                                                       // 248\n      if (!diff[diff.length-1].value) {                                                                               // 249\n        diff.pop();   // Remove trailing newline add                                                                  // 250\n      }                                                                                                               // 251\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier                            // 252\n                                                                                                                      // 253\n      function contextLines(lines) {                                                                                  // 254\n        return lines.map(function(entry) { return ' ' + entry; });                                                    // 255\n      }                                                                                                               // 256\n      function eofNL(curRange, i, current) {                                                                          // 257\n        var last = diff[diff.length-2],                                                                               // 258\n            isLast = i === diff.length-2,                                                                             // 259\n            isLastOfType = i === diff.length-3 && (current.added !== last.added || current.removed !== last.removed);\n                                                                                                                      // 261\n        // Figure out if this is the last line for the given file and missing NL                                      // 262\n        if (!/\\n$/.test(current.value) && (isLast || isLastOfType)) {                                                 // 263\n          curRange.push('\\\\ No newline at end of file');                                                              // 264\n        }                                                                                                             // 265\n      }                                                                                                               // 266\n                                                                                                                      // 267\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],                                                        // 268\n          oldLine = 1, newLine = 1;                                                                                   // 269\n      for (var i = 0; i < diff.length; i++) {                                                                         // 270\n        var current = diff[i],                                                                                        // 271\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');                                    // 272\n        current.lines = lines;                                                                                        // 273\n                                                                                                                      // 274\n        if (current.added || current.removed) {                                                                       // 275\n          if (!oldRangeStart) {                                                                                       // 276\n            var prev = diff[i-1];                                                                                     // 277\n            oldRangeStart = oldLine;                                                                                  // 278\n            newRangeStart = newLine;                                                                                  // 279\n                                                                                                                      // 280\n            if (prev) {                                                                                               // 281\n              curRange = contextLines(prev.lines.slice(-4));                                                          // 282\n              oldRangeStart -= curRange.length;                                                                       // 283\n              newRangeStart -= curRange.length;                                                                       // 284\n            }                                                                                                         // 285\n          }                                                                                                           // 286\n          curRange.push.apply(curRange, lines.map(function(entry) { return (current.added?'+':'-') + entry; }));      // 287\n          eofNL(curRange, i, current);                                                                                // 288\n                                                                                                                      // 289\n          if (current.added) {                                                                                        // 290\n            newLine += lines.length;                                                                                  // 291\n          } else {                                                                                                    // 292\n            oldLine += lines.length;                                                                                  // 293\n          }                                                                                                           // 294\n        } else {                                                                                                      // 295\n          if (oldRangeStart) {                                                                                        // 296\n            // Close out any changes that have been output (or join overlapping)                                      // 297\n            if (lines.length <= 8 && i < diff.length-2) {                                                             // 298\n              // Overlapping                                                                                          // 299\n              curRange.push.apply(curRange, contextLines(lines));                                                     // 300\n            } else {                                                                                                  // 301\n              // end the range and output                                                                             // 302\n              var contextSize = Math.min(lines.length, 4);                                                            // 303\n              ret.push(                                                                                               // 304\n                  '@@ -' + oldRangeStart + ',' + (oldLine-oldRangeStart+contextSize)                                  // 305\n                  + ' +' + newRangeStart + ',' + (newLine-newRangeStart+contextSize)                                  // 306\n                  + ' @@');                                                                                           // 307\n              ret.push.apply(ret, curRange);                                                                          // 308\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));                                         // 309\n              if (lines.length <= 4) {                                                                                // 310\n                eofNL(ret, i, current);                                                                               // 311\n              }                                                                                                       // 312\n                                                                                                                      // 313\n              oldRangeStart = 0;  newRangeStart = 0; curRange = [];                                                   // 314\n            }                                                                                                         // 315\n          }                                                                                                           // 316\n          oldLine += lines.length;                                                                                    // 317\n          newLine += lines.length;                                                                                    // 318\n        }                                                                                                             // 319\n      }                                                                                                               // 320\n                                                                                                                      // 321\n      return ret.join('\\n') + '\\n';                                                                                   // 322\n    },                                                                                                                // 323\n                                                                                                                      // 324\n    applyPatch: function(oldStr, uniDiff) {                                                                           // 325\n      var diffstr = uniDiff.split('\\n');                                                                              // 326\n      var diff = [];                                                                                                  // 327\n      var remEOFNL = false,                                                                                           // 328\n          addEOFNL = false;                                                                                           // 329\n                                                                                                                      // 330\n      for (var i = (diffstr[0][0]==='I'?4:0); i < diffstr.length; i++) {                                              // 331\n        if(diffstr[i][0] === '@') {                                                                                   // 332\n          var meh = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);                                             // 333\n          diff.unshift({                                                                                              // 334\n            start:meh[3],                                                                                             // 335\n            oldlength:meh[2],                                                                                         // 336\n            oldlines:[],                                                                                              // 337\n            newlength:meh[4],                                                                                         // 338\n            newlines:[]                                                                                               // 339\n          });                                                                                                         // 340\n        } else if(diffstr[i][0] === '+') {                                                                            // 341\n          diff[0].newlines.push(diffstr[i].substr(1));                                                                // 342\n        } else if(diffstr[i][0] === '-') {                                                                            // 343\n          diff[0].oldlines.push(diffstr[i].substr(1));                                                                // 344\n        } else if(diffstr[i][0] === ' ') {                                                                            // 345\n          diff[0].newlines.push(diffstr[i].substr(1));                                                                // 346\n          diff[0].oldlines.push(diffstr[i].substr(1));                                                                // 347\n        } else if(diffstr[i][0] === '\\\\') {                                                                           // 348\n          if (diffstr[i-1][0] === '+') {                                                                              // 349\n            remEOFNL = true;                                                                                          // 350\n          } else if(diffstr[i-1][0] === '-') {                                                                        // 351\n            addEOFNL = true;                                                                                          // 352\n          }                                                                                                           // 353\n        }                                                                                                             // 354\n      }                                                                                                               // 355\n                                                                                                                      // 356\n      var str = oldStr.split('\\n');                                                                                   // 357\n      for (var i = diff.length - 1; i >= 0; i--) {                                                                    // 358\n        var d = diff[i];                                                                                              // 359\n        for (var j = 0; j < d.oldlength; j++) {                                                                       // 360\n          if(str[d.start-1+j] !== d.oldlines[j]) {                                                                    // 361\n            return false;                                                                                             // 362\n          }                                                                                                           // 363\n        }                                                                                                             // 364\n        Array.prototype.splice.apply(str,[d.start-1,+d.oldlength].concat(d.newlines));                                // 365\n      }                                                                                                               // 366\n                                                                                                                      // 367\n      if (remEOFNL) {                                                                                                 // 368\n        while (!str[str.length-1]) {                                                                                  // 369\n          str.pop();                                                                                                  // 370\n        }                                                                                                             // 371\n      } else if (addEOFNL) {                                                                                          // 372\n        str.push('');                                                                                                 // 373\n      }                                                                                                               // 374\n      return str.join('\\n');                                                                                          // 375\n    },                                                                                                                // 376\n                                                                                                                      // 377\n    convertChangesToXML: function(changes){                                                                           // 378\n      var ret = [];                                                                                                   // 379\n      for ( var i = 0; i < changes.length; i++) {                                                                     // 380\n        var change = changes[i];                                                                                      // 381\n        if (change.added) {                                                                                           // 382\n          ret.push('<ins>');                                                                                          // 383\n        } else if (change.removed) {                                                                                  // 384\n          ret.push('<del>');                                                                                          // 385\n        }                                                                                                             // 386\n                                                                                                                      // 387\n        ret.push(escapeHTML(change.value));                                                                           // 388\n                                                                                                                      // 389\n        if (change.added) {                                                                                           // 390\n          ret.push('</ins>');                                                                                         // 391\n        } else if (change.removed) {                                                                                  // 392\n          ret.push('</del>');                                                                                         // 393\n        }                                                                                                             // 394\n      }                                                                                                               // 395\n      return ret.join('');                                                                                            // 396\n    },                                                                                                                // 397\n                                                                                                                      // 398\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API                                                 // 399\n    convertChangesToDMP: function(changes){                                                                           // 400\n      var ret = [], change;                                                                                           // 401\n      for ( var i = 0; i < changes.length; i++) {                                                                     // 402\n        change = changes[i];                                                                                          // 403\n        ret.push([(change.added ? 1 : change.removed ? -1 : 0), change.value]);                                       // 404\n      }                                                                                                               // 405\n      return ret;                                                                                                     // 406\n    }                                                                                                                 // 407\n  };                                                                                                                  // 408\n})();                                                                                                                 // 409\n                                                                                                                      // 410\nif (typeof module !== 'undefined') {                                                                                  // 411\n    module.exports = JsDiff;                                                                                          // 412\n}                                                                                                                     // 413\n                                                                                                                      // 414\n}); // module: browser/diff.js                                                                                        // 415\n                                                                                                                      // 416\nrequire.register(\"browser/events.js\", function(module, exports, require){                                             // 417\n                                                                                                                      // 418\n/**                                                                                                                   // 419\n * Module exports.                                                                                                    // 420\n */                                                                                                                   // 421\n                                                                                                                      // 422\nexports.EventEmitter = EventEmitter;                                                                                  // 423\n                                                                                                                      // 424\n/**                                                                                                                   // 425\n * Check if `obj` is an array.                                                                                        // 426\n */                                                                                                                   // 427\n                                                                                                                      // 428\nfunction isArray(obj) {                                                                                               // 429\n  return '[object Array]' == {}.toString.call(obj);                                                                   // 430\n}                                                                                                                     // 431\n                                                                                                                      // 432\n/**                                                                                                                   // 433\n * Event emitter constructor.                                                                                         // 434\n *                                                                                                                    // 435\n * @api public                                                                                                        // 436\n */                                                                                                                   // 437\n                                                                                                                      // 438\nfunction EventEmitter(){};                                                                                            // 439\n                                                                                                                      // 440\n/**                                                                                                                   // 441\n * Adds a listener.                                                                                                   // 442\n *                                                                                                                    // 443\n * @api public                                                                                                        // 444\n */                                                                                                                   // 445\n                                                                                                                      // 446\nEventEmitter.prototype.on = function (name, fn) {                                                                     // 447\n  if (!this.$events) {                                                                                                // 448\n    this.$events = {};                                                                                                // 449\n  }                                                                                                                   // 450\n                                                                                                                      // 451\n  if (!this.$events[name]) {                                                                                          // 452\n    this.$events[name] = fn;                                                                                          // 453\n  } else if (isArray(this.$events[name])) {                                                                           // 454\n    this.$events[name].push(fn);                                                                                      // 455\n  } else {                                                                                                            // 456\n    this.$events[name] = [this.$events[name], fn];                                                                    // 457\n  }                                                                                                                   // 458\n                                                                                                                      // 459\n  return this;                                                                                                        // 460\n};                                                                                                                    // 461\n                                                                                                                      // 462\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;                                                       // 463\n                                                                                                                      // 464\n/**                                                                                                                   // 465\n * Adds a volatile listener.                                                                                          // 466\n *                                                                                                                    // 467\n * @api public                                                                                                        // 468\n */                                                                                                                   // 469\n                                                                                                                      // 470\nEventEmitter.prototype.once = function (name, fn) {                                                                   // 471\n  var self = this;                                                                                                    // 472\n                                                                                                                      // 473\n  function on () {                                                                                                    // 474\n    self.removeListener(name, on);                                                                                    // 475\n    fn.apply(this, arguments);                                                                                        // 476\n  };                                                                                                                  // 477\n                                                                                                                      // 478\n  on.listener = fn;                                                                                                   // 479\n  this.on(name, on);                                                                                                  // 480\n                                                                                                                      // 481\n  return this;                                                                                                        // 482\n};                                                                                                                    // 483\n                                                                                                                      // 484\n/**                                                                                                                   // 485\n * Removes a listener.                                                                                                // 486\n *                                                                                                                    // 487\n * @api public                                                                                                        // 488\n */                                                                                                                   // 489\n                                                                                                                      // 490\nEventEmitter.prototype.removeListener = function (name, fn) {                                                         // 491\n  if (this.$events && this.$events[name]) {                                                                           // 492\n    var list = this.$events[name];                                                                                    // 493\n                                                                                                                      // 494\n    if (isArray(list)) {                                                                                              // 495\n      var pos = -1;                                                                                                   // 496\n                                                                                                                      // 497\n      for (var i = 0, l = list.length; i < l; i++) {                                                                  // 498\n        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {                                        // 499\n          pos = i;                                                                                                    // 500\n          break;                                                                                                      // 501\n        }                                                                                                             // 502\n      }                                                                                                               // 503\n                                                                                                                      // 504\n      if (pos < 0) {                                                                                                  // 505\n        return this;                                                                                                  // 506\n      }                                                                                                               // 507\n                                                                                                                      // 508\n      list.splice(pos, 1);                                                                                            // 509\n                                                                                                                      // 510\n      if (!list.length) {                                                                                             // 511\n        delete this.$events[name];                                                                                    // 512\n      }                                                                                                               // 513\n    } else if (list === fn || (list.listener && list.listener === fn)) {                                              // 514\n      delete this.$events[name];                                                                                      // 515\n    }                                                                                                                 // 516\n  }                                                                                                                   // 517\n                                                                                                                      // 518\n  return this;                                                                                                        // 519\n};                                                                                                                    // 520\n                                                                                                                      // 521\n/**                                                                                                                   // 522\n * Removes all listeners for an event.                                                                                // 523\n *                                                                                                                    // 524\n * @api public                                                                                                        // 525\n */                                                                                                                   // 526\n                                                                                                                      // 527\nEventEmitter.prototype.removeAllListeners = function (name) {                                                         // 528\n  if (name === undefined) {                                                                                           // 529\n    this.$events = {};                                                                                                // 530\n    return this;                                                                                                      // 531\n  }                                                                                                                   // 532\n                                                                                                                      // 533\n  if (this.$events && this.$events[name]) {                                                                           // 534\n    this.$events[name] = null;                                                                                        // 535\n  }                                                                                                                   // 536\n                                                                                                                      // 537\n  return this;                                                                                                        // 538\n};                                                                                                                    // 539\n                                                                                                                      // 540\n/**                                                                                                                   // 541\n * Gets all listeners for a certain event.                                                                            // 542\n *                                                                                                                    // 543\n * @api public                                                                                                        // 544\n */                                                                                                                   // 545\n                                                                                                                      // 546\nEventEmitter.prototype.listeners = function (name) {                                                                  // 547\n  if (!this.$events) {                                                                                                // 548\n    this.$events = {};                                                                                                // 549\n  }                                                                                                                   // 550\n                                                                                                                      // 551\n  if (!this.$events[name]) {                                                                                          // 552\n    this.$events[name] = [];                                                                                          // 553\n  }                                                                                                                   // 554\n                                                                                                                      // 555\n  if (!isArray(this.$events[name])) {                                                                                 // 556\n    this.$events[name] = [this.$events[name]];                                                                        // 557\n  }                                                                                                                   // 558\n                                                                                                                      // 559\n  return this.$events[name];                                                                                          // 560\n};                                                                                                                    // 561\n                                                                                                                      // 562\n/**                                                                                                                   // 563\n * Emits an event.                                                                                                    // 564\n *                                                                                                                    // 565\n * @api public                                                                                                        // 566\n */                                                                                                                   // 567\n                                                                                                                      // 568\nEventEmitter.prototype.emit = function (name) {                                                                       // 569\n  if (!this.$events) {                                                                                                // 570\n    return false;                                                                                                     // 571\n  }                                                                                                                   // 572\n                                                                                                                      // 573\n  var handler = this.$events[name];                                                                                   // 574\n                                                                                                                      // 575\n  if (!handler) {                                                                                                     // 576\n    return false;                                                                                                     // 577\n  }                                                                                                                   // 578\n                                                                                                                      // 579\n  var args = [].slice.call(arguments, 1);                                                                             // 580\n                                                                                                                      // 581\n  if ('function' == typeof handler) {                                                                                 // 582\n    handler.apply(this, args);                                                                                        // 583\n  } else if (isArray(handler)) {                                                                                      // 584\n    var listeners = handler.slice();                                                                                  // 585\n                                                                                                                      // 586\n    for (var i = 0, l = listeners.length; i < l; i++) {                                                               // 587\n      listeners[i].apply(this, args);                                                                                 // 588\n    }                                                                                                                 // 589\n  } else {                                                                                                            // 590\n    return false;                                                                                                     // 591\n  }                                                                                                                   // 592\n                                                                                                                      // 593\n  return true;                                                                                                        // 594\n};                                                                                                                    // 595\n}); // module: browser/events.js                                                                                      // 596\n                                                                                                                      // 597\nrequire.register(\"browser/fs.js\", function(module, exports, require){                                                 // 598\n                                                                                                                      // 599\n}); // module: browser/fs.js                                                                                          // 600\n                                                                                                                      // 601\nrequire.register(\"browser/path.js\", function(module, exports, require){                                               // 602\n                                                                                                                      // 603\n}); // module: browser/path.js                                                                                        // 604\n                                                                                                                      // 605\nrequire.register(\"browser/progress.js\", function(module, exports, require){                                           // 606\n/**                                                                                                                   // 607\n * Expose `Progress`.                                                                                                 // 608\n */                                                                                                                   // 609\n                                                                                                                      // 610\nmodule.exports = Progress;                                                                                            // 611\n                                                                                                                      // 612\n/**                                                                                                                   // 613\n * Initialize a new `Progress` indicator.                                                                             // 614\n */                                                                                                                   // 615\n                                                                                                                      // 616\nfunction Progress() {                                                                                                 // 617\n  this.percent = 0;                                                                                                   // 618\n  this.size(0);                                                                                                       // 619\n  this.fontSize(11);                                                                                                  // 620\n  this.font('helvetica, arial, sans-serif');                                                                          // 621\n}                                                                                                                     // 622\n                                                                                                                      // 623\n/**                                                                                                                   // 624\n * Set progress size to `n`.                                                                                          // 625\n *                                                                                                                    // 626\n * @param {Number} n                                                                                                  // 627\n * @return {Progress} for chaining                                                                                    // 628\n * @api public                                                                                                        // 629\n */                                                                                                                   // 630\n                                                                                                                      // 631\nProgress.prototype.size = function(n){                                                                                // 632\n  this._size = n;                                                                                                     // 633\n  return this;                                                                                                        // 634\n};                                                                                                                    // 635\n                                                                                                                      // 636\n/**                                                                                                                   // 637\n * Set text to `str`.                                                                                                 // 638\n *                                                                                                                    // 639\n * @param {String} str                                                                                                // 640\n * @return {Progress} for chaining                                                                                    // 641\n * @api public                                                                                                        // 642\n */                                                                                                                   // 643\n                                                                                                                      // 644\nProgress.prototype.text = function(str){                                                                              // 645\n  this._text = str;                                                                                                   // 646\n  return this;                                                                                                        // 647\n};                                                                                                                    // 648\n                                                                                                                      // 649\n/**                                                                                                                   // 650\n * Set font size to `n`.                                                                                              // 651\n *                                                                                                                    // 652\n * @param {Number} n                                                                                                  // 653\n * @return {Progress} for chaining                                                                                    // 654\n * @api public                                                                                                        // 655\n */                                                                                                                   // 656\n                                                                                                                      // 657\nProgress.prototype.fontSize = function(n){                                                                            // 658\n  this._fontSize = n;                                                                                                 // 659\n  return this;                                                                                                        // 660\n};                                                                                                                    // 661\n                                                                                                                      // 662\n/**                                                                                                                   // 663\n * Set font `family`.                                                                                                 // 664\n *                                                                                                                    // 665\n * @param {String} family                                                                                             // 666\n * @return {Progress} for chaining                                                                                    // 667\n */                                                                                                                   // 668\n                                                                                                                      // 669\nProgress.prototype.font = function(family){                                                                           // 670\n  this._font = family;                                                                                                // 671\n  return this;                                                                                                        // 672\n};                                                                                                                    // 673\n                                                                                                                      // 674\n/**                                                                                                                   // 675\n * Update percentage to `n`.                                                                                          // 676\n *                                                                                                                    // 677\n * @param {Number} n                                                                                                  // 678\n * @return {Progress} for chaining                                                                                    // 679\n */                                                                                                                   // 680\n                                                                                                                      // 681\nProgress.prototype.update = function(n){                                                                              // 682\n  this.percent = n;                                                                                                   // 683\n  return this;                                                                                                        // 684\n};                                                                                                                    // 685\n                                                                                                                      // 686\n/**                                                                                                                   // 687\n * Draw on `ctx`.                                                                                                     // 688\n *                                                                                                                    // 689\n * @param {CanvasRenderingContext2d} ctx                                                                              // 690\n * @return {Progress} for chaining                                                                                    // 691\n */                                                                                                                   // 692\n                                                                                                                      // 693\nProgress.prototype.draw = function(ctx){                                                                              // 694\n  try {                                                                                                               // 695\n    var percent = Math.min(this.percent, 100)                                                                         // 696\n      , size = this._size                                                                                             // 697\n      , half = size / 2                                                                                               // 698\n      , x = half                                                                                                      // 699\n      , y = half                                                                                                      // 700\n      , rad = half - 1                                                                                                // 701\n      , fontSize = this._fontSize;                                                                                    // 702\n                                                                                                                      // 703\n    ctx.font = fontSize + 'px ' + this._font;                                                                         // 704\n                                                                                                                      // 705\n    var angle = Math.PI * 2 * (percent / 100);                                                                        // 706\n    ctx.clearRect(0, 0, size, size);                                                                                  // 707\n                                                                                                                      // 708\n    // outer circle                                                                                                   // 709\n    ctx.strokeStyle = '#9f9f9f';                                                                                      // 710\n    ctx.beginPath();                                                                                                  // 711\n    ctx.arc(x, y, rad, 0, angle, false);                                                                              // 712\n    ctx.stroke();                                                                                                     // 713\n                                                                                                                      // 714\n    // inner circle                                                                                                   // 715\n    ctx.strokeStyle = '#eee';                                                                                         // 716\n    ctx.beginPath();                                                                                                  // 717\n    ctx.arc(x, y, rad - 1, 0, angle, true);                                                                           // 718\n    ctx.stroke();                                                                                                     // 719\n                                                                                                                      // 720\n    // text                                                                                                           // 721\n    var text = this._text || (percent | 0) + '%'                                                                      // 722\n      , w = ctx.measureText(text).width;                                                                              // 723\n                                                                                                                      // 724\n    ctx.fillText(                                                                                                     // 725\n        text                                                                                                          // 726\n      , x - w / 2 + 1                                                                                                 // 727\n      , y + fontSize / 2 - 1);                                                                                        // 728\n  } catch (ex) {} //don't fail if we can't render progress                                                            // 729\n  return this;                                                                                                        // 730\n};                                                                                                                    // 731\n                                                                                                                      // 732\n}); // module: browser/progress.js                                                                                    // 733\n                                                                                                                      // 734\nrequire.register(\"browser/tty.js\", function(module, exports, require){                                                // 735\n                                                                                                                      // 736\nexports.isatty = function(){                                                                                          // 737\n  return true;                                                                                                        // 738\n};                                                                                                                    // 739\n                                                                                                                      // 740\nexports.getWindowSize = function(){                                                                                   // 741\n  if ('innerHeight' in global) {                                                                                      // 742\n    return [global.innerHeight, global.innerWidth];                                                                   // 743\n  } else {                                                                                                            // 744\n    // In a Web Worker, the DOM Window is not available.                                                              // 745\n    return [640, 480];                                                                                                // 746\n  }                                                                                                                   // 747\n};                                                                                                                    // 748\n                                                                                                                      // 749\n}); // module: browser/tty.js                                                                                         // 750\n                                                                                                                      // 751\nrequire.register(\"context.js\", function(module, exports, require){                                                    // 752\n                                                                                                                      // 753\n/**                                                                                                                   // 754\n * Expose `Context`.                                                                                                  // 755\n */                                                                                                                   // 756\n                                                                                                                      // 757\nmodule.exports = Context;                                                                                             // 758\n                                                                                                                      // 759\n/**                                                                                                                   // 760\n * Initialize a new `Context`.                                                                                        // 761\n *                                                                                                                    // 762\n * @api private                                                                                                       // 763\n */                                                                                                                   // 764\n                                                                                                                      // 765\nfunction Context(){}                                                                                                  // 766\n                                                                                                                      // 767\n/**                                                                                                                   // 768\n * Set or get the context `Runnable` to `runnable`.                                                                   // 769\n *                                                                                                                    // 770\n * @param {Runnable} runnable                                                                                         // 771\n * @return {Context}                                                                                                  // 772\n * @api private                                                                                                       // 773\n */                                                                                                                   // 774\n                                                                                                                      // 775\nContext.prototype.runnable = function(runnable){                                                                      // 776\n  if (0 == arguments.length) return this._runnable;                                                                   // 777\n  this.test = this._runnable = runnable;                                                                              // 778\n  return this;                                                                                                        // 779\n};                                                                                                                    // 780\n                                                                                                                      // 781\n/**                                                                                                                   // 782\n * Set test timeout `ms`.                                                                                             // 783\n *                                                                                                                    // 784\n * @param {Number} ms                                                                                                 // 785\n * @return {Context} self                                                                                             // 786\n * @api private                                                                                                       // 787\n */                                                                                                                   // 788\n                                                                                                                      // 789\nContext.prototype.timeout = function(ms){                                                                             // 790\n  this.runnable().timeout(ms);                                                                                        // 791\n  return this;                                                                                                        // 792\n};                                                                                                                    // 793\n                                                                                                                      // 794\n/**                                                                                                                   // 795\n * Set test slowness threshold `ms`.                                                                                  // 796\n *                                                                                                                    // 797\n * @param {Number} ms                                                                                                 // 798\n * @return {Context} self                                                                                             // 799\n * @api private                                                                                                       // 800\n */                                                                                                                   // 801\n                                                                                                                      // 802\nContext.prototype.slow = function(ms){                                                                                // 803\n  this.runnable().slow(ms);                                                                                           // 804\n  return this;                                                                                                        // 805\n};                                                                                                                    // 806\n                                                                                                                      // 807\n/**                                                                                                                   // 808\n * Inspect the context void of `._runnable`.                                                                          // 809\n *                                                                                                                    // 810\n * @return {String}                                                                                                   // 811\n * @api private                                                                                                       // 812\n */                                                                                                                   // 813\n                                                                                                                      // 814\nContext.prototype.inspect = function(){                                                                               // 815\n  return JSON.stringify(this, function(key, val){                                                                     // 816\n    if ('_runnable' == key) return;                                                                                   // 817\n    if ('test' == key) return;                                                                                        // 818\n    return val;                                                                                                       // 819\n  }, 2);                                                                                                              // 820\n};                                                                                                                    // 821\n                                                                                                                      // 822\n}); // module: context.js                                                                                             // 823\n                                                                                                                      // 824\nrequire.register(\"hook.js\", function(module, exports, require){                                                       // 825\n                                                                                                                      // 826\n/**                                                                                                                   // 827\n * Module dependencies.                                                                                               // 828\n */                                                                                                                   // 829\n                                                                                                                      // 830\nvar Runnable = require('./runnable');                                                                                 // 831\n                                                                                                                      // 832\n/**                                                                                                                   // 833\n * Expose `Hook`.                                                                                                     // 834\n */                                                                                                                   // 835\n                                                                                                                      // 836\nmodule.exports = Hook;                                                                                                // 837\n                                                                                                                      // 838\n/**                                                                                                                   // 839\n * Initialize a new `Hook` with the given `title` and callback `fn`.                                                  // 840\n *                                                                                                                    // 841\n * @param {String} title                                                                                              // 842\n * @param {Function} fn                                                                                               // 843\n * @api private                                                                                                       // 844\n */                                                                                                                   // 845\n                                                                                                                      // 846\nfunction Hook(title, fn) {                                                                                            // 847\n  Runnable.call(this, title, fn);                                                                                     // 848\n  this.type = 'hook';                                                                                                 // 849\n}                                                                                                                     // 850\n                                                                                                                      // 851\n/**                                                                                                                   // 852\n * Inherit from `Runnable.prototype`.                                                                                 // 853\n */                                                                                                                   // 854\n                                                                                                                      // 855\nfunction F(){};                                                                                                       // 856\nF.prototype = Runnable.prototype;                                                                                     // 857\nHook.prototype = new F;                                                                                               // 858\nHook.prototype.constructor = Hook;                                                                                    // 859\n                                                                                                                      // 860\n                                                                                                                      // 861\n/**                                                                                                                   // 862\n * Get or set the test `err`.                                                                                         // 863\n *                                                                                                                    // 864\n * @param {Error} err                                                                                                 // 865\n * @return {Error}                                                                                                    // 866\n * @api public                                                                                                        // 867\n */                                                                                                                   // 868\n                                                                                                                      // 869\nHook.prototype.error = function(err){                                                                                 // 870\n  if (0 == arguments.length) {                                                                                        // 871\n    var err = this._error;                                                                                            // 872\n    this._error = null;                                                                                               // 873\n    return err;                                                                                                       // 874\n  }                                                                                                                   // 875\n                                                                                                                      // 876\n  this._error = err;                                                                                                  // 877\n};                                                                                                                    // 878\n                                                                                                                      // 879\n}); // module: hook.js                                                                                                // 880\n                                                                                                                      // 881\nrequire.register(\"interfaces/bdd.js\", function(module, exports, require){                                             // 882\n                                                                                                                      // 883\n/**                                                                                                                   // 884\n * Module dependencies.                                                                                               // 885\n */                                                                                                                   // 886\n                                                                                                                      // 887\nvar Suite = require('../suite')                                                                                       // 888\n  , Test = require('../test')                                                                                         // 889\n  , utils = require('../utils');                                                                                      // 890\n                                                                                                                      // 891\n/**                                                                                                                   // 892\n * BDD-style interface:                                                                                               // 893\n *                                                                                                                    // 894\n *      describe('Array', function(){                                                                                 // 895\n *        describe('#indexOf()', function(){                                                                          // 896\n *          it('should return -1 when not present', function(){                                                       // 897\n *                                                                                                                    // 898\n *          });                                                                                                       // 899\n *                                                                                                                    // 900\n *          it('should return the index when present', function(){                                                    // 901\n *                                                                                                                    // 902\n *          });                                                                                                       // 903\n *        });                                                                                                         // 904\n *      });                                                                                                           // 905\n *                                                                                                                    // 906\n */                                                                                                                   // 907\n                                                                                                                      // 908\nmodule.exports = function(suite){                                                                                     // 909\n  var suites = [suite];                                                                                               // 910\n                                                                                                                      // 911\n  suite.on('pre-require', function(context, file, mocha){                                                             // 912\n                                                                                                                      // 913\n    /**                                                                                                               // 914\n     * Execute before running tests.                                                                                  // 915\n     */                                                                                                               // 916\n                                                                                                                      // 917\n    context.before = function(fn){                                                                                    // 918\n      suites[0].beforeAll(fn);                                                                                        // 919\n    };                                                                                                                // 920\n                                                                                                                      // 921\n    /**                                                                                                               // 922\n     * Execute after running tests.                                                                                   // 923\n     */                                                                                                               // 924\n                                                                                                                      // 925\n    context.after = function(fn){                                                                                     // 926\n      suites[0].afterAll(fn);                                                                                         // 927\n    };                                                                                                                // 928\n                                                                                                                      // 929\n    /**                                                                                                               // 930\n     * Execute before each test case.                                                                                 // 931\n     */                                                                                                               // 932\n                                                                                                                      // 933\n    context.beforeEach = function(fn){                                                                                // 934\n      suites[0].beforeEach(fn);                                                                                       // 935\n    };                                                                                                                // 936\n                                                                                                                      // 937\n    /**                                                                                                               // 938\n     * Execute after each test case.                                                                                  // 939\n     */                                                                                                               // 940\n                                                                                                                      // 941\n    context.afterEach = function(fn){                                                                                 // 942\n      suites[0].afterEach(fn);                                                                                        // 943\n    };                                                                                                                // 944\n                                                                                                                      // 945\n    /**                                                                                                               // 946\n     * Describe a \"suite\" with the given `title`                                                                      // 947\n     * and callback `fn` containing nested suites                                                                     // 948\n     * and/or tests.                                                                                                  // 949\n     */                                                                                                               // 950\n                                                                                                                      // 951\n    context.describe = context.context = function(title, fn){                                                         // 952\n      var suite = Suite.create(suites[0], title);                                                                     // 953\n      suites.unshift(suite);                                                                                          // 954\n      fn.call(suite);                                                                                                 // 955\n      suites.shift();                                                                                                 // 956\n      return suite;                                                                                                   // 957\n    };                                                                                                                // 958\n                                                                                                                      // 959\n    /**                                                                                                               // 960\n     * Pending describe.                                                                                              // 961\n     */                                                                                                               // 962\n                                                                                                                      // 963\n    context.xdescribe =                                                                                               // 964\n    context.xcontext =                                                                                                // 965\n    context.describe.skip = function(title, fn){                                                                      // 966\n      var suite = Suite.create(suites[0], title);                                                                     // 967\n      suite.pending = true;                                                                                           // 968\n      suites.unshift(suite);                                                                                          // 969\n      fn.call(suite);                                                                                                 // 970\n      suites.shift();                                                                                                 // 971\n    };                                                                                                                // 972\n                                                                                                                      // 973\n    /**                                                                                                               // 974\n     * Exclusive suite.                                                                                               // 975\n     */                                                                                                               // 976\n                                                                                                                      // 977\n    context.describe.only = function(title, fn){                                                                      // 978\n      var suite = context.describe(title, fn);                                                                        // 979\n      mocha.grep(suite.fullTitle());                                                                                  // 980\n      return suite;                                                                                                   // 981\n    };                                                                                                                // 982\n                                                                                                                      // 983\n    /**                                                                                                               // 984\n     * Describe a specification or test-case                                                                          // 985\n     * with the given `title` and callback `fn`                                                                       // 986\n     * acting as a thunk.                                                                                             // 987\n     */                                                                                                               // 988\n                                                                                                                      // 989\n    context.it = context.specify = function(title, fn){                                                               // 990\n      var suite = suites[0];                                                                                          // 991\n      if (suite.pending) var fn = null;                                                                               // 992\n      var test = new Test(title, fn);                                                                                 // 993\n      suite.addTest(test);                                                                                            // 994\n      return test;                                                                                                    // 995\n    };                                                                                                                // 996\n                                                                                                                      // 997\n    /**                                                                                                               // 998\n     * Exclusive test-case.                                                                                           // 999\n     */                                                                                                               // 1000\n                                                                                                                      // 1001\n    context.it.only = function(title, fn){                                                                            // 1002\n      var test = context.it(title, fn);                                                                               // 1003\n      var reString = '^' + utils.escapeRegexp(test.fullTitle()) + '$';                                                // 1004\n      mocha.grep(new RegExp(reString));                                                                               // 1005\n      return test;                                                                                                    // 1006\n    };                                                                                                                // 1007\n                                                                                                                      // 1008\n    /**                                                                                                               // 1009\n     * Pending test case.                                                                                             // 1010\n     */                                                                                                               // 1011\n                                                                                                                      // 1012\n    context.xit =                                                                                                     // 1013\n    context.xspecify =                                                                                                // 1014\n    context.it.skip = function(title){                                                                                // 1015\n      context.it(title);                                                                                              // 1016\n    };                                                                                                                // 1017\n  });                                                                                                                 // 1018\n};                                                                                                                    // 1019\n                                                                                                                      // 1020\n}); // module: interfaces/bdd.js                                                                                      // 1021\n                                                                                                                      // 1022\nrequire.register(\"interfaces/exports.js\", function(module, exports, require){                                         // 1023\n                                                                                                                      // 1024\n/**                                                                                                                   // 1025\n * Module dependencies.                                                                                               // 1026\n */                                                                                                                   // 1027\n                                                                                                                      // 1028\nvar Suite = require('../suite')                                                                                       // 1029\n  , Test = require('../test');                                                                                        // 1030\n                                                                                                                      // 1031\n/**                                                                                                                   // 1032\n * TDD-style interface:                                                                                               // 1033\n *                                                                                                                    // 1034\n *     exports.Array = {                                                                                              // 1035\n *       '#indexOf()': {                                                                                              // 1036\n *         'should return -1 when the value is not present': function(){                                              // 1037\n *                                                                                                                    // 1038\n *         },                                                                                                         // 1039\n *                                                                                                                    // 1040\n *         'should return the correct index when the value is present': function(){                                   // 1041\n *                                                                                                                    // 1042\n *         }                                                                                                          // 1043\n *       }                                                                                                            // 1044\n *     };                                                                                                             // 1045\n *                                                                                                                    // 1046\n */                                                                                                                   // 1047\n                                                                                                                      // 1048\nmodule.exports = function(suite){                                                                                     // 1049\n  var suites = [suite];                                                                                               // 1050\n                                                                                                                      // 1051\n  suite.on('require', visit);                                                                                         // 1052\n                                                                                                                      // 1053\n  function visit(obj) {                                                                                               // 1054\n    var suite;                                                                                                        // 1055\n    for (var key in obj) {                                                                                            // 1056\n      if ('function' == typeof obj[key]) {                                                                            // 1057\n        var fn = obj[key];                                                                                            // 1058\n        switch (key) {                                                                                                // 1059\n          case 'before':                                                                                              // 1060\n            suites[0].beforeAll(fn);                                                                                  // 1061\n            break;                                                                                                    // 1062\n          case 'after':                                                                                               // 1063\n            suites[0].afterAll(fn);                                                                                   // 1064\n            break;                                                                                                    // 1065\n          case 'beforeEach':                                                                                          // 1066\n            suites[0].beforeEach(fn);                                                                                 // 1067\n            break;                                                                                                    // 1068\n          case 'afterEach':                                                                                           // 1069\n            suites[0].afterEach(fn);                                                                                  // 1070\n            break;                                                                                                    // 1071\n          default:                                                                                                    // 1072\n            suites[0].addTest(new Test(key, fn));                                                                     // 1073\n        }                                                                                                             // 1074\n      } else {                                                                                                        // 1075\n        var suite = Suite.create(suites[0], key);                                                                     // 1076\n        suites.unshift(suite);                                                                                        // 1077\n        visit(obj[key]);                                                                                              // 1078\n        suites.shift();                                                                                               // 1079\n      }                                                                                                               // 1080\n    }                                                                                                                 // 1081\n  }                                                                                                                   // 1082\n};                                                                                                                    // 1083\n                                                                                                                      // 1084\n}); // module: interfaces/exports.js                                                                                  // 1085\n                                                                                                                      // 1086\nrequire.register(\"interfaces/index.js\", function(module, exports, require){                                           // 1087\n                                                                                                                      // 1088\nexports.bdd = require('./bdd');                                                                                       // 1089\nexports.tdd = require('./tdd');                                                                                       // 1090\nexports.qunit = require('./qunit');                                                                                   // 1091\nexports.exports = require('./exports');                                                                               // 1092\n                                                                                                                      // 1093\n}); // module: interfaces/index.js                                                                                    // 1094\n                                                                                                                      // 1095\nrequire.register(\"interfaces/qunit.js\", function(module, exports, require){                                           // 1096\n                                                                                                                      // 1097\n/**                                                                                                                   // 1098\n * Module dependencies.                                                                                               // 1099\n */                                                                                                                   // 1100\n                                                                                                                      // 1101\nvar Suite = require('../suite')                                                                                       // 1102\n  , Test = require('../test')                                                                                         // 1103\n  , utils = require('../utils');                                                                                      // 1104\n                                                                                                                      // 1105\n/**                                                                                                                   // 1106\n * QUnit-style interface:                                                                                             // 1107\n *                                                                                                                    // 1108\n *     suite('Array');                                                                                                // 1109\n *                                                                                                                    // 1110\n *     test('#length', function(){                                                                                    // 1111\n *       var arr = [1,2,3];                                                                                           // 1112\n *       ok(arr.length == 3);                                                                                         // 1113\n *     });                                                                                                            // 1114\n *                                                                                                                    // 1115\n *     test('#indexOf()', function(){                                                                                 // 1116\n *       var arr = [1,2,3];                                                                                           // 1117\n *       ok(arr.indexOf(1) == 0);                                                                                     // 1118\n *       ok(arr.indexOf(2) == 1);                                                                                     // 1119\n *       ok(arr.indexOf(3) == 2);                                                                                     // 1120\n *     });                                                                                                            // 1121\n *                                                                                                                    // 1122\n *     suite('String');                                                                                               // 1123\n *                                                                                                                    // 1124\n *     test('#length', function(){                                                                                    // 1125\n *       ok('foo'.length == 3);                                                                                       // 1126\n *     });                                                                                                            // 1127\n *                                                                                                                    // 1128\n */                                                                                                                   // 1129\n                                                                                                                      // 1130\nmodule.exports = function(suite){                                                                                     // 1131\n  var suites = [suite];                                                                                               // 1132\n                                                                                                                      // 1133\n  suite.on('pre-require', function(context, file, mocha){                                                             // 1134\n                                                                                                                      // 1135\n    /**                                                                                                               // 1136\n     * Execute before running tests.                                                                                  // 1137\n     */                                                                                                               // 1138\n                                                                                                                      // 1139\n    context.before = function(fn){                                                                                    // 1140\n      suites[0].beforeAll(fn);                                                                                        // 1141\n    };                                                                                                                // 1142\n                                                                                                                      // 1143\n    /**                                                                                                               // 1144\n     * Execute after running tests.                                                                                   // 1145\n     */                                                                                                               // 1146\n                                                                                                                      // 1147\n    context.after = function(fn){                                                                                     // 1148\n      suites[0].afterAll(fn);                                                                                         // 1149\n    };                                                                                                                // 1150\n                                                                                                                      // 1151\n    /**                                                                                                               // 1152\n     * Execute before each test case.                                                                                 // 1153\n     */                                                                                                               // 1154\n                                                                                                                      // 1155\n    context.beforeEach = function(fn){                                                                                // 1156\n      suites[0].beforeEach(fn);                                                                                       // 1157\n    };                                                                                                                // 1158\n                                                                                                                      // 1159\n    /**                                                                                                               // 1160\n     * Execute after each test case.                                                                                  // 1161\n     */                                                                                                               // 1162\n                                                                                                                      // 1163\n    context.afterEach = function(fn){                                                                                 // 1164\n      suites[0].afterEach(fn);                                                                                        // 1165\n    };                                                                                                                // 1166\n                                                                                                                      // 1167\n    /**                                                                                                               // 1168\n     * Describe a \"suite\" with the given `title`.                                                                     // 1169\n     */                                                                                                               // 1170\n                                                                                                                      // 1171\n    context.suite = function(title){                                                                                  // 1172\n      if (suites.length > 1) suites.shift();                                                                          // 1173\n      var suite = Suite.create(suites[0], title);                                                                     // 1174\n      suites.unshift(suite);                                                                                          // 1175\n      return suite;                                                                                                   // 1176\n    };                                                                                                                // 1177\n                                                                                                                      // 1178\n    /**                                                                                                               // 1179\n     * Exclusive test-case.                                                                                           // 1180\n     */                                                                                                               // 1181\n                                                                                                                      // 1182\n    context.suite.only = function(title, fn){                                                                         // 1183\n      var suite = context.suite(title, fn);                                                                           // 1184\n      mocha.grep(suite.fullTitle());                                                                                  // 1185\n    };                                                                                                                // 1186\n                                                                                                                      // 1187\n    /**                                                                                                               // 1188\n     * Describe a specification or test-case                                                                          // 1189\n     * with the given `title` and callback `fn`                                                                       // 1190\n     * acting as a thunk.                                                                                             // 1191\n     */                                                                                                               // 1192\n                                                                                                                      // 1193\n    context.test = function(title, fn){                                                                               // 1194\n      var test = new Test(title, fn);                                                                                 // 1195\n      suites[0].addTest(test);                                                                                        // 1196\n      return test;                                                                                                    // 1197\n    };                                                                                                                // 1198\n                                                                                                                      // 1199\n    /**                                                                                                               // 1200\n     * Exclusive test-case.                                                                                           // 1201\n     */                                                                                                               // 1202\n                                                                                                                      // 1203\n    context.test.only = function(title, fn){                                                                          // 1204\n      var test = context.test(title, fn);                                                                             // 1205\n      var reString = '^' + utils.escapeRegexp(test.fullTitle()) + '$';                                                // 1206\n      mocha.grep(new RegExp(reString));                                                                               // 1207\n    };                                                                                                                // 1208\n                                                                                                                      // 1209\n    /**                                                                                                               // 1210\n     * Pending test case.                                                                                             // 1211\n     */                                                                                                               // 1212\n                                                                                                                      // 1213\n    context.test.skip = function(title){                                                                              // 1214\n      context.test(title);                                                                                            // 1215\n    };                                                                                                                // 1216\n  });                                                                                                                 // 1217\n};                                                                                                                    // 1218\n                                                                                                                      // 1219\n}); // module: interfaces/qunit.js                                                                                    // 1220\n                                                                                                                      // 1221\nrequire.register(\"interfaces/tdd.js\", function(module, exports, require){                                             // 1222\n                                                                                                                      // 1223\n/**                                                                                                                   // 1224\n * Module dependencies.                                                                                               // 1225\n */                                                                                                                   // 1226\n                                                                                                                      // 1227\nvar Suite = require('../suite')                                                                                       // 1228\n  , Test = require('../test')                                                                                         // 1229\n  , utils = require('../utils');;                                                                                     // 1230\n                                                                                                                      // 1231\n/**                                                                                                                   // 1232\n * TDD-style interface:                                                                                               // 1233\n *                                                                                                                    // 1234\n *      suite('Array', function(){                                                                                    // 1235\n *        suite('#indexOf()', function(){                                                                             // 1236\n *          suiteSetup(function(){                                                                                    // 1237\n *                                                                                                                    // 1238\n *          });                                                                                                       // 1239\n *                                                                                                                    // 1240\n *          test('should return -1 when not present', function(){                                                     // 1241\n *                                                                                                                    // 1242\n *          });                                                                                                       // 1243\n *                                                                                                                    // 1244\n *          test('should return the index when present', function(){                                                  // 1245\n *                                                                                                                    // 1246\n *          });                                                                                                       // 1247\n *                                                                                                                    // 1248\n *          suiteTeardown(function(){                                                                                 // 1249\n *                                                                                                                    // 1250\n *          });                                                                                                       // 1251\n *        });                                                                                                         // 1252\n *      });                                                                                                           // 1253\n *                                                                                                                    // 1254\n */                                                                                                                   // 1255\n                                                                                                                      // 1256\nmodule.exports = function(suite){                                                                                     // 1257\n  var suites = [suite];                                                                                               // 1258\n                                                                                                                      // 1259\n  suite.on('pre-require', function(context, file, mocha){                                                             // 1260\n                                                                                                                      // 1261\n    /**                                                                                                               // 1262\n     * Execute before each test case.                                                                                 // 1263\n     */                                                                                                               // 1264\n                                                                                                                      // 1265\n    context.setup = function(fn){                                                                                     // 1266\n      suites[0].beforeEach(fn);                                                                                       // 1267\n    };                                                                                                                // 1268\n                                                                                                                      // 1269\n    /**                                                                                                               // 1270\n     * Execute after each test case.                                                                                  // 1271\n     */                                                                                                               // 1272\n                                                                                                                      // 1273\n    context.teardown = function(fn){                                                                                  // 1274\n      suites[0].afterEach(fn);                                                                                        // 1275\n    };                                                                                                                // 1276\n                                                                                                                      // 1277\n    /**                                                                                                               // 1278\n     * Execute before the suite.                                                                                      // 1279\n     */                                                                                                               // 1280\n                                                                                                                      // 1281\n    context.suiteSetup = function(fn){                                                                                // 1282\n      suites[0].beforeAll(fn);                                                                                        // 1283\n    };                                                                                                                // 1284\n                                                                                                                      // 1285\n    /**                                                                                                               // 1286\n     * Execute after the suite.                                                                                       // 1287\n     */                                                                                                               // 1288\n                                                                                                                      // 1289\n    context.suiteTeardown = function(fn){                                                                             // 1290\n      suites[0].afterAll(fn);                                                                                         // 1291\n    };                                                                                                                // 1292\n                                                                                                                      // 1293\n    /**                                                                                                               // 1294\n     * Describe a \"suite\" with the given `title`                                                                      // 1295\n     * and callback `fn` containing nested suites                                                                     // 1296\n     * and/or tests.                                                                                                  // 1297\n     */                                                                                                               // 1298\n                                                                                                                      // 1299\n    context.suite = function(title, fn){                                                                              // 1300\n      var suite = Suite.create(suites[0], title);                                                                     // 1301\n      suites.unshift(suite);                                                                                          // 1302\n      fn.call(suite);                                                                                                 // 1303\n      suites.shift();                                                                                                 // 1304\n      return suite;                                                                                                   // 1305\n    };                                                                                                                // 1306\n                                                                                                                      // 1307\n    /**                                                                                                               // 1308\n     * Pending suite.                                                                                                 // 1309\n     */                                                                                                               // 1310\n    context.suite.skip = function(title, fn) {                                                                        // 1311\n      var suite = Suite.create(suites[0], title);                                                                     // 1312\n      suite.pending = true;                                                                                           // 1313\n      suites.unshift(suite);                                                                                          // 1314\n      fn.call(suite);                                                                                                 // 1315\n      suites.shift();                                                                                                 // 1316\n    };                                                                                                                // 1317\n                                                                                                                      // 1318\n    /**                                                                                                               // 1319\n     * Exclusive test-case.                                                                                           // 1320\n     */                                                                                                               // 1321\n                                                                                                                      // 1322\n    context.suite.only = function(title, fn){                                                                         // 1323\n      var suite = context.suite(title, fn);                                                                           // 1324\n      mocha.grep(suite.fullTitle());                                                                                  // 1325\n    };                                                                                                                // 1326\n                                                                                                                      // 1327\n    /**                                                                                                               // 1328\n     * Describe a specification or test-case                                                                          // 1329\n     * with the given `title` and callback `fn`                                                                       // 1330\n     * acting as a thunk.                                                                                             // 1331\n     */                                                                                                               // 1332\n                                                                                                                      // 1333\n    context.test = function(title, fn){                                                                               // 1334\n      var suite = suites[0];                                                                                          // 1335\n      if (suite.pending) var fn = null;                                                                               // 1336\n      var test = new Test(title, fn);                                                                                 // 1337\n      suite.addTest(test);                                                                                            // 1338\n      return test;                                                                                                    // 1339\n    };                                                                                                                // 1340\n                                                                                                                      // 1341\n    /**                                                                                                               // 1342\n     * Exclusive test-case.                                                                                           // 1343\n     */                                                                                                               // 1344\n                                                                                                                      // 1345\n    context.test.only = function(title, fn){                                                                          // 1346\n      var test = context.test(title, fn);                                                                             // 1347\n      var reString = '^' + utils.escapeRegexp(test.fullTitle()) + '$';                                                // 1348\n      mocha.grep(new RegExp(reString));                                                                               // 1349\n    };                                                                                                                // 1350\n                                                                                                                      // 1351\n    /**                                                                                                               // 1352\n     * Pending test case.                                                                                             // 1353\n     */                                                                                                               // 1354\n                                                                                                                      // 1355\n    context.test.skip = function(title){                                                                              // 1356\n      context.test(title);                                                                                            // 1357\n    };                                                                                                                // 1358\n  });                                                                                                                 // 1359\n};                                                                                                                    // 1360\n                                                                                                                      // 1361\n}); // module: interfaces/tdd.js                                                                                      // 1362\n                                                                                                                      // 1363\nrequire.register(\"mocha.js\", function(module, exports, require){                                                      // 1364\n/*!                                                                                                                   // 1365\n * mocha                                                                                                              // 1366\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>                                                              // 1367\n * MIT Licensed                                                                                                       // 1368\n */                                                                                                                   // 1369\n                                                                                                                      // 1370\n/**                                                                                                                   // 1371\n * Module dependencies.                                                                                               // 1372\n */                                                                                                                   // 1373\n                                                                                                                      // 1374\nvar path = require('browser/path')                                                                                    // 1375\n  , utils = require('./utils');                                                                                       // 1376\n                                                                                                                      // 1377\n/**                                                                                                                   // 1378\n * Expose `Mocha`.                                                                                                    // 1379\n */                                                                                                                   // 1380\n                                                                                                                      // 1381\nexports = module.exports = Mocha;                                                                                     // 1382\n                                                                                                                      // 1383\n/**                                                                                                                   // 1384\n * Expose internals.                                                                                                  // 1385\n */                                                                                                                   // 1386\n                                                                                                                      // 1387\nexports.utils = utils;                                                                                                // 1388\nexports.interfaces = require('./interfaces');                                                                         // 1389\nexports.reporters = require('./reporters');                                                                           // 1390\nexports.Runnable = require('./runnable');                                                                             // 1391\nexports.Context = require('./context');                                                                               // 1392\nexports.Runner = require('./runner');                                                                                 // 1393\nexports.Suite = require('./suite');                                                                                   // 1394\nexports.Hook = require('./hook');                                                                                     // 1395\nexports.Test = require('./test');                                                                                     // 1396\n                                                                                                                      // 1397\n/**                                                                                                                   // 1398\n * Return image `name` path.                                                                                          // 1399\n *                                                                                                                    // 1400\n * @param {String} name                                                                                               // 1401\n * @return {String}                                                                                                   // 1402\n * @api private                                                                                                       // 1403\n */                                                                                                                   // 1404\n                                                                                                                      // 1405\nfunction image(name) {                                                                                                // 1406\n  return __dirname + '/../images/' + name + '.png';                                                                   // 1407\n}                                                                                                                     // 1408\n                                                                                                                      // 1409\n/**                                                                                                                   // 1410\n * Setup mocha with `options`.                                                                                        // 1411\n *                                                                                                                    // 1412\n * Options:                                                                                                           // 1413\n *                                                                                                                    // 1414\n *   - `ui` name \"bdd\", \"tdd\", \"exports\" etc                                                                          // 1415\n *   - `reporter` reporter instance, defaults to `mocha.reporters.Dot`                                                // 1416\n *   - `globals` array of accepted globals                                                                            // 1417\n *   - `timeout` timeout in milliseconds                                                                              // 1418\n *   - `bail` bail on the first test failure                                                                          // 1419\n *   - `slow` milliseconds to wait before considering a test slow                                                     // 1420\n *   - `ignoreLeaks` ignore global leaks                                                                              // 1421\n *   - `grep` string or regexp to filter tests with                                                                   // 1422\n *                                                                                                                    // 1423\n * @param {Object} options                                                                                            // 1424\n * @api public                                                                                                        // 1425\n */                                                                                                                   // 1426\n                                                                                                                      // 1427\nfunction Mocha(options) {                                                                                             // 1428\n  options = options || {};                                                                                            // 1429\n  this.files = [];                                                                                                    // 1430\n  this.options = options;                                                                                             // 1431\n  this.grep(options.grep);                                                                                            // 1432\n  this.suite = new exports.Suite('', new exports.Context);                                                            // 1433\n  this.ui(options.ui);                                                                                                // 1434\n  this.bail(options.bail);                                                                                            // 1435\n  this.reporter(options.reporter);                                                                                    // 1436\n  if (null != options.timeout) this.timeout(options.timeout);                                                         // 1437\n  this.useColors(options.useColors)                                                                                   // 1438\n  if (options.slow) this.slow(options.slow);                                                                          // 1439\n                                                                                                                      // 1440\n  this.suite.on('pre-require', function (context) {                                                                   // 1441\n    exports.afterEach = context.afterEach || context.teardown;                                                        // 1442\n    exports.after = context.after || context.suiteTeardown;                                                           // 1443\n    exports.beforeEach = context.beforeEach || context.setup;                                                         // 1444\n    exports.before = context.before || context.suiteSetup;                                                            // 1445\n    exports.describe = context.describe || context.suite;                                                             // 1446\n    exports.it = context.it || context.test;                                                                          // 1447\n    exports.setup = context.setup || context.beforeEach;                                                              // 1448\n    exports.suiteSetup = context.suiteSetup || context.before;                                                        // 1449\n    exports.suiteTeardown = context.suiteTeardown || context.after;                                                   // 1450\n    exports.suite = context.suite || context.describe;                                                                // 1451\n    exports.teardown = context.teardown || context.afterEach;                                                         // 1452\n    exports.test = context.test || context.it;                                                                        // 1453\n  });                                                                                                                 // 1454\n}                                                                                                                     // 1455\n                                                                                                                      // 1456\n/**                                                                                                                   // 1457\n * Enable or disable bailing on the first failure.                                                                    // 1458\n *                                                                                                                    // 1459\n * @param {Boolean} [bail]                                                                                            // 1460\n * @api public                                                                                                        // 1461\n */                                                                                                                   // 1462\n                                                                                                                      // 1463\nMocha.prototype.bail = function(bail){                                                                                // 1464\n  if (0 == arguments.length) bail = true;                                                                             // 1465\n  this.suite.bail(bail);                                                                                              // 1466\n  return this;                                                                                                        // 1467\n};                                                                                                                    // 1468\n                                                                                                                      // 1469\n/**                                                                                                                   // 1470\n * Add test `file`.                                                                                                   // 1471\n *                                                                                                                    // 1472\n * @param {String} file                                                                                               // 1473\n * @api public                                                                                                        // 1474\n */                                                                                                                   // 1475\n                                                                                                                      // 1476\nMocha.prototype.addFile = function(file){                                                                             // 1477\n  this.files.push(file);                                                                                              // 1478\n  return this;                                                                                                        // 1479\n};                                                                                                                    // 1480\n                                                                                                                      // 1481\n/**                                                                                                                   // 1482\n * Set reporter to `reporter`, defaults to \"dot\".                                                                     // 1483\n *                                                                                                                    // 1484\n * @param {String|Function} reporter name or constructor                                                              // 1485\n * @api public                                                                                                        // 1486\n */                                                                                                                   // 1487\n                                                                                                                      // 1488\nMocha.prototype.reporter = function(reporter){                                                                        // 1489\n  if ('function' == typeof reporter) {                                                                                // 1490\n    this._reporter = reporter;                                                                                        // 1491\n  } else {                                                                                                            // 1492\n    reporter = reporter || 'dot';                                                                                     // 1493\n    var _reporter;                                                                                                    // 1494\n    try { _reporter = require('./reporters/' + reporter); } catch (err) {};                                           // 1495\n    if (!_reporter) try { _reporter = require(reporter); } catch (err) {};                                            // 1496\n    if (!_reporter && reporter === 'teamcity')                                                                        // 1497\n      console.warn('The Teamcity reporter was moved to a package named ' +                                            // 1498\n        'mocha-teamcity-reporter ' +                                                                                  // 1499\n        '(https://npmjs.org/package/mocha-teamcity-reporter).');                                                      // 1500\n    if (!_reporter) throw new Error('invalid reporter \"' + reporter + '\"');                                           // 1501\n    this._reporter = _reporter;                                                                                       // 1502\n  }                                                                                                                   // 1503\n  return this;                                                                                                        // 1504\n};                                                                                                                    // 1505\n                                                                                                                      // 1506\n/**                                                                                                                   // 1507\n * Set test UI `name`, defaults to \"bdd\".                                                                             // 1508\n *                                                                                                                    // 1509\n * @param {String} bdd                                                                                                // 1510\n * @api public                                                                                                        // 1511\n */                                                                                                                   // 1512\n                                                                                                                      // 1513\nMocha.prototype.ui = function(name){                                                                                  // 1514\n  name = name || 'bdd';                                                                                               // 1515\n  this._ui = exports.interfaces[name];                                                                                // 1516\n  if (!this._ui) try { this._ui = require(name); } catch (err) {};                                                    // 1517\n  if (!this._ui) throw new Error('invalid interface \"' + name + '\"');                                                 // 1518\n  this._ui = this._ui(this.suite);                                                                                    // 1519\n  return this;                                                                                                        // 1520\n};                                                                                                                    // 1521\n                                                                                                                      // 1522\n/**                                                                                                                   // 1523\n * Load registered files.                                                                                             // 1524\n *                                                                                                                    // 1525\n * @api private                                                                                                       // 1526\n */                                                                                                                   // 1527\n                                                                                                                      // 1528\nMocha.prototype.loadFiles = function(fn){                                                                             // 1529\n  var self = this;                                                                                                    // 1530\n  var suite = this.suite;                                                                                             // 1531\n  var pending = this.files.length;                                                                                    // 1532\n  this.files.forEach(function(file){                                                                                  // 1533\n    file = path.resolve(file);                                                                                        // 1534\n    suite.emit('pre-require', global, file, self);                                                                    // 1535\n    suite.emit('require', require(file), file, self);                                                                 // 1536\n    suite.emit('post-require', global, file, self);                                                                   // 1537\n    --pending || (fn && fn());                                                                                        // 1538\n  });                                                                                                                 // 1539\n};                                                                                                                    // 1540\n                                                                                                                      // 1541\n/**                                                                                                                   // 1542\n * Enable growl support.                                                                                              // 1543\n *                                                                                                                    // 1544\n * @api private                                                                                                       // 1545\n */                                                                                                                   // 1546\n                                                                                                                      // 1547\nMocha.prototype._growl = function(runner, reporter) {                                                                 // 1548\n  var notify = require('growl');                                                                                      // 1549\n                                                                                                                      // 1550\n  runner.on('end', function(){                                                                                        // 1551\n    var stats = reporter.stats;                                                                                       // 1552\n    if (stats.failures) {                                                                                             // 1553\n      var msg = stats.failures + ' of ' + runner.total + ' tests failed';                                             // 1554\n      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });                                         // 1555\n    } else {                                                                                                          // 1556\n      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {                                            // 1557\n          name: 'mocha'                                                                                               // 1558\n        , title: 'Passed'                                                                                             // 1559\n        , image: image('ok')                                                                                          // 1560\n      });                                                                                                             // 1561\n    }                                                                                                                 // 1562\n  });                                                                                                                 // 1563\n};                                                                                                                    // 1564\n                                                                                                                      // 1565\n/**                                                                                                                   // 1566\n * Add regexp to grep, if `re` is a string it is escaped.                                                             // 1567\n *                                                                                                                    // 1568\n * @param {RegExp|String} re                                                                                          // 1569\n * @return {Mocha}                                                                                                    // 1570\n * @api public                                                                                                        // 1571\n */                                                                                                                   // 1572\n                                                                                                                      // 1573\nMocha.prototype.grep = function(re){                                                                                  // 1574\n  this.options.grep = 'string' == typeof re                                                                           // 1575\n    ? new RegExp(utils.escapeRegexp(re))                                                                              // 1576\n    : re;                                                                                                             // 1577\n  return this;                                                                                                        // 1578\n};                                                                                                                    // 1579\n                                                                                                                      // 1580\n/**                                                                                                                   // 1581\n * Invert `.grep()` matches.                                                                                          // 1582\n *                                                                                                                    // 1583\n * @return {Mocha}                                                                                                    // 1584\n * @api public                                                                                                        // 1585\n */                                                                                                                   // 1586\n                                                                                                                      // 1587\nMocha.prototype.invert = function(){                                                                                  // 1588\n  this.options.invert = true;                                                                                         // 1589\n  return this;                                                                                                        // 1590\n};                                                                                                                    // 1591\n                                                                                                                      // 1592\n/**                                                                                                                   // 1593\n * Ignore global leaks.                                                                                               // 1594\n *                                                                                                                    // 1595\n * @param {Boolean} ignore                                                                                            // 1596\n * @return {Mocha}                                                                                                    // 1597\n * @api public                                                                                                        // 1598\n */                                                                                                                   // 1599\n                                                                                                                      // 1600\nMocha.prototype.ignoreLeaks = function(ignore){                                                                       // 1601\n  this.options.ignoreLeaks = !!ignore;                                                                                // 1602\n  return this;                                                                                                        // 1603\n};                                                                                                                    // 1604\n                                                                                                                      // 1605\n/**                                                                                                                   // 1606\n * Enable global leak checking.                                                                                       // 1607\n *                                                                                                                    // 1608\n * @return {Mocha}                                                                                                    // 1609\n * @api public                                                                                                        // 1610\n */                                                                                                                   // 1611\n                                                                                                                      // 1612\nMocha.prototype.checkLeaks = function(){                                                                              // 1613\n  this.options.ignoreLeaks = false;                                                                                   // 1614\n  return this;                                                                                                        // 1615\n};                                                                                                                    // 1616\n                                                                                                                      // 1617\n/**                                                                                                                   // 1618\n * Enable growl support.                                                                                              // 1619\n *                                                                                                                    // 1620\n * @return {Mocha}                                                                                                    // 1621\n * @api public                                                                                                        // 1622\n */                                                                                                                   // 1623\n                                                                                                                      // 1624\nMocha.prototype.growl = function(){                                                                                   // 1625\n  this.options.growl = true;                                                                                          // 1626\n  return this;                                                                                                        // 1627\n};                                                                                                                    // 1628\n                                                                                                                      // 1629\n/**                                                                                                                   // 1630\n * Ignore `globals` array or string.                                                                                  // 1631\n *                                                                                                                    // 1632\n * @param {Array|String} globals                                                                                      // 1633\n * @return {Mocha}                                                                                                    // 1634\n * @api public                                                                                                        // 1635\n */                                                                                                                   // 1636\n                                                                                                                      // 1637\nMocha.prototype.globals = function(globals){                                                                          // 1638\n  this.options.globals = (this.options.globals || []).concat(globals);                                                // 1639\n  return this;                                                                                                        // 1640\n};                                                                                                                    // 1641\n                                                                                                                      // 1642\n/**                                                                                                                   // 1643\n * Emit color output.                                                                                                 // 1644\n *                                                                                                                    // 1645\n * @param {Boolean} colors                                                                                            // 1646\n * @return {Mocha}                                                                                                    // 1647\n * @api public                                                                                                        // 1648\n */                                                                                                                   // 1649\n                                                                                                                      // 1650\nMocha.prototype.useColors = function(colors){                                                                         // 1651\n  this.options.useColors = arguments.length && colors != undefined                                                    // 1652\n    ? colors                                                                                                          // 1653\n    : true;                                                                                                           // 1654\n  return this;                                                                                                        // 1655\n};                                                                                                                    // 1656\n                                                                                                                      // 1657\n/**                                                                                                                   // 1658\n * Use inline diffs rather than +/-.                                                                                  // 1659\n *                                                                                                                    // 1660\n * @param {Boolean} inlineDiffs                                                                                       // 1661\n * @return {Mocha}                                                                                                    // 1662\n * @api public                                                                                                        // 1663\n */                                                                                                                   // 1664\n                                                                                                                      // 1665\nMocha.prototype.useInlineDiffs = function(inlineDiffs) {                                                              // 1666\n  this.options.useInlineDiffs = arguments.length && inlineDiffs != undefined                                          // 1667\n  ? inlineDiffs                                                                                                       // 1668\n  : false;                                                                                                            // 1669\n  return this;                                                                                                        // 1670\n};                                                                                                                    // 1671\n                                                                                                                      // 1672\n/**                                                                                                                   // 1673\n * Set the timeout in milliseconds.                                                                                   // 1674\n *                                                                                                                    // 1675\n * @param {Number} timeout                                                                                            // 1676\n * @return {Mocha}                                                                                                    // 1677\n * @api public                                                                                                        // 1678\n */                                                                                                                   // 1679\n                                                                                                                      // 1680\nMocha.prototype.timeout = function(timeout){                                                                          // 1681\n  this.suite.timeout(timeout);                                                                                        // 1682\n  return this;                                                                                                        // 1683\n};                                                                                                                    // 1684\n                                                                                                                      // 1685\n/**                                                                                                                   // 1686\n * Set slowness threshold in milliseconds.                                                                            // 1687\n *                                                                                                                    // 1688\n * @param {Number} slow                                                                                               // 1689\n * @return {Mocha}                                                                                                    // 1690\n * @api public                                                                                                        // 1691\n */                                                                                                                   // 1692\n                                                                                                                      // 1693\nMocha.prototype.slow = function(slow){                                                                                // 1694\n  this.suite.slow(slow);                                                                                              // 1695\n  return this;                                                                                                        // 1696\n};                                                                                                                    // 1697\n                                                                                                                      // 1698\n/**                                                                                                                   // 1699\n * Makes all tests async (accepting a callback)                                                                       // 1700\n *                                                                                                                    // 1701\n * @return {Mocha}                                                                                                    // 1702\n * @api public                                                                                                        // 1703\n */                                                                                                                   // 1704\n                                                                                                                      // 1705\nMocha.prototype.asyncOnly = function(){                                                                               // 1706\n  this.options.asyncOnly = true;                                                                                      // 1707\n  return this;                                                                                                        // 1708\n};                                                                                                                    // 1709\n                                                                                                                      // 1710\n/**                                                                                                                   // 1711\n * Run tests and invoke `fn()` when complete.                                                                         // 1712\n *                                                                                                                    // 1713\n * @param {Function} fn                                                                                               // 1714\n * @return {Runner}                                                                                                   // 1715\n * @api public                                                                                                        // 1716\n */                                                                                                                   // 1717\n                                                                                                                      // 1718\nMocha.prototype.run = function(fn){                                                                                   // 1719\n  if (this.files.length) this.loadFiles();                                                                            // 1720\n  var suite = this.suite;                                                                                             // 1721\n  var options = this.options;                                                                                         // 1722\n  var runner = new exports.Runner(suite);                                                                             // 1723\n  var reporter = new this._reporter(runner);                                                                          // 1724\n  runner.ignoreLeaks = false !== options.ignoreLeaks;                                                                 // 1725\n  runner.asyncOnly = options.asyncOnly;                                                                               // 1726\n  if (options.grep) runner.grep(options.grep, options.invert);                                                        // 1727\n  if (options.globals) runner.globals(options.globals);                                                               // 1728\n  if (options.growl) this._growl(runner, reporter);                                                                   // 1729\n  exports.reporters.Base.useColors = options.useColors;                                                               // 1730\n  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;                                                        // 1731\n  return runner.run(fn);                                                                                              // 1732\n};                                                                                                                    // 1733\n                                                                                                                      // 1734\n}); // module: mocha.js                                                                                               // 1735\n                                                                                                                      // 1736\nrequire.register(\"ms.js\", function(module, exports, require){                                                         // 1737\n/**                                                                                                                   // 1738\n * Helpers.                                                                                                           // 1739\n */                                                                                                                   // 1740\n                                                                                                                      // 1741\nvar s = 1000;                                                                                                         // 1742\nvar m = s * 60;                                                                                                       // 1743\nvar h = m * 60;                                                                                                       // 1744\nvar d = h * 24;                                                                                                       // 1745\nvar y = d * 365.25;                                                                                                   // 1746\n                                                                                                                      // 1747\n/**                                                                                                                   // 1748\n * Parse or format the given `val`.                                                                                   // 1749\n *                                                                                                                    // 1750\n * Options:                                                                                                           // 1751\n *                                                                                                                    // 1752\n *  - `long` verbose formatting [false]                                                                               // 1753\n *                                                                                                                    // 1754\n * @param {String|Number} val                                                                                         // 1755\n * @param {Object} options                                                                                            // 1756\n * @return {String|Number}                                                                                            // 1757\n * @api public                                                                                                        // 1758\n */                                                                                                                   // 1759\n                                                                                                                      // 1760\nmodule.exports = function(val, options){                                                                              // 1761\n  options = options || {};                                                                                            // 1762\n  if ('string' == typeof val) return parse(val);                                                                      // 1763\n  return options.long ? longFormat(val) : shortFormat(val);                                                           // 1764\n};                                                                                                                    // 1765\n                                                                                                                      // 1766\n/**                                                                                                                   // 1767\n * Parse the given `str` and return milliseconds.                                                                     // 1768\n *                                                                                                                    // 1769\n * @param {String} str                                                                                                // 1770\n * @return {Number}                                                                                                   // 1771\n * @api private                                                                                                       // 1772\n */                                                                                                                   // 1773\n                                                                                                                      // 1774\nfunction parse(str) {                                                                                                 // 1775\n  var match = /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);                 // 1776\n  if (!match) return;                                                                                                 // 1777\n  var n = parseFloat(match[1]);                                                                                       // 1778\n  var type = (match[2] || 'ms').toLowerCase();                                                                        // 1779\n  switch (type) {                                                                                                     // 1780\n    case 'years':                                                                                                     // 1781\n    case 'year':                                                                                                      // 1782\n    case 'y':                                                                                                         // 1783\n      return n * y;                                                                                                   // 1784\n    case 'days':                                                                                                      // 1785\n    case 'day':                                                                                                       // 1786\n    case 'd':                                                                                                         // 1787\n      return n * d;                                                                                                   // 1788\n    case 'hours':                                                                                                     // 1789\n    case 'hour':                                                                                                      // 1790\n    case 'h':                                                                                                         // 1791\n      return n * h;                                                                                                   // 1792\n    case 'minutes':                                                                                                   // 1793\n    case 'minute':                                                                                                    // 1794\n    case 'm':                                                                                                         // 1795\n      return n * m;                                                                                                   // 1796\n    case 'seconds':                                                                                                   // 1797\n    case 'second':                                                                                                    // 1798\n    case 's':                                                                                                         // 1799\n      return n * s;                                                                                                   // 1800\n    case 'ms':                                                                                                        // 1801\n      return n;                                                                                                       // 1802\n  }                                                                                                                   // 1803\n}                                                                                                                     // 1804\n                                                                                                                      // 1805\n/**                                                                                                                   // 1806\n * Short format for `ms`.                                                                                             // 1807\n *                                                                                                                    // 1808\n * @param {Number} ms                                                                                                 // 1809\n * @return {String}                                                                                                   // 1810\n * @api private                                                                                                       // 1811\n */                                                                                                                   // 1812\n                                                                                                                      // 1813\nfunction shortFormat(ms) {                                                                                            // 1814\n  if (ms >= d) return Math.round(ms / d) + 'd';                                                                       // 1815\n  if (ms >= h) return Math.round(ms / h) + 'h';                                                                       // 1816\n  if (ms >= m) return Math.round(ms / m) + 'm';                                                                       // 1817\n  if (ms >= s) return Math.round(ms / s) + 's';                                                                       // 1818\n  return ms + 'ms';                                                                                                   // 1819\n}                                                                                                                     // 1820\n                                                                                                                      // 1821\n/**                                                                                                                   // 1822\n * Long format for `ms`.                                                                                              // 1823\n *                                                                                                                    // 1824\n * @param {Number} ms                                                                                                 // 1825\n * @return {String}                                                                                                   // 1826\n * @api private                                                                                                       // 1827\n */                                                                                                                   // 1828\n                                                                                                                      // 1829\nfunction longFormat(ms) {                                                                                             // 1830\n  return plural(ms, d, 'day')                                                                                         // 1831\n    || plural(ms, h, 'hour')                                                                                          // 1832\n    || plural(ms, m, 'minute')                                                                                        // 1833\n    || plural(ms, s, 'second')                                                                                        // 1834\n    || ms + ' ms';                                                                                                    // 1835\n}                                                                                                                     // 1836\n                                                                                                                      // 1837\n/**                                                                                                                   // 1838\n * Pluralization helper.                                                                                              // 1839\n */                                                                                                                   // 1840\n                                                                                                                      // 1841\nfunction plural(ms, n, name) {                                                                                        // 1842\n  if (ms < n) return;                                                                                                 // 1843\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;                                                           // 1844\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                        // 1845\n}                                                                                                                     // 1846\n                                                                                                                      // 1847\n}); // module: ms.js                                                                                                  // 1848\n                                                                                                                      // 1849\nrequire.register(\"reporters/base.js\", function(module, exports, require){                                             // 1850\n                                                                                                                      // 1851\n/**                                                                                                                   // 1852\n * Module dependencies.                                                                                               // 1853\n */                                                                                                                   // 1854\n                                                                                                                      // 1855\nvar tty = require('browser/tty')                                                                                      // 1856\n  , diff = require('browser/diff')                                                                                    // 1857\n  , ms = require('../ms')                                                                                             // 1858\n  , utils = require('../utils');                                                                                      // 1859\n                                                                                                                      // 1860\n/**                                                                                                                   // 1861\n * Save timer references to avoid Sinon interfering (see GH-237).                                                     // 1862\n */                                                                                                                   // 1863\n                                                                                                                      // 1864\nvar Date = global.Date                                                                                                // 1865\n  , setTimeout = global.setTimeout                                                                                    // 1866\n  , setInterval = global.setInterval                                                                                  // 1867\n  , clearTimeout = global.clearTimeout                                                                                // 1868\n  , clearInterval = global.clearInterval;                                                                             // 1869\n                                                                                                                      // 1870\n/**                                                                                                                   // 1871\n * Check if both stdio streams are associated with a tty.                                                             // 1872\n */                                                                                                                   // 1873\n                                                                                                                      // 1874\nvar isatty = tty.isatty(1) && tty.isatty(2);                                                                          // 1875\n                                                                                                                      // 1876\n/**                                                                                                                   // 1877\n * Expose `Base`.                                                                                                     // 1878\n */                                                                                                                   // 1879\n                                                                                                                      // 1880\nexports = module.exports = Base;                                                                                      // 1881\n                                                                                                                      // 1882\n/**                                                                                                                   // 1883\n * Enable coloring by default.                                                                                        // 1884\n */                                                                                                                   // 1885\n                                                                                                                      // 1886\nexports.useColors = isatty || (process.env.MOCHA_COLORS !== undefined);                                               // 1887\n                                                                                                                      // 1888\n/**                                                                                                                   // 1889\n * Inline diffs instead of +/-                                                                                        // 1890\n */                                                                                                                   // 1891\n                                                                                                                      // 1892\nexports.inlineDiffs = false;                                                                                          // 1893\n                                                                                                                      // 1894\n/**                                                                                                                   // 1895\n * Default color map.                                                                                                 // 1896\n */                                                                                                                   // 1897\n                                                                                                                      // 1898\nexports.colors = {                                                                                                    // 1899\n    'pass': 90                                                                                                        // 1900\n  , 'fail': 31                                                                                                        // 1901\n  , 'bright pass': 92                                                                                                 // 1902\n  , 'bright fail': 91                                                                                                 // 1903\n  , 'bright yellow': 93                                                                                               // 1904\n  , 'pending': 36                                                                                                     // 1905\n  , 'suite': 0                                                                                                        // 1906\n  , 'error title': 0                                                                                                  // 1907\n  , 'error message': 31                                                                                               // 1908\n  , 'error stack': 90                                                                                                 // 1909\n  , 'checkmark': 32                                                                                                   // 1910\n  , 'fast': 90                                                                                                        // 1911\n  , 'medium': 33                                                                                                      // 1912\n  , 'slow': 31                                                                                                        // 1913\n  , 'green': 32                                                                                                       // 1914\n  , 'light': 90                                                                                                       // 1915\n  , 'diff gutter': 90                                                                                                 // 1916\n  , 'diff added': 42                                                                                                  // 1917\n  , 'diff removed': 41                                                                                                // 1918\n};                                                                                                                    // 1919\n                                                                                                                      // 1920\n/**                                                                                                                   // 1921\n * Default symbol map.                                                                                                // 1922\n */                                                                                                                   // 1923\n                                                                                                                      // 1924\nexports.symbols = {                                                                                                   // 1925\n  ok: '✓',                                                                                                            // 1926\n  err: '✖',                                                                                                           // 1927\n  dot: '․'                                                                                                            // 1928\n};                                                                                                                    // 1929\n                                                                                                                      // 1930\n// With node.js on Windows: use symbols available in terminal default fonts                                           // 1931\nif ('win32' == process.platform) {                                                                                    // 1932\n  exports.symbols.ok = '\\u221A';                                                                                      // 1933\n  exports.symbols.err = '\\u00D7';                                                                                     // 1934\n  exports.symbols.dot = '.';                                                                                          // 1935\n}                                                                                                                     // 1936\n                                                                                                                      // 1937\n/**                                                                                                                   // 1938\n * Color `str` with the given `type`,                                                                                 // 1939\n * allowing colors to be disabled,                                                                                    // 1940\n * as well as user-defined color                                                                                      // 1941\n * schemes.                                                                                                           // 1942\n *                                                                                                                    // 1943\n * @param {String} type                                                                                               // 1944\n * @param {String} str                                                                                                // 1945\n * @return {String}                                                                                                   // 1946\n * @api private                                                                                                       // 1947\n */                                                                                                                   // 1948\n                                                                                                                      // 1949\nvar color = exports.color = function(type, str) {                                                                     // 1950\n  if (!exports.useColors) return str;                                                                                 // 1951\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';                                                  // 1952\n};                                                                                                                    // 1953\n                                                                                                                      // 1954\n/**                                                                                                                   // 1955\n * Expose term window size, with some                                                                                 // 1956\n * defaults for when stderr is not a tty.                                                                             // 1957\n */                                                                                                                   // 1958\n                                                                                                                      // 1959\nexports.window = {                                                                                                    // 1960\n  width: isatty                                                                                                       // 1961\n    ? process.stdout.getWindowSize                                                                                    // 1962\n      ? process.stdout.getWindowSize(1)[0]                                                                            // 1963\n      : tty.getWindowSize()[1]                                                                                        // 1964\n    : 75                                                                                                              // 1965\n};                                                                                                                    // 1966\n                                                                                                                      // 1967\n/**                                                                                                                   // 1968\n * Expose some basic cursor interactions                                                                              // 1969\n * that are common among reporters.                                                                                   // 1970\n */                                                                                                                   // 1971\n                                                                                                                      // 1972\nexports.cursor = {                                                                                                    // 1973\n  hide: function(){                                                                                                   // 1974\n    isatty && process.stdout.write('\\u001b[?25l');                                                                    // 1975\n  },                                                                                                                  // 1976\n                                                                                                                      // 1977\n  show: function(){                                                                                                   // 1978\n    isatty && process.stdout.write('\\u001b[?25h');                                                                    // 1979\n  },                                                                                                                  // 1980\n                                                                                                                      // 1981\n  deleteLine: function(){                                                                                             // 1982\n    isatty && process.stdout.write('\\u001b[2K');                                                                      // 1983\n  },                                                                                                                  // 1984\n                                                                                                                      // 1985\n  beginningOfLine: function(){                                                                                        // 1986\n    isatty && process.stdout.write('\\u001b[0G');                                                                      // 1987\n  },                                                                                                                  // 1988\n                                                                                                                      // 1989\n  CR: function(){                                                                                                     // 1990\n    if (isatty) {                                                                                                     // 1991\n      exports.cursor.deleteLine();                                                                                    // 1992\n      exports.cursor.beginningOfLine();                                                                               // 1993\n    } else {                                                                                                          // 1994\n      process.stdout.write('\\r');                                                                                     // 1995\n    }                                                                                                                 // 1996\n  }                                                                                                                   // 1997\n};                                                                                                                    // 1998\n                                                                                                                      // 1999\n/**                                                                                                                   // 2000\n * Outut the given `failures` as a list.                                                                              // 2001\n *                                                                                                                    // 2002\n * @param {Array} failures                                                                                            // 2003\n * @api public                                                                                                        // 2004\n */                                                                                                                   // 2005\n                                                                                                                      // 2006\nexports.list = function(failures){                                                                                    // 2007\n  console.error();                                                                                                    // 2008\n  failures.forEach(function(test, i){                                                                                 // 2009\n    // format                                                                                                         // 2010\n    var fmt = color('error title', '  %s) %s:\\n')                                                                     // 2011\n      + color('error message', '     %s')                                                                             // 2012\n      + color('error stack', '\\n%s\\n');                                                                               // 2013\n                                                                                                                      // 2014\n    // msg                                                                                                            // 2015\n    var err = test.err                                                                                                // 2016\n      , message = err.message || ''                                                                                   // 2017\n      , stack = err.stack || message                                                                                  // 2018\n      , index = stack.indexOf(message) + message.length                                                               // 2019\n      , msg = stack.slice(0, index)                                                                                   // 2020\n      , actual = err.actual                                                                                           // 2021\n      , expected = err.expected                                                                                       // 2022\n      , escape = true;                                                                                                // 2023\n                                                                                                                      // 2024\n    // uncaught                                                                                                       // 2025\n    if (err.uncaught) {                                                                                               // 2026\n      msg = 'Uncaught ' + msg;                                                                                        // 2027\n    }                                                                                                                 // 2028\n                                                                                                                      // 2029\n    // explicitly show diff                                                                                           // 2030\n    if (err.showDiff && sameType(actual, expected)) {                                                                 // 2031\n      escape = false;                                                                                                 // 2032\n      err.actual = actual = stringify(canonicalize(actual));                                                          // 2033\n      err.expected = expected = stringify(canonicalize(expected));                                                    // 2034\n    }                                                                                                                 // 2035\n                                                                                                                      // 2036\n    // actual / expected diff                                                                                         // 2037\n    if ('string' == typeof actual && 'string' == typeof expected) {                                                   // 2038\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');                                   // 2039\n      var match = message.match(/^([^:]+): expected/);                                                                // 2040\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);                                              // 2041\n                                                                                                                      // 2042\n      if (exports.inlineDiffs) {                                                                                      // 2043\n        msg += inlineDiff(err, escape);                                                                               // 2044\n      } else {                                                                                                        // 2045\n        msg += unifiedDiff(err, escape);                                                                              // 2046\n      }                                                                                                               // 2047\n    }                                                                                                                 // 2048\n                                                                                                                      // 2049\n    // indent stack trace without msg                                                                                 // 2050\n    stack = stack.slice(index ? index + 1 : index)                                                                    // 2051\n      .replace(/^/gm, '  ');                                                                                          // 2052\n                                                                                                                      // 2053\n    console.error(fmt, (i + 1), test.fullTitle(), msg, stack);                                                        // 2054\n  });                                                                                                                 // 2055\n};                                                                                                                    // 2056\n                                                                                                                      // 2057\n/**                                                                                                                   // 2058\n * Initialize a new `Base` reporter.                                                                                  // 2059\n *                                                                                                                    // 2060\n * All other reporters generally                                                                                      // 2061\n * inherit from this reporter, providing                                                                              // 2062\n * stats such as test duration, number                                                                                // 2063\n * of tests passed / failed etc.                                                                                      // 2064\n *                                                                                                                    // 2065\n * @param {Runner} runner                                                                                             // 2066\n * @api public                                                                                                        // 2067\n */                                                                                                                   // 2068\n                                                                                                                      // 2069\nfunction Base(runner) {                                                                                               // 2070\n  var self = this                                                                                                     // 2071\n    , stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 }                                // 2072\n    , failures = this.failures = [];                                                                                  // 2073\n                                                                                                                      // 2074\n  if (!runner) return;                                                                                                // 2075\n  this.runner = runner;                                                                                               // 2076\n                                                                                                                      // 2077\n  runner.stats = stats;                                                                                               // 2078\n                                                                                                                      // 2079\n  runner.on('start', function(){                                                                                      // 2080\n    stats.start = new Date;                                                                                           // 2081\n  });                                                                                                                 // 2082\n                                                                                                                      // 2083\n  runner.on('suite', function(suite){                                                                                 // 2084\n    stats.suites = stats.suites || 0;                                                                                 // 2085\n    suite.root || stats.suites++;                                                                                     // 2086\n  });                                                                                                                 // 2087\n                                                                                                                      // 2088\n  runner.on('test end', function(test){                                                                               // 2089\n    stats.tests = stats.tests || 0;                                                                                   // 2090\n    stats.tests++;                                                                                                    // 2091\n  });                                                                                                                 // 2092\n                                                                                                                      // 2093\n  runner.on('pass', function(test){                                                                                   // 2094\n    stats.passes = stats.passes || 0;                                                                                 // 2095\n                                                                                                                      // 2096\n    var medium = test.slow() / 2;                                                                                     // 2097\n    test.speed = test.duration > test.slow()                                                                          // 2098\n      ? 'slow'                                                                                                        // 2099\n      : test.duration > medium                                                                                        // 2100\n        ? 'medium'                                                                                                    // 2101\n        : 'fast';                                                                                                     // 2102\n                                                                                                                      // 2103\n    stats.passes++;                                                                                                   // 2104\n  });                                                                                                                 // 2105\n                                                                                                                      // 2106\n  runner.on('fail', function(test, err){                                                                              // 2107\n    stats.failures = stats.failures || 0;                                                                             // 2108\n    stats.failures++;                                                                                                 // 2109\n    test.err = err;                                                                                                   // 2110\n    failures.push(test);                                                                                              // 2111\n  });                                                                                                                 // 2112\n                                                                                                                      // 2113\n  runner.on('end', function(){                                                                                        // 2114\n    stats.end = new Date;                                                                                             // 2115\n    stats.duration = new Date - stats.start;                                                                          // 2116\n  });                                                                                                                 // 2117\n                                                                                                                      // 2118\n  runner.on('pending', function(){                                                                                    // 2119\n    stats.pending++;                                                                                                  // 2120\n  });                                                                                                                 // 2121\n}                                                                                                                     // 2122\n                                                                                                                      // 2123\n/**                                                                                                                   // 2124\n * Output common epilogue used by many of                                                                             // 2125\n * the bundled reporters.                                                                                             // 2126\n *                                                                                                                    // 2127\n * @api public                                                                                                        // 2128\n */                                                                                                                   // 2129\n                                                                                                                      // 2130\nBase.prototype.epilogue = function(){                                                                                 // 2131\n  var stats = this.stats;                                                                                             // 2132\n  var tests;                                                                                                          // 2133\n  var fmt;                                                                                                            // 2134\n                                                                                                                      // 2135\n  console.log();                                                                                                      // 2136\n                                                                                                                      // 2137\n  // passes                                                                                                           // 2138\n  fmt = color('bright pass', ' ')                                                                                     // 2139\n    + color('green', ' %d passing')                                                                                   // 2140\n    + color('light', ' (%s)');                                                                                        // 2141\n                                                                                                                      // 2142\n  console.log(fmt,                                                                                                    // 2143\n    stats.passes || 0,                                                                                                // 2144\n    ms(stats.duration));                                                                                              // 2145\n                                                                                                                      // 2146\n  // pending                                                                                                          // 2147\n  if (stats.pending) {                                                                                                // 2148\n    fmt = color('pending', ' ')                                                                                       // 2149\n      + color('pending', ' %d pending');                                                                              // 2150\n                                                                                                                      // 2151\n    console.log(fmt, stats.pending);                                                                                  // 2152\n  }                                                                                                                   // 2153\n                                                                                                                      // 2154\n  // failures                                                                                                         // 2155\n  if (stats.failures) {                                                                                               // 2156\n    fmt = color('fail', '  %d failing');                                                                              // 2157\n                                                                                                                      // 2158\n    console.error(fmt,                                                                                                // 2159\n      stats.failures);                                                                                                // 2160\n                                                                                                                      // 2161\n    Base.list(this.failures);                                                                                         // 2162\n    console.error();                                                                                                  // 2163\n  }                                                                                                                   // 2164\n                                                                                                                      // 2165\n  console.log();                                                                                                      // 2166\n};                                                                                                                    // 2167\n                                                                                                                      // 2168\n/**                                                                                                                   // 2169\n * Pad the given `str` to `len`.                                                                                      // 2170\n *                                                                                                                    // 2171\n * @param {String} str                                                                                                // 2172\n * @param {String} len                                                                                                // 2173\n * @return {String}                                                                                                   // 2174\n * @api private                                                                                                       // 2175\n */                                                                                                                   // 2176\n                                                                                                                      // 2177\nfunction pad(str, len) {                                                                                              // 2178\n  str = String(str);                                                                                                  // 2179\n  return Array(len - str.length + 1).join(' ') + str;                                                                 // 2180\n}                                                                                                                     // 2181\n                                                                                                                      // 2182\n                                                                                                                      // 2183\n/**                                                                                                                   // 2184\n * Returns an inline diff between 2 strings with coloured ANSI output                                                 // 2185\n *                                                                                                                    // 2186\n * @param {Error} Error with actual/expected                                                                          // 2187\n * @return {String} Diff                                                                                              // 2188\n * @api private                                                                                                       // 2189\n */                                                                                                                   // 2190\n                                                                                                                      // 2191\nfunction inlineDiff(err, escape) {                                                                                    // 2192\n  var msg = errorDiff(err, 'WordsWithSpace', escape);                                                                 // 2193\n                                                                                                                      // 2194\n  // linenos                                                                                                          // 2195\n  var lines = msg.split('\\n');                                                                                        // 2196\n  if (lines.length > 4) {                                                                                             // 2197\n    var width = String(lines.length).length;                                                                          // 2198\n    msg = lines.map(function(str, i){                                                                                 // 2199\n      return pad(++i, width) + ' |' + ' ' + str;                                                                      // 2200\n    }).join('\\n');                                                                                                    // 2201\n  }                                                                                                                   // 2202\n                                                                                                                      // 2203\n  // legend                                                                                                           // 2204\n  msg = '\\n'                                                                                                          // 2205\n    + color('diff removed', 'actual')                                                                                 // 2206\n    + ' '                                                                                                             // 2207\n    + color('diff added', 'expected')                                                                                 // 2208\n    + '\\n\\n'                                                                                                          // 2209\n    + msg                                                                                                             // 2210\n    + '\\n';                                                                                                           // 2211\n                                                                                                                      // 2212\n  // indent                                                                                                           // 2213\n  msg = msg.replace(/^/gm, '      ');                                                                                 // 2214\n  return msg;                                                                                                         // 2215\n}                                                                                                                     // 2216\n                                                                                                                      // 2217\n/**                                                                                                                   // 2218\n * Returns a unified diff between 2 strings                                                                           // 2219\n *                                                                                                                    // 2220\n * @param {Error} Error with actual/expected                                                                          // 2221\n * @return {String} Diff                                                                                              // 2222\n * @api private                                                                                                       // 2223\n */                                                                                                                   // 2224\n                                                                                                                      // 2225\nfunction unifiedDiff(err, escape) {                                                                                   // 2226\n  var indent = '      ';                                                                                              // 2227\n  function cleanUp(line) {                                                                                            // 2228\n    if (escape) {                                                                                                     // 2229\n      line = escapeInvisibles(line);                                                                                  // 2230\n    }                                                                                                                 // 2231\n    if (line[0] === '+') return indent + colorLines('diff added', line);                                              // 2232\n    if (line[0] === '-') return indent + colorLines('diff removed', line);                                            // 2233\n    if (line.match(/\\@\\@/)) return null;                                                                              // 2234\n    if (line.match(/\\\\ No newline/)) return null;                                                                     // 2235\n    else return indent + line;                                                                                        // 2236\n  }                                                                                                                   // 2237\n  function notBlank(line) {                                                                                           // 2238\n    return line != null;                                                                                              // 2239\n  }                                                                                                                   // 2240\n  msg = diff.createPatch('string', err.actual, err.expected);                                                         // 2241\n  var lines = msg.split('\\n').splice(4);                                                                              // 2242\n  return '\\n      '                                                                                                   // 2243\n         + colorLines('diff added',   '+ expected') + ' '                                                             // 2244\n         + colorLines('diff removed', '- actual')                                                                     // 2245\n         + '\\n\\n'                                                                                                     // 2246\n         + lines.map(cleanUp).filter(notBlank).join('\\n');                                                            // 2247\n}                                                                                                                     // 2248\n                                                                                                                      // 2249\n/**                                                                                                                   // 2250\n * Return a character diff for `err`.                                                                                 // 2251\n *                                                                                                                    // 2252\n * @param {Error} err                                                                                                 // 2253\n * @return {String}                                                                                                   // 2254\n * @api private                                                                                                       // 2255\n */                                                                                                                   // 2256\n                                                                                                                      // 2257\nfunction errorDiff(err, type, escape) {                                                                               // 2258\n  var actual   = escape ? escapeInvisibles(err.actual)   : err.actual;                                                // 2259\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;                                              // 2260\n  return diff['diff' + type](actual, expected).map(function(str){                                                     // 2261\n    if (str.added) return colorLines('diff added', str.value);                                                        // 2262\n    if (str.removed) return colorLines('diff removed', str.value);                                                    // 2263\n    return str.value;                                                                                                 // 2264\n  }).join('');                                                                                                        // 2265\n}                                                                                                                     // 2266\n                                                                                                                      // 2267\n/**                                                                                                                   // 2268\n * Returns a string with all invisible characters in plain text                                                       // 2269\n *                                                                                                                    // 2270\n * @param {String} line                                                                                               // 2271\n * @return {String}                                                                                                   // 2272\n * @api private                                                                                                       // 2273\n */                                                                                                                   // 2274\nfunction escapeInvisibles(line) {                                                                                     // 2275\n    return line.replace(/\\t/g, '<tab>')                                                                               // 2276\n               .replace(/\\r/g, '<CR>')                                                                                // 2277\n               .replace(/\\n/g, '<LF>\\n');                                                                             // 2278\n}                                                                                                                     // 2279\n                                                                                                                      // 2280\n/**                                                                                                                   // 2281\n * Color lines for `str`, using the color `name`.                                                                     // 2282\n *                                                                                                                    // 2283\n * @param {String} name                                                                                               // 2284\n * @param {String} str                                                                                                // 2285\n * @return {String}                                                                                                   // 2286\n * @api private                                                                                                       // 2287\n */                                                                                                                   // 2288\n                                                                                                                      // 2289\nfunction colorLines(name, str) {                                                                                      // 2290\n  return str.split('\\n').map(function(str){                                                                           // 2291\n    return color(name, str);                                                                                          // 2292\n  }).join('\\n');                                                                                                      // 2293\n}                                                                                                                     // 2294\n                                                                                                                      // 2295\n/**                                                                                                                   // 2296\n * Stringify `obj`.                                                                                                   // 2297\n *                                                                                                                    // 2298\n * @param {Object} obj                                                                                                // 2299\n * @return {String}                                                                                                   // 2300\n * @api private                                                                                                       // 2301\n */                                                                                                                   // 2302\n                                                                                                                      // 2303\nfunction stringify(obj) {                                                                                             // 2304\n  if (obj instanceof RegExp) return obj.toString();                                                                   // 2305\n  return JSON.stringify(obj, null, 2);                                                                                // 2306\n}                                                                                                                     // 2307\n                                                                                                                      // 2308\n/**                                                                                                                   // 2309\n * Return a new object that has the keys in sorted order.                                                             // 2310\n * @param {Object} obj                                                                                                // 2311\n * @return {Object}                                                                                                   // 2312\n * @api private                                                                                                       // 2313\n */                                                                                                                   // 2314\n                                                                                                                      // 2315\n function canonicalize(obj, stack) {                                                                                  // 2316\n   stack = stack || [];                                                                                               // 2317\n                                                                                                                      // 2318\n   if (utils.indexOf(stack, obj) !== -1) return obj;                                                                  // 2319\n                                                                                                                      // 2320\n   var canonicalizedObj;                                                                                              // 2321\n                                                                                                                      // 2322\n   if ('[object Array]' == {}.toString.call(obj)) {                                                                   // 2323\n     stack.push(obj);                                                                                                 // 2324\n     canonicalizedObj = utils.map(obj, function(item) {                                                               // 2325\n       return canonicalize(item, stack);                                                                              // 2326\n     });                                                                                                              // 2327\n     stack.pop();                                                                                                     // 2328\n   } else if (typeof obj === 'object' && obj !== null) {                                                              // 2329\n     stack.push(obj);                                                                                                 // 2330\n     canonicalizedObj = {};                                                                                           // 2331\n     utils.forEach(utils.keys(obj).sort(), function(key) {                                                            // 2332\n       canonicalizedObj[key] = canonicalize(obj[key], stack);                                                         // 2333\n     });                                                                                                              // 2334\n     stack.pop();                                                                                                     // 2335\n   } else {                                                                                                           // 2336\n     canonicalizedObj = obj;                                                                                          // 2337\n   }                                                                                                                  // 2338\n                                                                                                                      // 2339\n   return canonicalizedObj;                                                                                           // 2340\n }                                                                                                                    // 2341\n                                                                                                                      // 2342\n/**                                                                                                                   // 2343\n * Check that a / b have the same type.                                                                               // 2344\n *                                                                                                                    // 2345\n * @param {Object} a                                                                                                  // 2346\n * @param {Object} b                                                                                                  // 2347\n * @return {Boolean}                                                                                                  // 2348\n * @api private                                                                                                       // 2349\n */                                                                                                                   // 2350\n                                                                                                                      // 2351\nfunction sameType(a, b) {                                                                                             // 2352\n  a = Object.prototype.toString.call(a);                                                                              // 2353\n  b = Object.prototype.toString.call(b);                                                                              // 2354\n  return a == b;                                                                                                      // 2355\n}                                                                                                                     // 2356\n                                                                                                                      // 2357\n                                                                                                                      // 2358\n}); // module: reporters/base.js                                                                                      // 2359\n                                                                                                                      // 2360\nrequire.register(\"reporters/doc.js\", function(module, exports, require){                                              // 2361\n                                                                                                                      // 2362\n/**                                                                                                                   // 2363\n * Module dependencies.                                                                                               // 2364\n */                                                                                                                   // 2365\n                                                                                                                      // 2366\nvar Base = require('./base')                                                                                          // 2367\n  , utils = require('../utils');                                                                                      // 2368\n                                                                                                                      // 2369\n/**                                                                                                                   // 2370\n * Expose `Doc`.                                                                                                      // 2371\n */                                                                                                                   // 2372\n                                                                                                                      // 2373\nexports = module.exports = Doc;                                                                                       // 2374\n                                                                                                                      // 2375\n/**                                                                                                                   // 2376\n * Initialize a new `Doc` reporter.                                                                                   // 2377\n *                                                                                                                    // 2378\n * @param {Runner} runner                                                                                             // 2379\n * @api public                                                                                                        // 2380\n */                                                                                                                   // 2381\n                                                                                                                      // 2382\nfunction Doc(runner) {                                                                                                // 2383\n  Base.call(this, runner);                                                                                            // 2384\n                                                                                                                      // 2385\n  var self = this                                                                                                     // 2386\n    , stats = this.stats                                                                                              // 2387\n    , total = runner.total                                                                                            // 2388\n    , indents = 2;                                                                                                    // 2389\n                                                                                                                      // 2390\n  function indent() {                                                                                                 // 2391\n    return Array(indents).join('  ');                                                                                 // 2392\n  }                                                                                                                   // 2393\n                                                                                                                      // 2394\n  runner.on('suite', function(suite){                                                                                 // 2395\n    if (suite.root) return;                                                                                           // 2396\n    ++indents;                                                                                                        // 2397\n    console.log('%s<section class=\"suite\">', indent());                                                               // 2398\n    ++indents;                                                                                                        // 2399\n    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));                                                // 2400\n    console.log('%s<dl>', indent());                                                                                  // 2401\n  });                                                                                                                 // 2402\n                                                                                                                      // 2403\n  runner.on('suite end', function(suite){                                                                             // 2404\n    if (suite.root) return;                                                                                           // 2405\n    console.log('%s</dl>', indent());                                                                                 // 2406\n    --indents;                                                                                                        // 2407\n    console.log('%s</section>', indent());                                                                            // 2408\n    --indents;                                                                                                        // 2409\n  });                                                                                                                 // 2410\n                                                                                                                      // 2411\n  runner.on('pass', function(test){                                                                                   // 2412\n    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));                                               // 2413\n    var code = utils.escape(utils.clean(test.fn.toString()));                                                         // 2414\n    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);                                           // 2415\n  });                                                                                                                 // 2416\n}                                                                                                                     // 2417\n                                                                                                                      // 2418\n}); // module: reporters/doc.js                                                                                       // 2419\n                                                                                                                      // 2420\nrequire.register(\"reporters/dot.js\", function(module, exports, require){                                              // 2421\n                                                                                                                      // 2422\n/**                                                                                                                   // 2423\n * Module dependencies.                                                                                               // 2424\n */                                                                                                                   // 2425\n                                                                                                                      // 2426\nvar Base = require('./base')                                                                                          // 2427\n  , color = Base.color;                                                                                               // 2428\n                                                                                                                      // 2429\n/**                                                                                                                   // 2430\n * Expose `Dot`.                                                                                                      // 2431\n */                                                                                                                   // 2432\n                                                                                                                      // 2433\nexports = module.exports = Dot;                                                                                       // 2434\n                                                                                                                      // 2435\n/**                                                                                                                   // 2436\n * Initialize a new `Dot` matrix test reporter.                                                                       // 2437\n *                                                                                                                    // 2438\n * @param {Runner} runner                                                                                             // 2439\n * @api public                                                                                                        // 2440\n */                                                                                                                   // 2441\n                                                                                                                      // 2442\nfunction Dot(runner) {                                                                                                // 2443\n  Base.call(this, runner);                                                                                            // 2444\n                                                                                                                      // 2445\n  var self = this                                                                                                     // 2446\n    , stats = this.stats                                                                                              // 2447\n    , width = Base.window.width * .75 | 0                                                                             // 2448\n    , n = 0;                                                                                                          // 2449\n                                                                                                                      // 2450\n  runner.on('start', function(){                                                                                      // 2451\n    process.stdout.write('\\n  ');                                                                                     // 2452\n  });                                                                                                                 // 2453\n                                                                                                                      // 2454\n  runner.on('pending', function(test){                                                                                // 2455\n    process.stdout.write(color('pending', Base.symbols.dot));                                                         // 2456\n  });                                                                                                                 // 2457\n                                                                                                                      // 2458\n  runner.on('pass', function(test){                                                                                   // 2459\n    if (++n % width == 0) process.stdout.write('\\n  ');                                                               // 2460\n    if ('slow' == test.speed) {                                                                                       // 2461\n      process.stdout.write(color('bright yellow', Base.symbols.dot));                                                 // 2462\n    } else {                                                                                                          // 2463\n      process.stdout.write(color(test.speed, Base.symbols.dot));                                                      // 2464\n    }                                                                                                                 // 2465\n  });                                                                                                                 // 2466\n                                                                                                                      // 2467\n  runner.on('fail', function(test, err){                                                                              // 2468\n    if (++n % width == 0) process.stdout.write('\\n  ');                                                               // 2469\n    process.stdout.write(color('fail', Base.symbols.dot));                                                            // 2470\n  });                                                                                                                 // 2471\n                                                                                                                      // 2472\n  runner.on('end', function(){                                                                                        // 2473\n    console.log();                                                                                                    // 2474\n    self.epilogue();                                                                                                  // 2475\n  });                                                                                                                 // 2476\n}                                                                                                                     // 2477\n                                                                                                                      // 2478\n/**                                                                                                                   // 2479\n * Inherit from `Base.prototype`.                                                                                     // 2480\n */                                                                                                                   // 2481\n                                                                                                                      // 2482\nfunction F(){};                                                                                                       // 2483\nF.prototype = Base.prototype;                                                                                         // 2484\nDot.prototype = new F;                                                                                                // 2485\nDot.prototype.constructor = Dot;                                                                                      // 2486\n                                                                                                                      // 2487\n}); // module: reporters/dot.js                                                                                       // 2488\n                                                                                                                      // 2489\nrequire.register(\"reporters/html-cov.js\", function(module, exports, require){                                         // 2490\n                                                                                                                      // 2491\n/**                                                                                                                   // 2492\n * Module dependencies.                                                                                               // 2493\n */                                                                                                                   // 2494\n                                                                                                                      // 2495\nvar JSONCov = require('./json-cov')                                                                                   // 2496\n  , fs = require('browser/fs');                                                                                       // 2497\n                                                                                                                      // 2498\n/**                                                                                                                   // 2499\n * Expose `HTMLCov`.                                                                                                  // 2500\n */                                                                                                                   // 2501\n                                                                                                                      // 2502\nexports = module.exports = HTMLCov;                                                                                   // 2503\n                                                                                                                      // 2504\n/**                                                                                                                   // 2505\n * Initialize a new `JsCoverage` reporter.                                                                            // 2506\n *                                                                                                                    // 2507\n * @param {Runner} runner                                                                                             // 2508\n * @api public                                                                                                        // 2509\n */                                                                                                                   // 2510\n                                                                                                                      // 2511\nfunction HTMLCov(runner) {                                                                                            // 2512\n  var jade = require('jade')                                                                                          // 2513\n    , file = __dirname + '/templates/coverage.jade'                                                                   // 2514\n    , str = fs.readFileSync(file, 'utf8')                                                                             // 2515\n    , fn = jade.compile(str, { filename: file })                                                                      // 2516\n    , self = this;                                                                                                    // 2517\n                                                                                                                      // 2518\n  JSONCov.call(this, runner, false);                                                                                  // 2519\n                                                                                                                      // 2520\n  runner.on('end', function(){                                                                                        // 2521\n    process.stdout.write(fn({                                                                                         // 2522\n        cov: self.cov                                                                                                 // 2523\n      , coverageClass: coverageClass                                                                                  // 2524\n    }));                                                                                                              // 2525\n  });                                                                                                                 // 2526\n}                                                                                                                     // 2527\n                                                                                                                      // 2528\n/**                                                                                                                   // 2529\n * Return coverage class for `n`.                                                                                     // 2530\n *                                                                                                                    // 2531\n * @return {String}                                                                                                   // 2532\n * @api private                                                                                                       // 2533\n */                                                                                                                   // 2534\n                                                                                                                      // 2535\nfunction coverageClass(n) {                                                                                           // 2536\n  if (n >= 75) return 'high';                                                                                         // 2537\n  if (n >= 50) return 'medium';                                                                                       // 2538\n  if (n >= 25) return 'low';                                                                                          // 2539\n  return 'terrible';                                                                                                  // 2540\n}                                                                                                                     // 2541\n}); // module: reporters/html-cov.js                                                                                  // 2542\n                                                                                                                      // 2543\nrequire.register(\"reporters/html.js\", function(module, exports, require){                                             // 2544\n                                                                                                                      // 2545\n/**                                                                                                                   // 2546\n * Module dependencies.                                                                                               // 2547\n */                                                                                                                   // 2548\n                                                                                                                      // 2549\nvar Base = require('./base')                                                                                          // 2550\n  , utils = require('../utils')                                                                                       // 2551\n  , Progress = require('../browser/progress')                                                                         // 2552\n  , escape = utils.escape;                                                                                            // 2553\n                                                                                                                      // 2554\n/**                                                                                                                   // 2555\n * Save timer references to avoid Sinon interfering (see GH-237).                                                     // 2556\n */                                                                                                                   // 2557\n                                                                                                                      // 2558\nvar Date = global.Date                                                                                                // 2559\n  , setTimeout = global.setTimeout                                                                                    // 2560\n  , setInterval = global.setInterval                                                                                  // 2561\n  , clearTimeout = global.clearTimeout                                                                                // 2562\n  , clearInterval = global.clearInterval;                                                                             // 2563\n                                                                                                                      // 2564\n/**                                                                                                                   // 2565\n * Expose `HTML`.                                                                                                     // 2566\n */                                                                                                                   // 2567\n                                                                                                                      // 2568\nexports = module.exports = HTML;                                                                                      // 2569\n                                                                                                                      // 2570\n/**                                                                                                                   // 2571\n * Stats template.                                                                                                    // 2572\n */                                                                                                                   // 2573\n                                                                                                                      // 2574\nvar statsTemplate = '<ul id=\"mocha-stats\">'                                                                           // 2575\n  + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>'                                              // 2576\n  + '<li class=\"passes\"><a href=\"#\">passes:</a> <em>0</em></li>'                                                      // 2577\n  + '<li class=\"failures\"><a href=\"#\">failures:</a> <em>0</em></li>'                                                  // 2578\n  + '<li class=\"duration\">duration: <em>0</em>s</li>'                                                                 // 2579\n  + '</ul>';                                                                                                          // 2580\n                                                                                                                      // 2581\n/**                                                                                                                   // 2582\n * Initialize a new `HTML` reporter.                                                                                  // 2583\n *                                                                                                                    // 2584\n * @param {Runner} runner                                                                                             // 2585\n * @api public                                                                                                        // 2586\n */                                                                                                                   // 2587\n                                                                                                                      // 2588\nfunction HTML(runner, root) {                                                                                         // 2589\n  Base.call(this, runner);                                                                                            // 2590\n                                                                                                                      // 2591\n  var self = this                                                                                                     // 2592\n    , stats = this.stats                                                                                              // 2593\n    , total = runner.total                                                                                            // 2594\n    , stat = fragment(statsTemplate)                                                                                  // 2595\n    , items = stat.getElementsByTagName('li')                                                                         // 2596\n    , passes = items[1].getElementsByTagName('em')[0]                                                                 // 2597\n    , passesLink = items[1].getElementsByTagName('a')[0]                                                              // 2598\n    , failures = items[2].getElementsByTagName('em')[0]                                                               // 2599\n    , failuresLink = items[2].getElementsByTagName('a')[0]                                                            // 2600\n    , duration = items[3].getElementsByTagName('em')[0]                                                               // 2601\n    , canvas = stat.getElementsByTagName('canvas')[0]                                                                 // 2602\n    , report = fragment('<ul id=\"mocha-report\"></ul>')                                                                // 2603\n    , stack = [report]                                                                                                // 2604\n    , progress                                                                                                        // 2605\n    , ctx                                                                                                             // 2606\n                                                                                                                      // 2607\n  root = root || document.getElementById('mocha');                                                                    // 2608\n                                                                                                                      // 2609\n  if (canvas.getContext) {                                                                                            // 2610\n    var ratio = window.devicePixelRatio || 1;                                                                         // 2611\n    canvas.style.width = canvas.width;                                                                                // 2612\n    canvas.style.height = canvas.height;                                                                              // 2613\n    canvas.width *= ratio;                                                                                            // 2614\n    canvas.height *= ratio;                                                                                           // 2615\n    ctx = canvas.getContext('2d');                                                                                    // 2616\n    ctx.scale(ratio, ratio);                                                                                          // 2617\n    progress = new Progress;                                                                                          // 2618\n  }                                                                                                                   // 2619\n                                                                                                                      // 2620\n  if (!root) return error('#mocha div missing, add it to your document');                                             // 2621\n                                                                                                                      // 2622\n  // pass toggle                                                                                                      // 2623\n  on(passesLink, 'click', function(){                                                                                 // 2624\n    unhide();                                                                                                         // 2625\n    var name = /pass/.test(report.className) ? '' : ' pass';                                                          // 2626\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                             // 2627\n    if (report.className.trim()) hideSuitesWithout('test pass');                                                      // 2628\n  });                                                                                                                 // 2629\n                                                                                                                      // 2630\n  // failure toggle                                                                                                   // 2631\n  on(failuresLink, 'click', function(){                                                                               // 2632\n    unhide();                                                                                                         // 2633\n    var name = /fail/.test(report.className) ? '' : ' fail';                                                          // 2634\n    report.className = report.className.replace(/fail|pass/g, '') + name;                                             // 2635\n    if (report.className.trim()) hideSuitesWithout('test fail');                                                      // 2636\n  });                                                                                                                 // 2637\n                                                                                                                      // 2638\n  root.appendChild(stat);                                                                                             // 2639\n  root.appendChild(report);                                                                                           // 2640\n                                                                                                                      // 2641\n  if (progress) progress.size(40);                                                                                    // 2642\n                                                                                                                      // 2643\n  runner.on('suite', function(suite){                                                                                 // 2644\n    if (suite.root) return;                                                                                           // 2645\n                                                                                                                      // 2646\n    // suite                                                                                                          // 2647\n    var url = self.suiteURL(suite);                                                                                   // 2648\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));               // 2649\n                                                                                                                      // 2650\n    // container                                                                                                      // 2651\n    stack[0].appendChild(el);                                                                                         // 2652\n    stack.unshift(document.createElement('ul'));                                                                      // 2653\n    el.appendChild(stack[0]);                                                                                         // 2654\n  });                                                                                                                 // 2655\n                                                                                                                      // 2656\n  runner.on('suite end', function(suite){                                                                             // 2657\n    if (suite.root) return;                                                                                           // 2658\n    stack.shift();                                                                                                    // 2659\n  });                                                                                                                 // 2660\n                                                                                                                      // 2661\n  runner.on('fail', function(test, err){                                                                              // 2662\n    if ('hook' == test.type) runner.emit('test end', test);                                                           // 2663\n  });                                                                                                                 // 2664\n                                                                                                                      // 2665\n  runner.on('test end', function(test){                                                                               // 2666\n    // TODO: add to stats                                                                                             // 2667\n    var percent = stats.tests / this.total * 100 | 0;                                                                 // 2668\n    if (progress) progress.update(percent).draw(ctx);                                                                 // 2669\n                                                                                                                      // 2670\n    // update stats                                                                                                   // 2671\n    var ms = new Date - stats.start;                                                                                  // 2672\n    text(passes, stats.passes);                                                                                       // 2673\n    text(failures, stats.failures);                                                                                   // 2674\n    text(duration, (ms / 1000).toFixed(2));                                                                           // 2675\n                                                                                                                      // 2676\n    // test                                                                                                           // 2677\n    if ('passed' == test.state) {                                                                                     // 2678\n      var url = self.testURL(test);                                                                                   // 2679\n      var el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {                                                                                        // 2681\n      var el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);                                // 2682\n    } else {                                                                                                          // 2683\n      var el = fragment('<li class=\"test fail\"><h2>%e <a href=\"?grep=%e\" class=\"replay\">‣</a></h2></li>', test.title, encodeURIComponent(test.fullTitle()));\n      var str = test.err.stack || test.err.toString();                                                                // 2685\n                                                                                                                      // 2686\n      // FF / Opera do not add the message                                                                            // 2687\n      if (!~str.indexOf(test.err.message)) {                                                                          // 2688\n        str = test.err.message + '\\n' + str;                                                                          // 2689\n      }                                                                                                               // 2690\n                                                                                                                      // 2691\n      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we                                          // 2692\n      // check for the result of the stringifying.                                                                    // 2693\n      if ('[object Error]' == str) str = test.err.message;                                                            // 2694\n                                                                                                                      // 2695\n      // Safari doesn't give you a stack. Let's at least provide a source line.                                       // 2696\n      if (!test.err.stack && test.err.sourceURL && test.err.line !== undefined) {                                     // 2697\n        str += \"\\n(\" + test.err.sourceURL + \":\" + test.err.line + \")\";                                                // 2698\n      }                                                                                                               // 2699\n                                                                                                                      // 2700\n      el.appendChild(fragment('<pre class=\"error\">%e</pre>', str));                                                   // 2701\n    }                                                                                                                 // 2702\n                                                                                                                      // 2703\n    // toggle code                                                                                                    // 2704\n    // TODO: defer                                                                                                    // 2705\n    if (!test.pending) {                                                                                              // 2706\n      var h2 = el.getElementsByTagName('h2')[0];                                                                      // 2707\n                                                                                                                      // 2708\n      on(h2, 'click', function(){                                                                                     // 2709\n        pre.style.display = 'none' == pre.style.display                                                               // 2710\n          ? 'block'                                                                                                   // 2711\n          : 'none';                                                                                                   // 2712\n      });                                                                                                             // 2713\n                                                                                                                      // 2714\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.fn.toString()));                              // 2715\n      el.appendChild(pre);                                                                                            // 2716\n      pre.style.display = 'none';                                                                                     // 2717\n    }                                                                                                                 // 2718\n                                                                                                                      // 2719\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.                                // 2720\n    if (stack[0]) stack[0].appendChild(el);                                                                           // 2721\n  });                                                                                                                 // 2722\n}                                                                                                                     // 2723\n                                                                                                                      // 2724\n/**                                                                                                                   // 2725\n * Provide suite URL                                                                                                  // 2726\n *                                                                                                                    // 2727\n * @param {Object} [suite]                                                                                            // 2728\n */                                                                                                                   // 2729\n                                                                                                                      // 2730\nHTML.prototype.suiteURL = function(suite){                                                                            // 2731\n  return '?grep=' + encodeURIComponent(suite.fullTitle());                                                            // 2732\n};                                                                                                                    // 2733\n                                                                                                                      // 2734\n/**                                                                                                                   // 2735\n * Provide test URL                                                                                                   // 2736\n *                                                                                                                    // 2737\n * @param {Object} [test]                                                                                             // 2738\n */                                                                                                                   // 2739\n                                                                                                                      // 2740\nHTML.prototype.testURL = function(test){                                                                              // 2741\n  return '?grep=' + encodeURIComponent(test.fullTitle());                                                             // 2742\n};                                                                                                                    // 2743\n                                                                                                                      // 2744\n/**                                                                                                                   // 2745\n * Display error `msg`.                                                                                               // 2746\n */                                                                                                                   // 2747\n                                                                                                                      // 2748\nfunction error(msg) {                                                                                                 // 2749\n  document.body.appendChild(fragment('<div id=\"mocha-error\">%s</div>', msg));                                         // 2750\n}                                                                                                                     // 2751\n                                                                                                                      // 2752\n/**                                                                                                                   // 2753\n * Return a DOM fragment from `html`.                                                                                 // 2754\n */                                                                                                                   // 2755\n                                                                                                                      // 2756\nfunction fragment(html) {                                                                                             // 2757\n  var args = arguments                                                                                                // 2758\n    , div = document.createElement('div')                                                                             // 2759\n    , i = 1;                                                                                                          // 2760\n                                                                                                                      // 2761\n  div.innerHTML = html.replace(/%([se])/g, function(_, type){                                                         // 2762\n    switch (type) {                                                                                                   // 2763\n      case 's': return String(args[i++]);                                                                             // 2764\n      case 'e': return escape(args[i++]);                                                                             // 2765\n    }                                                                                                                 // 2766\n  });                                                                                                                 // 2767\n                                                                                                                      // 2768\n  return div.firstChild;                                                                                              // 2769\n}                                                                                                                     // 2770\n                                                                                                                      // 2771\n/**                                                                                                                   // 2772\n * Check for suites that do not have elements                                                                         // 2773\n * with `classname`, and hide them.                                                                                   // 2774\n */                                                                                                                   // 2775\n                                                                                                                      // 2776\nfunction hideSuitesWithout(classname) {                                                                               // 2777\n  var suites = document.getElementsByClassName('suite');                                                              // 2778\n  for (var i = 0; i < suites.length; i++) {                                                                           // 2779\n    var els = suites[i].getElementsByClassName(classname);                                                            // 2780\n    if (0 == els.length) suites[i].className += ' hidden';                                                            // 2781\n  }                                                                                                                   // 2782\n}                                                                                                                     // 2783\n                                                                                                                      // 2784\n/**                                                                                                                   // 2785\n * Unhide .hidden suites.                                                                                             // 2786\n */                                                                                                                   // 2787\n                                                                                                                      // 2788\nfunction unhide() {                                                                                                   // 2789\n  var els = document.getElementsByClassName('suite hidden');                                                          // 2790\n  for (var i = 0; i < els.length; ++i) {                                                                              // 2791\n    els[i].className = els[i].className.replace('suite hidden', 'suite');                                             // 2792\n  }                                                                                                                   // 2793\n}                                                                                                                     // 2794\n                                                                                                                      // 2795\n/**                                                                                                                   // 2796\n * Set `el` text to `str`.                                                                                            // 2797\n */                                                                                                                   // 2798\n                                                                                                                      // 2799\nfunction text(el, str) {                                                                                              // 2800\n  if (el.textContent) {                                                                                               // 2801\n    el.textContent = str;                                                                                             // 2802\n  } else {                                                                                                            // 2803\n    el.innerText = str;                                                                                               // 2804\n  }                                                                                                                   // 2805\n}                                                                                                                     // 2806\n                                                                                                                      // 2807\n/**                                                                                                                   // 2808\n * Listen on `event` with callback `fn`.                                                                              // 2809\n */                                                                                                                   // 2810\n                                                                                                                      // 2811\nfunction on(el, event, fn) {                                                                                          // 2812\n  if (el.addEventListener) {                                                                                          // 2813\n    el.addEventListener(event, fn, false);                                                                            // 2814\n  } else {                                                                                                            // 2815\n    el.attachEvent('on' + event, fn);                                                                                 // 2816\n  }                                                                                                                   // 2817\n}                                                                                                                     // 2818\n                                                                                                                      // 2819\n}); // module: reporters/html.js                                                                                      // 2820\n                                                                                                                      // 2821\nrequire.register(\"reporters/index.js\", function(module, exports, require){                                            // 2822\n                                                                                                                      // 2823\nexports.Base = require('./base');                                                                                     // 2824\nexports.Dot = require('./dot');                                                                                       // 2825\nexports.Doc = require('./doc');                                                                                       // 2826\nexports.TAP = require('./tap');                                                                                       // 2827\nexports.JSON = require('./json');                                                                                     // 2828\nexports.HTML = require('./html');                                                                                     // 2829\nexports.List = require('./list');                                                                                     // 2830\nexports.Min = require('./min');                                                                                       // 2831\nexports.Spec = require('./spec');                                                                                     // 2832\nexports.Nyan = require('./nyan');                                                                                     // 2833\nexports.XUnit = require('./xunit');                                                                                   // 2834\nexports.Markdown = require('./markdown');                                                                             // 2835\nexports.Progress = require('./progress');                                                                             // 2836\nexports.Landing = require('./landing');                                                                               // 2837\nexports.JSONCov = require('./json-cov');                                                                              // 2838\nexports.HTMLCov = require('./html-cov');                                                                              // 2839\nexports.JSONStream = require('./json-stream');                                                                        // 2840\n                                                                                                                      // 2841\n}); // module: reporters/index.js                                                                                     // 2842\n                                                                                                                      // 2843\nrequire.register(\"reporters/json-cov.js\", function(module, exports, require){                                         // 2844\n                                                                                                                      // 2845\n/**                                                                                                                   // 2846\n * Module dependencies.                                                                                               // 2847\n */                                                                                                                   // 2848\n                                                                                                                      // 2849\nvar Base = require('./base');                                                                                         // 2850\n                                                                                                                      // 2851\n/**                                                                                                                   // 2852\n * Expose `JSONCov`.                                                                                                  // 2853\n */                                                                                                                   // 2854\n                                                                                                                      // 2855\nexports = module.exports = JSONCov;                                                                                   // 2856\n                                                                                                                      // 2857\n/**                                                                                                                   // 2858\n * Initialize a new `JsCoverage` reporter.                                                                            // 2859\n *                                                                                                                    // 2860\n * @param {Runner} runner                                                                                             // 2861\n * @param {Boolean} output                                                                                            // 2862\n * @api public                                                                                                        // 2863\n */                                                                                                                   // 2864\n                                                                                                                      // 2865\nfunction JSONCov(runner, output) {                                                                                    // 2866\n  var self = this                                                                                                     // 2867\n    , output = 1 == arguments.length ? true : output;                                                                 // 2868\n                                                                                                                      // 2869\n  Base.call(this, runner);                                                                                            // 2870\n                                                                                                                      // 2871\n  var tests = []                                                                                                      // 2872\n    , failures = []                                                                                                   // 2873\n    , passes = [];                                                                                                    // 2874\n                                                                                                                      // 2875\n  runner.on('test end', function(test){                                                                               // 2876\n    tests.push(test);                                                                                                 // 2877\n  });                                                                                                                 // 2878\n                                                                                                                      // 2879\n  runner.on('pass', function(test){                                                                                   // 2880\n    passes.push(test);                                                                                                // 2881\n  });                                                                                                                 // 2882\n                                                                                                                      // 2883\n  runner.on('fail', function(test){                                                                                   // 2884\n    failures.push(test);                                                                                              // 2885\n  });                                                                                                                 // 2886\n                                                                                                                      // 2887\n  runner.on('end', function(){                                                                                        // 2888\n    var cov = global._$jscoverage || {};                                                                              // 2889\n    var result = self.cov = map(cov);                                                                                 // 2890\n    result.stats = self.stats;                                                                                        // 2891\n    result.tests = tests.map(clean);                                                                                  // 2892\n    result.failures = failures.map(clean);                                                                            // 2893\n    result.passes = passes.map(clean);                                                                                // 2894\n    if (!output) return;                                                                                              // 2895\n    process.stdout.write(JSON.stringify(result, null, 2 ));                                                           // 2896\n  });                                                                                                                 // 2897\n}                                                                                                                     // 2898\n                                                                                                                      // 2899\n/**                                                                                                                   // 2900\n * Map jscoverage data to a JSON structure                                                                            // 2901\n * suitable for reporting.                                                                                            // 2902\n *                                                                                                                    // 2903\n * @param {Object} cov                                                                                                // 2904\n * @return {Object}                                                                                                   // 2905\n * @api private                                                                                                       // 2906\n */                                                                                                                   // 2907\n                                                                                                                      // 2908\nfunction map(cov) {                                                                                                   // 2909\n  var ret = {                                                                                                         // 2910\n      instrumentation: 'node-jscoverage'                                                                              // 2911\n    , sloc: 0                                                                                                         // 2912\n    , hits: 0                                                                                                         // 2913\n    , misses: 0                                                                                                       // 2914\n    , coverage: 0                                                                                                     // 2915\n    , files: []                                                                                                       // 2916\n  };                                                                                                                  // 2917\n                                                                                                                      // 2918\n  for (var filename in cov) {                                                                                         // 2919\n    var data = coverage(filename, cov[filename]);                                                                     // 2920\n    ret.files.push(data);                                                                                             // 2921\n    ret.hits += data.hits;                                                                                            // 2922\n    ret.misses += data.misses;                                                                                        // 2923\n    ret.sloc += data.sloc;                                                                                            // 2924\n  }                                                                                                                   // 2925\n                                                                                                                      // 2926\n  ret.files.sort(function(a, b) {                                                                                     // 2927\n    return a.filename.localeCompare(b.filename);                                                                      // 2928\n  });                                                                                                                 // 2929\n                                                                                                                      // 2930\n  if (ret.sloc > 0) {                                                                                                 // 2931\n    ret.coverage = (ret.hits / ret.sloc) * 100;                                                                       // 2932\n  }                                                                                                                   // 2933\n                                                                                                                      // 2934\n  return ret;                                                                                                         // 2935\n};                                                                                                                    // 2936\n                                                                                                                      // 2937\n/**                                                                                                                   // 2938\n * Map jscoverage data for a single source file                                                                       // 2939\n * to a JSON structure suitable for reporting.                                                                        // 2940\n *                                                                                                                    // 2941\n * @param {String} filename name of the source file                                                                   // 2942\n * @param {Object} data jscoverage coverage data                                                                      // 2943\n * @return {Object}                                                                                                   // 2944\n * @api private                                                                                                       // 2945\n */                                                                                                                   // 2946\n                                                                                                                      // 2947\nfunction coverage(filename, data) {                                                                                   // 2948\n  var ret = {                                                                                                         // 2949\n    filename: filename,                                                                                               // 2950\n    coverage: 0,                                                                                                      // 2951\n    hits: 0,                                                                                                          // 2952\n    misses: 0,                                                                                                        // 2953\n    sloc: 0,                                                                                                          // 2954\n    source: {}                                                                                                        // 2955\n  };                                                                                                                  // 2956\n                                                                                                                      // 2957\n  data.source.forEach(function(line, num){                                                                            // 2958\n    num++;                                                                                                            // 2959\n                                                                                                                      // 2960\n    if (data[num] === 0) {                                                                                            // 2961\n      ret.misses++;                                                                                                   // 2962\n      ret.sloc++;                                                                                                     // 2963\n    } else if (data[num] !== undefined) {                                                                             // 2964\n      ret.hits++;                                                                                                     // 2965\n      ret.sloc++;                                                                                                     // 2966\n    }                                                                                                                 // 2967\n                                                                                                                      // 2968\n    ret.source[num] = {                                                                                               // 2969\n        source: line                                                                                                  // 2970\n      , coverage: data[num] === undefined                                                                             // 2971\n        ? ''                                                                                                          // 2972\n        : data[num]                                                                                                   // 2973\n    };                                                                                                                // 2974\n  });                                                                                                                 // 2975\n                                                                                                                      // 2976\n  ret.coverage = ret.hits / ret.sloc * 100;                                                                           // 2977\n                                                                                                                      // 2978\n  return ret;                                                                                                         // 2979\n}                                                                                                                     // 2980\n                                                                                                                      // 2981\n/**                                                                                                                   // 2982\n * Return a plain-object representation of `test`                                                                     // 2983\n * free of cyclic properties etc.                                                                                     // 2984\n *                                                                                                                    // 2985\n * @param {Object} test                                                                                               // 2986\n * @return {Object}                                                                                                   // 2987\n * @api private                                                                                                       // 2988\n */                                                                                                                   // 2989\n                                                                                                                      // 2990\nfunction clean(test) {                                                                                                // 2991\n  return {                                                                                                            // 2992\n      title: test.title                                                                                               // 2993\n    , fullTitle: test.fullTitle()                                                                                     // 2994\n    , duration: test.duration                                                                                         // 2995\n  }                                                                                                                   // 2996\n}                                                                                                                     // 2997\n                                                                                                                      // 2998\n}); // module: reporters/json-cov.js                                                                                  // 2999\n                                                                                                                      // 3000\nrequire.register(\"reporters/json-stream.js\", function(module, exports, require){                                      // 3001\n                                                                                                                      // 3002\n/**                                                                                                                   // 3003\n * Module dependencies.                                                                                               // 3004\n */                                                                                                                   // 3005\n                                                                                                                      // 3006\nvar Base = require('./base')                                                                                          // 3007\n  , color = Base.color;                                                                                               // 3008\n                                                                                                                      // 3009\n/**                                                                                                                   // 3010\n * Expose `List`.                                                                                                     // 3011\n */                                                                                                                   // 3012\n                                                                                                                      // 3013\nexports = module.exports = List;                                                                                      // 3014\n                                                                                                                      // 3015\n/**                                                                                                                   // 3016\n * Initialize a new `List` test reporter.                                                                             // 3017\n *                                                                                                                    // 3018\n * @param {Runner} runner                                                                                             // 3019\n * @api public                                                                                                        // 3020\n */                                                                                                                   // 3021\n                                                                                                                      // 3022\nfunction List(runner) {                                                                                               // 3023\n  Base.call(this, runner);                                                                                            // 3024\n                                                                                                                      // 3025\n  var self = this                                                                                                     // 3026\n    , stats = this.stats                                                                                              // 3027\n    , total = runner.total;                                                                                           // 3028\n                                                                                                                      // 3029\n  runner.on('start', function(){                                                                                      // 3030\n    console.log(JSON.stringify(['start', { total: total }]));                                                         // 3031\n  });                                                                                                                 // 3032\n                                                                                                                      // 3033\n  runner.on('pass', function(test){                                                                                   // 3034\n    console.log(JSON.stringify(['pass', clean(test)]));                                                               // 3035\n  });                                                                                                                 // 3036\n                                                                                                                      // 3037\n  runner.on('fail', function(test, err){                                                                              // 3038\n    console.log(JSON.stringify(['fail', clean(test)]));                                                               // 3039\n  });                                                                                                                 // 3040\n                                                                                                                      // 3041\n  runner.on('end', function(){                                                                                        // 3042\n    process.stdout.write(JSON.stringify(['end', self.stats]));                                                        // 3043\n  });                                                                                                                 // 3044\n}                                                                                                                     // 3045\n                                                                                                                      // 3046\n/**                                                                                                                   // 3047\n * Return a plain-object representation of `test`                                                                     // 3048\n * free of cyclic properties etc.                                                                                     // 3049\n *                                                                                                                    // 3050\n * @param {Object} test                                                                                               // 3051\n * @return {Object}                                                                                                   // 3052\n * @api private                                                                                                       // 3053\n */                                                                                                                   // 3054\n                                                                                                                      // 3055\nfunction clean(test) {                                                                                                // 3056\n  return {                                                                                                            // 3057\n      title: test.title                                                                                               // 3058\n    , fullTitle: test.fullTitle()                                                                                     // 3059\n    , duration: test.duration                                                                                         // 3060\n  }                                                                                                                   // 3061\n}                                                                                                                     // 3062\n}); // module: reporters/json-stream.js                                                                               // 3063\n                                                                                                                      // 3064\nrequire.register(\"reporters/json.js\", function(module, exports, require){                                             // 3065\n                                                                                                                      // 3066\n/**                                                                                                                   // 3067\n * Module dependencies.                                                                                               // 3068\n */                                                                                                                   // 3069\n                                                                                                                      // 3070\nvar Base = require('./base')                                                                                          // 3071\n  , cursor = Base.cursor                                                                                              // 3072\n  , color = Base.color;                                                                                               // 3073\n                                                                                                                      // 3074\n/**                                                                                                                   // 3075\n * Expose `JSON`.                                                                                                     // 3076\n */                                                                                                                   // 3077\n                                                                                                                      // 3078\nexports = module.exports = JSONReporter;                                                                              // 3079\n                                                                                                                      // 3080\n/**                                                                                                                   // 3081\n * Initialize a new `JSON` reporter.                                                                                  // 3082\n *                                                                                                                    // 3083\n * @param {Runner} runner                                                                                             // 3084\n * @api public                                                                                                        // 3085\n */                                                                                                                   // 3086\n                                                                                                                      // 3087\nfunction JSONReporter(runner) {                                                                                       // 3088\n  var self = this;                                                                                                    // 3089\n  Base.call(this, runner);                                                                                            // 3090\n                                                                                                                      // 3091\n  var tests = []                                                                                                      // 3092\n    , failures = []                                                                                                   // 3093\n    , passes = [];                                                                                                    // 3094\n                                                                                                                      // 3095\n  runner.on('test end', function(test){                                                                               // 3096\n    tests.push(test);                                                                                                 // 3097\n  });                                                                                                                 // 3098\n                                                                                                                      // 3099\n  runner.on('pass', function(test){                                                                                   // 3100\n    passes.push(test);                                                                                                // 3101\n  });                                                                                                                 // 3102\n                                                                                                                      // 3103\n  runner.on('fail', function(test){                                                                                   // 3104\n    failures.push(test);                                                                                              // 3105\n  });                                                                                                                 // 3106\n                                                                                                                      // 3107\n  runner.on('end', function(){                                                                                        // 3108\n    var obj = {                                                                                                       // 3109\n        stats: self.stats                                                                                             // 3110\n      , tests: tests.map(clean)                                                                                       // 3111\n      , failures: failures.map(clean)                                                                                 // 3112\n      , passes: passes.map(clean)                                                                                     // 3113\n    };                                                                                                                // 3114\n                                                                                                                      // 3115\n    process.stdout.write(JSON.stringify(obj, null, 2));                                                               // 3116\n  });                                                                                                                 // 3117\n}                                                                                                                     // 3118\n                                                                                                                      // 3119\n/**                                                                                                                   // 3120\n * Return a plain-object representation of `test`                                                                     // 3121\n * free of cyclic properties etc.                                                                                     // 3122\n *                                                                                                                    // 3123\n * @param {Object} test                                                                                               // 3124\n * @return {Object}                                                                                                   // 3125\n * @api private                                                                                                       // 3126\n */                                                                                                                   // 3127\n                                                                                                                      // 3128\nfunction clean(test) {                                                                                                // 3129\n  return {                                                                                                            // 3130\n      title: test.title                                                                                               // 3131\n    , fullTitle: test.fullTitle()                                                                                     // 3132\n    , duration: test.duration                                                                                         // 3133\n  }                                                                                                                   // 3134\n}                                                                                                                     // 3135\n}); // module: reporters/json.js                                                                                      // 3136\n                                                                                                                      // 3137\nrequire.register(\"reporters/landing.js\", function(module, exports, require){                                          // 3138\n                                                                                                                      // 3139\n/**                                                                                                                   // 3140\n * Module dependencies.                                                                                               // 3141\n */                                                                                                                   // 3142\n                                                                                                                      // 3143\nvar Base = require('./base')                                                                                          // 3144\n  , cursor = Base.cursor                                                                                              // 3145\n  , color = Base.color;                                                                                               // 3146\n                                                                                                                      // 3147\n/**                                                                                                                   // 3148\n * Expose `Landing`.                                                                                                  // 3149\n */                                                                                                                   // 3150\n                                                                                                                      // 3151\nexports = module.exports = Landing;                                                                                   // 3152\n                                                                                                                      // 3153\n/**                                                                                                                   // 3154\n * Airplane color.                                                                                                    // 3155\n */                                                                                                                   // 3156\n                                                                                                                      // 3157\nBase.colors.plane = 0;                                                                                                // 3158\n                                                                                                                      // 3159\n/**                                                                                                                   // 3160\n * Airplane crash color.                                                                                              // 3161\n */                                                                                                                   // 3162\n                                                                                                                      // 3163\nBase.colors['plane crash'] = 31;                                                                                      // 3164\n                                                                                                                      // 3165\n/**                                                                                                                   // 3166\n * Runway color.                                                                                                      // 3167\n */                                                                                                                   // 3168\n                                                                                                                      // 3169\nBase.colors.runway = 90;                                                                                              // 3170\n                                                                                                                      // 3171\n/**                                                                                                                   // 3172\n * Initialize a new `Landing` reporter.                                                                               // 3173\n *                                                                                                                    // 3174\n * @param {Runner} runner                                                                                             // 3175\n * @api public                                                                                                        // 3176\n */                                                                                                                   // 3177\n                                                                                                                      // 3178\nfunction Landing(runner) {                                                                                            // 3179\n  Base.call(this, runner);                                                                                            // 3180\n                                                                                                                      // 3181\n  var self = this                                                                                                     // 3182\n    , stats = this.stats                                                                                              // 3183\n    , width = Base.window.width * .75 | 0                                                                             // 3184\n    , total = runner.total                                                                                            // 3185\n    , stream = process.stdout                                                                                         // 3186\n    , plane = color('plane', '✈')                                                                                     // 3187\n    , crashed = -1                                                                                                    // 3188\n    , n = 0;                                                                                                          // 3189\n                                                                                                                      // 3190\n  function runway() {                                                                                                 // 3191\n    var buf = Array(width).join('-');                                                                                 // 3192\n    return '  ' + color('runway', buf);                                                                               // 3193\n  }                                                                                                                   // 3194\n                                                                                                                      // 3195\n  runner.on('start', function(){                                                                                      // 3196\n    stream.write('\\n  ');                                                                                             // 3197\n    cursor.hide();                                                                                                    // 3198\n  });                                                                                                                 // 3199\n                                                                                                                      // 3200\n  runner.on('test end', function(test){                                                                               // 3201\n    // check if the plane crashed                                                                                     // 3202\n    var col = -1 == crashed                                                                                           // 3203\n      ? width * ++n / total | 0                                                                                       // 3204\n      : crashed;                                                                                                      // 3205\n                                                                                                                      // 3206\n    // show the crash                                                                                                 // 3207\n    if ('failed' == test.state) {                                                                                     // 3208\n      plane = color('plane crash', '✈');                                                                              // 3209\n      crashed = col;                                                                                                  // 3210\n    }                                                                                                                 // 3211\n                                                                                                                      // 3212\n    // render landing strip                                                                                           // 3213\n    stream.write('\\u001b[4F\\n\\n');                                                                                    // 3214\n    stream.write(runway());                                                                                           // 3215\n    stream.write('\\n  ');                                                                                             // 3216\n    stream.write(color('runway', Array(col).join('⋅')));                                                              // 3217\n    stream.write(plane)                                                                                               // 3218\n    stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));                                               // 3219\n    stream.write(runway());                                                                                           // 3220\n    stream.write('\\u001b[0m');                                                                                        // 3221\n  });                                                                                                                 // 3222\n                                                                                                                      // 3223\n  runner.on('end', function(){                                                                                        // 3224\n    cursor.show();                                                                                                    // 3225\n    console.log();                                                                                                    // 3226\n    self.epilogue();                                                                                                  // 3227\n  });                                                                                                                 // 3228\n}                                                                                                                     // 3229\n                                                                                                                      // 3230\n/**                                                                                                                   // 3231\n * Inherit from `Base.prototype`.                                                                                     // 3232\n */                                                                                                                   // 3233\n                                                                                                                      // 3234\nfunction F(){};                                                                                                       // 3235\nF.prototype = Base.prototype;                                                                                         // 3236\nLanding.prototype = new F;                                                                                            // 3237\nLanding.prototype.constructor = Landing;                                                                              // 3238\n                                                                                                                      // 3239\n}); // module: reporters/landing.js                                                                                   // 3240\n                                                                                                                      // 3241\nrequire.register(\"reporters/list.js\", function(module, exports, require){                                             // 3242\n                                                                                                                      // 3243\n/**                                                                                                                   // 3244\n * Module dependencies.                                                                                               // 3245\n */                                                                                                                   // 3246\n                                                                                                                      // 3247\nvar Base = require('./base')                                                                                          // 3248\n  , cursor = Base.cursor                                                                                              // 3249\n  , color = Base.color;                                                                                               // 3250\n                                                                                                                      // 3251\n/**                                                                                                                   // 3252\n * Expose `List`.                                                                                                     // 3253\n */                                                                                                                   // 3254\n                                                                                                                      // 3255\nexports = module.exports = List;                                                                                      // 3256\n                                                                                                                      // 3257\n/**                                                                                                                   // 3258\n * Initialize a new `List` test reporter.                                                                             // 3259\n *                                                                                                                    // 3260\n * @param {Runner} runner                                                                                             // 3261\n * @api public                                                                                                        // 3262\n */                                                                                                                   // 3263\n                                                                                                                      // 3264\nfunction List(runner) {                                                                                               // 3265\n  Base.call(this, runner);                                                                                            // 3266\n                                                                                                                      // 3267\n  var self = this                                                                                                     // 3268\n    , stats = this.stats                                                                                              // 3269\n    , n = 0;                                                                                                          // 3270\n                                                                                                                      // 3271\n  runner.on('start', function(){                                                                                      // 3272\n    console.log();                                                                                                    // 3273\n  });                                                                                                                 // 3274\n                                                                                                                      // 3275\n  runner.on('test', function(test){                                                                                   // 3276\n    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));                                            // 3277\n  });                                                                                                                 // 3278\n                                                                                                                      // 3279\n  runner.on('pending', function(test){                                                                                // 3280\n    var fmt = color('checkmark', '  -')                                                                               // 3281\n      + color('pending', ' %s');                                                                                      // 3282\n    console.log(fmt, test.fullTitle());                                                                               // 3283\n  });                                                                                                                 // 3284\n                                                                                                                      // 3285\n  runner.on('pass', function(test){                                                                                   // 3286\n    var fmt = color('checkmark', '  '+Base.symbols.dot)                                                               // 3287\n      + color('pass', ' %s: ')                                                                                        // 3288\n      + color(test.speed, '%dms');                                                                                    // 3289\n    cursor.CR();                                                                                                      // 3290\n    console.log(fmt, test.fullTitle(), test.duration);                                                                // 3291\n  });                                                                                                                 // 3292\n                                                                                                                      // 3293\n  runner.on('fail', function(test, err){                                                                              // 3294\n    cursor.CR();                                                                                                      // 3295\n    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());                                                    // 3296\n  });                                                                                                                 // 3297\n                                                                                                                      // 3298\n  runner.on('end', self.epilogue.bind(self));                                                                         // 3299\n}                                                                                                                     // 3300\n                                                                                                                      // 3301\n/**                                                                                                                   // 3302\n * Inherit from `Base.prototype`.                                                                                     // 3303\n */                                                                                                                   // 3304\n                                                                                                                      // 3305\nfunction F(){};                                                                                                       // 3306\nF.prototype = Base.prototype;                                                                                         // 3307\nList.prototype = new F;                                                                                               // 3308\nList.prototype.constructor = List;                                                                                    // 3309\n                                                                                                                      // 3310\n                                                                                                                      // 3311\n}); // module: reporters/list.js                                                                                      // 3312\n                                                                                                                      // 3313\nrequire.register(\"reporters/markdown.js\", function(module, exports, require){                                         // 3314\n/**                                                                                                                   // 3315\n * Module dependencies.                                                                                               // 3316\n */                                                                                                                   // 3317\n                                                                                                                      // 3318\nvar Base = require('./base')                                                                                          // 3319\n  , utils = require('../utils');                                                                                      // 3320\n                                                                                                                      // 3321\n/**                                                                                                                   // 3322\n * Expose `Markdown`.                                                                                                 // 3323\n */                                                                                                                   // 3324\n                                                                                                                      // 3325\nexports = module.exports = Markdown;                                                                                  // 3326\n                                                                                                                      // 3327\n/**                                                                                                                   // 3328\n * Initialize a new `Markdown` reporter.                                                                              // 3329\n *                                                                                                                    // 3330\n * @param {Runner} runner                                                                                             // 3331\n * @api public                                                                                                        // 3332\n */                                                                                                                   // 3333\n                                                                                                                      // 3334\nfunction Markdown(runner) {                                                                                           // 3335\n  Base.call(this, runner);                                                                                            // 3336\n                                                                                                                      // 3337\n  var self = this                                                                                                     // 3338\n    , stats = this.stats                                                                                              // 3339\n    , level = 0                                                                                                       // 3340\n    , buf = '';                                                                                                       // 3341\n                                                                                                                      // 3342\n  function title(str) {                                                                                               // 3343\n    return Array(level).join('#') + ' ' + str;                                                                        // 3344\n  }                                                                                                                   // 3345\n                                                                                                                      // 3346\n  function indent() {                                                                                                 // 3347\n    return Array(level).join('  ');                                                                                   // 3348\n  }                                                                                                                   // 3349\n                                                                                                                      // 3350\n  function mapTOC(suite, obj) {                                                                                       // 3351\n    var ret = obj;                                                                                                    // 3352\n    obj = obj[suite.title] = obj[suite.title] || { suite: suite };                                                    // 3353\n    suite.suites.forEach(function(suite){                                                                             // 3354\n      mapTOC(suite, obj);                                                                                             // 3355\n    });                                                                                                               // 3356\n    return ret;                                                                                                       // 3357\n  }                                                                                                                   // 3358\n                                                                                                                      // 3359\n  function stringifyTOC(obj, level) {                                                                                 // 3360\n    ++level;                                                                                                          // 3361\n    var buf = '';                                                                                                     // 3362\n    var link;                                                                                                         // 3363\n    for (var key in obj) {                                                                                            // 3364\n      if ('suite' == key) continue;                                                                                   // 3365\n      if (key) link = ' - [' + key + '](#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';                          // 3366\n      if (key) buf += Array(level).join('  ') + link;                                                                 // 3367\n      buf += stringifyTOC(obj[key], level);                                                                           // 3368\n    }                                                                                                                 // 3369\n    --level;                                                                                                          // 3370\n    return buf;                                                                                                       // 3371\n  }                                                                                                                   // 3372\n                                                                                                                      // 3373\n  function generateTOC(suite) {                                                                                       // 3374\n    var obj = mapTOC(suite, {});                                                                                      // 3375\n    return stringifyTOC(obj, 0);                                                                                      // 3376\n  }                                                                                                                   // 3377\n                                                                                                                      // 3378\n  generateTOC(runner.suite);                                                                                          // 3379\n                                                                                                                      // 3380\n  runner.on('suite', function(suite){                                                                                 // 3381\n    ++level;                                                                                                          // 3382\n    var slug = utils.slug(suite.fullTitle());                                                                         // 3383\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';                                                                      // 3384\n    buf += title(suite.title) + '\\n';                                                                                 // 3385\n  });                                                                                                                 // 3386\n                                                                                                                      // 3387\n  runner.on('suite end', function(suite){                                                                             // 3388\n    --level;                                                                                                          // 3389\n  });                                                                                                                 // 3390\n                                                                                                                      // 3391\n  runner.on('pass', function(test){                                                                                   // 3392\n    var code = utils.clean(test.fn.toString());                                                                       // 3393\n    buf += test.title + '.\\n';                                                                                        // 3394\n    buf += '\\n```js\\n';                                                                                               // 3395\n    buf += code + '\\n';                                                                                               // 3396\n    buf += '```\\n\\n';                                                                                                 // 3397\n  });                                                                                                                 // 3398\n                                                                                                                      // 3399\n  runner.on('end', function(){                                                                                        // 3400\n    process.stdout.write('# TOC\\n');                                                                                  // 3401\n    process.stdout.write(generateTOC(runner.suite));                                                                  // 3402\n    process.stdout.write(buf);                                                                                        // 3403\n  });                                                                                                                 // 3404\n}                                                                                                                     // 3405\n}); // module: reporters/markdown.js                                                                                  // 3406\n                                                                                                                      // 3407\nrequire.register(\"reporters/min.js\", function(module, exports, require){                                              // 3408\n                                                                                                                      // 3409\n/**                                                                                                                   // 3410\n * Module dependencies.                                                                                               // 3411\n */                                                                                                                   // 3412\n                                                                                                                      // 3413\nvar Base = require('./base');                                                                                         // 3414\n                                                                                                                      // 3415\n/**                                                                                                                   // 3416\n * Expose `Min`.                                                                                                      // 3417\n */                                                                                                                   // 3418\n                                                                                                                      // 3419\nexports = module.exports = Min;                                                                                       // 3420\n                                                                                                                      // 3421\n/**                                                                                                                   // 3422\n * Initialize a new `Min` minimal test reporter (best used with --watch).                                             // 3423\n *                                                                                                                    // 3424\n * @param {Runner} runner                                                                                             // 3425\n * @api public                                                                                                        // 3426\n */                                                                                                                   // 3427\n                                                                                                                      // 3428\nfunction Min(runner) {                                                                                                // 3429\n  Base.call(this, runner);                                                                                            // 3430\n                                                                                                                      // 3431\n  runner.on('start', function(){                                                                                      // 3432\n    // clear screen                                                                                                   // 3433\n    process.stdout.write('\\u001b[2J');                                                                                // 3434\n    // set cursor position                                                                                            // 3435\n    process.stdout.write('\\u001b[1;3H');                                                                              // 3436\n  });                                                                                                                 // 3437\n                                                                                                                      // 3438\n  runner.on('end', this.epilogue.bind(this));                                                                         // 3439\n}                                                                                                                     // 3440\n                                                                                                                      // 3441\n/**                                                                                                                   // 3442\n * Inherit from `Base.prototype`.                                                                                     // 3443\n */                                                                                                                   // 3444\n                                                                                                                      // 3445\nfunction F(){};                                                                                                       // 3446\nF.prototype = Base.prototype;                                                                                         // 3447\nMin.prototype = new F;                                                                                                // 3448\nMin.prototype.constructor = Min;                                                                                      // 3449\n                                                                                                                      // 3450\n                                                                                                                      // 3451\n}); // module: reporters/min.js                                                                                       // 3452\n                                                                                                                      // 3453\nrequire.register(\"reporters/nyan.js\", function(module, exports, require){                                             // 3454\n/**                                                                                                                   // 3455\n * Module dependencies.                                                                                               // 3456\n */                                                                                                                   // 3457\n                                                                                                                      // 3458\nvar Base = require('./base')                                                                                          // 3459\n  , color = Base.color;                                                                                               // 3460\n                                                                                                                      // 3461\n/**                                                                                                                   // 3462\n * Expose `Dot`.                                                                                                      // 3463\n */                                                                                                                   // 3464\n                                                                                                                      // 3465\nexports = module.exports = NyanCat;                                                                                   // 3466\n                                                                                                                      // 3467\n/**                                                                                                                   // 3468\n * Initialize a new `Dot` matrix test reporter.                                                                       // 3469\n *                                                                                                                    // 3470\n * @param {Runner} runner                                                                                             // 3471\n * @api public                                                                                                        // 3472\n */                                                                                                                   // 3473\n                                                                                                                      // 3474\nfunction NyanCat(runner) {                                                                                            // 3475\n  Base.call(this, runner);                                                                                            // 3476\n  var self = this                                                                                                     // 3477\n    , stats = this.stats                                                                                              // 3478\n    , width = Base.window.width * .75 | 0                                                                             // 3479\n    , rainbowColors = this.rainbowColors = self.generateColors()                                                      // 3480\n    , colorIndex = this.colorIndex = 0                                                                                // 3481\n    , numerOfLines = this.numberOfLines = 4                                                                           // 3482\n    , trajectories = this.trajectories = [[], [], [], []]                                                             // 3483\n    , nyanCatWidth = this.nyanCatWidth = 11                                                                           // 3484\n    , trajectoryWidthMax = this.trajectoryWidthMax = (width - nyanCatWidth)                                           // 3485\n    , scoreboardWidth = this.scoreboardWidth = 5                                                                      // 3486\n    , tick = this.tick = 0                                                                                            // 3487\n    , n = 0;                                                                                                          // 3488\n                                                                                                                      // 3489\n  runner.on('start', function(){                                                                                      // 3490\n    Base.cursor.hide();                                                                                               // 3491\n    self.draw();                                                                                                      // 3492\n  });                                                                                                                 // 3493\n                                                                                                                      // 3494\n  runner.on('pending', function(test){                                                                                // 3495\n    self.draw();                                                                                                      // 3496\n  });                                                                                                                 // 3497\n                                                                                                                      // 3498\n  runner.on('pass', function(test){                                                                                   // 3499\n    self.draw();                                                                                                      // 3500\n  });                                                                                                                 // 3501\n                                                                                                                      // 3502\n  runner.on('fail', function(test, err){                                                                              // 3503\n    self.draw();                                                                                                      // 3504\n  });                                                                                                                 // 3505\n                                                                                                                      // 3506\n  runner.on('end', function(){                                                                                        // 3507\n    Base.cursor.show();                                                                                               // 3508\n    for (var i = 0; i < self.numberOfLines; i++) write('\\n');                                                         // 3509\n    self.epilogue();                                                                                                  // 3510\n  });                                                                                                                 // 3511\n}                                                                                                                     // 3512\n                                                                                                                      // 3513\n/**                                                                                                                   // 3514\n * Draw the nyan cat                                                                                                  // 3515\n *                                                                                                                    // 3516\n * @api private                                                                                                       // 3517\n */                                                                                                                   // 3518\n                                                                                                                      // 3519\nNyanCat.prototype.draw = function(){                                                                                  // 3520\n  this.appendRainbow();                                                                                               // 3521\n  this.drawScoreboard();                                                                                              // 3522\n  this.drawRainbow();                                                                                                 // 3523\n  this.drawNyanCat();                                                                                                 // 3524\n  this.tick = !this.tick;                                                                                             // 3525\n};                                                                                                                    // 3526\n                                                                                                                      // 3527\n/**                                                                                                                   // 3528\n * Draw the \"scoreboard\" showing the number                                                                           // 3529\n * of passes, failures and pending tests.                                                                             // 3530\n *                                                                                                                    // 3531\n * @api private                                                                                                       // 3532\n */                                                                                                                   // 3533\n                                                                                                                      // 3534\nNyanCat.prototype.drawScoreboard = function(){                                                                        // 3535\n  var stats = this.stats;                                                                                             // 3536\n  var colors = Base.colors;                                                                                           // 3537\n                                                                                                                      // 3538\n  function draw(color, n) {                                                                                           // 3539\n    write(' ');                                                                                                       // 3540\n    write('\\u001b[' + color + 'm' + n + '\\u001b[0m');                                                                 // 3541\n    write('\\n');                                                                                                      // 3542\n  }                                                                                                                   // 3543\n                                                                                                                      // 3544\n  draw(colors.green, stats.passes);                                                                                   // 3545\n  draw(colors.fail, stats.failures);                                                                                  // 3546\n  draw(colors.pending, stats.pending);                                                                                // 3547\n  write('\\n');                                                                                                        // 3548\n                                                                                                                      // 3549\n  this.cursorUp(this.numberOfLines);                                                                                  // 3550\n};                                                                                                                    // 3551\n                                                                                                                      // 3552\n/**                                                                                                                   // 3553\n * Append the rainbow.                                                                                                // 3554\n *                                                                                                                    // 3555\n * @api private                                                                                                       // 3556\n */                                                                                                                   // 3557\n                                                                                                                      // 3558\nNyanCat.prototype.appendRainbow = function(){                                                                         // 3559\n  var segment = this.tick ? '_' : '-';                                                                                // 3560\n  var rainbowified = this.rainbowify(segment);                                                                        // 3561\n                                                                                                                      // 3562\n  for (var index = 0; index < this.numberOfLines; index++) {                                                          // 3563\n    var trajectory = this.trajectories[index];                                                                        // 3564\n    if (trajectory.length >= this.trajectoryWidthMax) trajectory.shift();                                             // 3565\n    trajectory.push(rainbowified);                                                                                    // 3566\n  }                                                                                                                   // 3567\n};                                                                                                                    // 3568\n                                                                                                                      // 3569\n/**                                                                                                                   // 3570\n * Draw the rainbow.                                                                                                  // 3571\n *                                                                                                                    // 3572\n * @api private                                                                                                       // 3573\n */                                                                                                                   // 3574\n                                                                                                                      // 3575\nNyanCat.prototype.drawRainbow = function(){                                                                           // 3576\n  var self = this;                                                                                                    // 3577\n                                                                                                                      // 3578\n  this.trajectories.forEach(function(line, index) {                                                                   // 3579\n    write('\\u001b[' + self.scoreboardWidth + 'C');                                                                    // 3580\n    write(line.join(''));                                                                                             // 3581\n    write('\\n');                                                                                                      // 3582\n  });                                                                                                                 // 3583\n                                                                                                                      // 3584\n  this.cursorUp(this.numberOfLines);                                                                                  // 3585\n};                                                                                                                    // 3586\n                                                                                                                      // 3587\n/**                                                                                                                   // 3588\n * Draw the nyan cat                                                                                                  // 3589\n *                                                                                                                    // 3590\n * @api private                                                                                                       // 3591\n */                                                                                                                   // 3592\n                                                                                                                      // 3593\nNyanCat.prototype.drawNyanCat = function() {                                                                          // 3594\n  var self = this;                                                                                                    // 3595\n  var startWidth = this.scoreboardWidth + this.trajectories[0].length;                                                // 3596\n  var color = '\\u001b[' + startWidth + 'C';                                                                           // 3597\n  var padding = '';                                                                                                   // 3598\n                                                                                                                      // 3599\n  write(color);                                                                                                       // 3600\n  write('_,------,');                                                                                                 // 3601\n  write('\\n');                                                                                                        // 3602\n                                                                                                                      // 3603\n  write(color);                                                                                                       // 3604\n  padding = self.tick ? '  ' : '   ';                                                                                 // 3605\n  write('_|' + padding + '/\\\\_/\\\\ ');                                                                                 // 3606\n  write('\\n');                                                                                                        // 3607\n                                                                                                                      // 3608\n  write(color);                                                                                                       // 3609\n  padding = self.tick ? '_' : '__';                                                                                   // 3610\n  var tail = self.tick ? '~' : '^';                                                                                   // 3611\n  var face;                                                                                                           // 3612\n  write(tail + '|' + padding + this.face() + ' ');                                                                    // 3613\n  write('\\n');                                                                                                        // 3614\n                                                                                                                      // 3615\n  write(color);                                                                                                       // 3616\n  padding = self.tick ? ' ' : '  ';                                                                                   // 3617\n  write(padding + '\"\"  \"\" ');                                                                                         // 3618\n  write('\\n');                                                                                                        // 3619\n                                                                                                                      // 3620\n  this.cursorUp(this.numberOfLines);                                                                                  // 3621\n};                                                                                                                    // 3622\n                                                                                                                      // 3623\n/**                                                                                                                   // 3624\n * Draw nyan cat face.                                                                                                // 3625\n *                                                                                                                    // 3626\n * @return {String}                                                                                                   // 3627\n * @api private                                                                                                       // 3628\n */                                                                                                                   // 3629\n                                                                                                                      // 3630\nNyanCat.prototype.face = function() {                                                                                 // 3631\n  var stats = this.stats;                                                                                             // 3632\n  if (stats.failures) {                                                                                               // 3633\n    return '( x .x)';                                                                                                 // 3634\n  } else if (stats.pending) {                                                                                         // 3635\n    return '( o .o)';                                                                                                 // 3636\n  } else if(stats.passes) {                                                                                           // 3637\n    return '( ^ .^)';                                                                                                 // 3638\n  } else {                                                                                                            // 3639\n    return '( - .-)';                                                                                                 // 3640\n  }                                                                                                                   // 3641\n}                                                                                                                     // 3642\n                                                                                                                      // 3643\n/**                                                                                                                   // 3644\n * Move cursor up `n`.                                                                                                // 3645\n *                                                                                                                    // 3646\n * @param {Number} n                                                                                                  // 3647\n * @api private                                                                                                       // 3648\n */                                                                                                                   // 3649\n                                                                                                                      // 3650\nNyanCat.prototype.cursorUp = function(n) {                                                                            // 3651\n  write('\\u001b[' + n + 'A');                                                                                         // 3652\n};                                                                                                                    // 3653\n                                                                                                                      // 3654\n/**                                                                                                                   // 3655\n * Move cursor down `n`.                                                                                              // 3656\n *                                                                                                                    // 3657\n * @param {Number} n                                                                                                  // 3658\n * @api private                                                                                                       // 3659\n */                                                                                                                   // 3660\n                                                                                                                      // 3661\nNyanCat.prototype.cursorDown = function(n) {                                                                          // 3662\n  write('\\u001b[' + n + 'B');                                                                                         // 3663\n};                                                                                                                    // 3664\n                                                                                                                      // 3665\n/**                                                                                                                   // 3666\n * Generate rainbow colors.                                                                                           // 3667\n *                                                                                                                    // 3668\n * @return {Array}                                                                                                    // 3669\n * @api private                                                                                                       // 3670\n */                                                                                                                   // 3671\n                                                                                                                      // 3672\nNyanCat.prototype.generateColors = function(){                                                                        // 3673\n  var colors = [];                                                                                                    // 3674\n                                                                                                                      // 3675\n  for (var i = 0; i < (6 * 7); i++) {                                                                                 // 3676\n    var pi3 = Math.floor(Math.PI / 3);                                                                                // 3677\n    var n = (i * (1.0 / 6));                                                                                          // 3678\n    var r = Math.floor(3 * Math.sin(n) + 3);                                                                          // 3679\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);                                                                // 3680\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);                                                                // 3681\n    colors.push(36 * r + 6 * g + b + 16);                                                                             // 3682\n  }                                                                                                                   // 3683\n                                                                                                                      // 3684\n  return colors;                                                                                                      // 3685\n};                                                                                                                    // 3686\n                                                                                                                      // 3687\n/**                                                                                                                   // 3688\n * Apply rainbow to the given `str`.                                                                                  // 3689\n *                                                                                                                    // 3690\n * @param {String} str                                                                                                // 3691\n * @return {String}                                                                                                   // 3692\n * @api private                                                                                                       // 3693\n */                                                                                                                   // 3694\n                                                                                                                      // 3695\nNyanCat.prototype.rainbowify = function(str){                                                                         // 3696\n  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];                                        // 3697\n  this.colorIndex += 1;                                                                                               // 3698\n  return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';                                                            // 3699\n};                                                                                                                    // 3700\n                                                                                                                      // 3701\n/**                                                                                                                   // 3702\n * Stdout helper.                                                                                                     // 3703\n */                                                                                                                   // 3704\n                                                                                                                      // 3705\nfunction write(string) {                                                                                              // 3706\n  process.stdout.write(string);                                                                                       // 3707\n}                                                                                                                     // 3708\n                                                                                                                      // 3709\n/**                                                                                                                   // 3710\n * Inherit from `Base.prototype`.                                                                                     // 3711\n */                                                                                                                   // 3712\n                                                                                                                      // 3713\nfunction F(){};                                                                                                       // 3714\nF.prototype = Base.prototype;                                                                                         // 3715\nNyanCat.prototype = new F;                                                                                            // 3716\nNyanCat.prototype.constructor = NyanCat;                                                                              // 3717\n                                                                                                                      // 3718\n                                                                                                                      // 3719\n}); // module: reporters/nyan.js                                                                                      // 3720\n                                                                                                                      // 3721\nrequire.register(\"reporters/progress.js\", function(module, exports, require){                                         // 3722\n                                                                                                                      // 3723\n/**                                                                                                                   // 3724\n * Module dependencies.                                                                                               // 3725\n */                                                                                                                   // 3726\n                                                                                                                      // 3727\nvar Base = require('./base')                                                                                          // 3728\n  , cursor = Base.cursor                                                                                              // 3729\n  , color = Base.color;                                                                                               // 3730\n                                                                                                                      // 3731\n/**                                                                                                                   // 3732\n * Expose `Progress`.                                                                                                 // 3733\n */                                                                                                                   // 3734\n                                                                                                                      // 3735\nexports = module.exports = Progress;                                                                                  // 3736\n                                                                                                                      // 3737\n/**                                                                                                                   // 3738\n * General progress bar color.                                                                                        // 3739\n */                                                                                                                   // 3740\n                                                                                                                      // 3741\nBase.colors.progress = 90;                                                                                            // 3742\n                                                                                                                      // 3743\n/**                                                                                                                   // 3744\n * Initialize a new `Progress` bar test reporter.                                                                     // 3745\n *                                                                                                                    // 3746\n * @param {Runner} runner                                                                                             // 3747\n * @param {Object} options                                                                                            // 3748\n * @api public                                                                                                        // 3749\n */                                                                                                                   // 3750\n                                                                                                                      // 3751\nfunction Progress(runner, options) {                                                                                  // 3752\n  Base.call(this, runner);                                                                                            // 3753\n                                                                                                                      // 3754\n  var self = this                                                                                                     // 3755\n    , options = options || {}                                                                                         // 3756\n    , stats = this.stats                                                                                              // 3757\n    , width = Base.window.width * .50 | 0                                                                             // 3758\n    , total = runner.total                                                                                            // 3759\n    , complete = 0                                                                                                    // 3760\n    , max = Math.max;                                                                                                 // 3761\n                                                                                                                      // 3762\n  // default chars                                                                                                    // 3763\n  options.open = options.open || '[';                                                                                 // 3764\n  options.complete = options.complete || '▬';                                                                         // 3765\n  options.incomplete = options.incomplete || Base.symbols.dot;                                                        // 3766\n  options.close = options.close || ']';                                                                               // 3767\n  options.verbose = false;                                                                                            // 3768\n                                                                                                                      // 3769\n  // tests started                                                                                                    // 3770\n  runner.on('start', function(){                                                                                      // 3771\n    console.log();                                                                                                    // 3772\n    cursor.hide();                                                                                                    // 3773\n  });                                                                                                                 // 3774\n                                                                                                                      // 3775\n  // tests complete                                                                                                   // 3776\n  runner.on('test end', function(){                                                                                   // 3777\n    complete++;                                                                                                       // 3778\n    var incomplete = total - complete                                                                                 // 3779\n      , percent = complete / total                                                                                    // 3780\n      , n = width * percent | 0                                                                                       // 3781\n      , i = width - n;                                                                                                // 3782\n                                                                                                                      // 3783\n    cursor.CR();                                                                                                      // 3784\n    process.stdout.write('\\u001b[J');                                                                                 // 3785\n    process.stdout.write(color('progress', '  ' + options.open));                                                     // 3786\n    process.stdout.write(Array(n).join(options.complete));                                                            // 3787\n    process.stdout.write(Array(i).join(options.incomplete));                                                          // 3788\n    process.stdout.write(color('progress', options.close));                                                           // 3789\n    if (options.verbose) {                                                                                            // 3790\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));                                       // 3791\n    }                                                                                                                 // 3792\n  });                                                                                                                 // 3793\n                                                                                                                      // 3794\n  // tests are complete, output some stats                                                                            // 3795\n  // and the failures if any                                                                                          // 3796\n  runner.on('end', function(){                                                                                        // 3797\n    cursor.show();                                                                                                    // 3798\n    console.log();                                                                                                    // 3799\n    self.epilogue();                                                                                                  // 3800\n  });                                                                                                                 // 3801\n}                                                                                                                     // 3802\n                                                                                                                      // 3803\n/**                                                                                                                   // 3804\n * Inherit from `Base.prototype`.                                                                                     // 3805\n */                                                                                                                   // 3806\n                                                                                                                      // 3807\nfunction F(){};                                                                                                       // 3808\nF.prototype = Base.prototype;                                                                                         // 3809\nProgress.prototype = new F;                                                                                           // 3810\nProgress.prototype.constructor = Progress;                                                                            // 3811\n                                                                                                                      // 3812\n                                                                                                                      // 3813\n}); // module: reporters/progress.js                                                                                  // 3814\n                                                                                                                      // 3815\nrequire.register(\"reporters/spec.js\", function(module, exports, require){                                             // 3816\n                                                                                                                      // 3817\n/**                                                                                                                   // 3818\n * Module dependencies.                                                                                               // 3819\n */                                                                                                                   // 3820\n                                                                                                                      // 3821\nvar Base = require('./base')                                                                                          // 3822\n  , cursor = Base.cursor                                                                                              // 3823\n  , color = Base.color;                                                                                               // 3824\n                                                                                                                      // 3825\n/**                                                                                                                   // 3826\n * Expose `Spec`.                                                                                                     // 3827\n */                                                                                                                   // 3828\n                                                                                                                      // 3829\nexports = module.exports = Spec;                                                                                      // 3830\n                                                                                                                      // 3831\n/**                                                                                                                   // 3832\n * Initialize a new `Spec` test reporter.                                                                             // 3833\n *                                                                                                                    // 3834\n * @param {Runner} runner                                                                                             // 3835\n * @api public                                                                                                        // 3836\n */                                                                                                                   // 3837\n                                                                                                                      // 3838\nfunction Spec(runner) {                                                                                               // 3839\n  Base.call(this, runner);                                                                                            // 3840\n                                                                                                                      // 3841\n  var self = this                                                                                                     // 3842\n    , stats = this.stats                                                                                              // 3843\n    , indents = 0                                                                                                     // 3844\n    , n = 0;                                                                                                          // 3845\n                                                                                                                      // 3846\n  function indent() {                                                                                                 // 3847\n    return Array(indents).join('  ')                                                                                  // 3848\n  }                                                                                                                   // 3849\n                                                                                                                      // 3850\n  runner.on('start', function(){                                                                                      // 3851\n    console.log();                                                                                                    // 3852\n  });                                                                                                                 // 3853\n                                                                                                                      // 3854\n  runner.on('suite', function(suite){                                                                                 // 3855\n    ++indents;                                                                                                        // 3856\n    console.log(color('suite', '%s%s'), indent(), suite.title);                                                       // 3857\n  });                                                                                                                 // 3858\n                                                                                                                      // 3859\n  runner.on('suite end', function(suite){                                                                             // 3860\n    --indents;                                                                                                        // 3861\n    if (1 == indents) console.log();                                                                                  // 3862\n  });                                                                                                                 // 3863\n                                                                                                                      // 3864\n  runner.on('pending', function(test){                                                                                // 3865\n    var fmt = indent() + color('pending', '  - %s');                                                                  // 3866\n    console.log(fmt, test.title);                                                                                     // 3867\n  });                                                                                                                 // 3868\n                                                                                                                      // 3869\n  runner.on('pass', function(test){                                                                                   // 3870\n    if ('fast' == test.speed) {                                                                                       // 3871\n      var fmt = indent()                                                                                              // 3872\n        + color('checkmark', '  ' + Base.symbols.ok)                                                                  // 3873\n        + color('pass', ' %s ');                                                                                      // 3874\n      cursor.CR();                                                                                                    // 3875\n      console.log(fmt, test.title);                                                                                   // 3876\n    } else {                                                                                                          // 3877\n      var fmt = indent()                                                                                              // 3878\n        + color('checkmark', '  ' + Base.symbols.ok)                                                                  // 3879\n        + color('pass', ' %s ')                                                                                       // 3880\n        + color(test.speed, '(%dms)');                                                                                // 3881\n      cursor.CR();                                                                                                    // 3882\n      console.log(fmt, test.title, test.duration);                                                                    // 3883\n    }                                                                                                                 // 3884\n  });                                                                                                                 // 3885\n                                                                                                                      // 3886\n  runner.on('fail', function(test, err){                                                                              // 3887\n    cursor.CR();                                                                                                      // 3888\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);                                               // 3889\n  });                                                                                                                 // 3890\n                                                                                                                      // 3891\n  runner.on('end', self.epilogue.bind(self));                                                                         // 3892\n}                                                                                                                     // 3893\n                                                                                                                      // 3894\n/**                                                                                                                   // 3895\n * Inherit from `Base.prototype`.                                                                                     // 3896\n */                                                                                                                   // 3897\n                                                                                                                      // 3898\nfunction F(){};                                                                                                       // 3899\nF.prototype = Base.prototype;                                                                                         // 3900\nSpec.prototype = new F;                                                                                               // 3901\nSpec.prototype.constructor = Spec;                                                                                    // 3902\n                                                                                                                      // 3903\n                                                                                                                      // 3904\n}); // module: reporters/spec.js                                                                                      // 3905\n                                                                                                                      // 3906\nrequire.register(\"reporters/tap.js\", function(module, exports, require){                                              // 3907\n                                                                                                                      // 3908\n/**                                                                                                                   // 3909\n * Module dependencies.                                                                                               // 3910\n */                                                                                                                   // 3911\n                                                                                                                      // 3912\nvar Base = require('./base')                                                                                          // 3913\n  , cursor = Base.cursor                                                                                              // 3914\n  , color = Base.color;                                                                                               // 3915\n                                                                                                                      // 3916\n/**                                                                                                                   // 3917\n * Expose `TAP`.                                                                                                      // 3918\n */                                                                                                                   // 3919\n                                                                                                                      // 3920\nexports = module.exports = TAP;                                                                                       // 3921\n                                                                                                                      // 3922\n/**                                                                                                                   // 3923\n * Initialize a new `TAP` reporter.                                                                                   // 3924\n *                                                                                                                    // 3925\n * @param {Runner} runner                                                                                             // 3926\n * @api public                                                                                                        // 3927\n */                                                                                                                   // 3928\n                                                                                                                      // 3929\nfunction TAP(runner) {                                                                                                // 3930\n  Base.call(this, runner);                                                                                            // 3931\n                                                                                                                      // 3932\n  var self = this                                                                                                     // 3933\n    , stats = this.stats                                                                                              // 3934\n    , n = 1                                                                                                           // 3935\n    , passes = 0                                                                                                      // 3936\n    , failures = 0;                                                                                                   // 3937\n                                                                                                                      // 3938\n  runner.on('start', function(){                                                                                      // 3939\n    var total = runner.grepTotal(runner.suite);                                                                       // 3940\n    console.log('%d..%d', 1, total);                                                                                  // 3941\n  });                                                                                                                 // 3942\n                                                                                                                      // 3943\n  runner.on('test end', function(){                                                                                   // 3944\n    ++n;                                                                                                              // 3945\n  });                                                                                                                 // 3946\n                                                                                                                      // 3947\n  runner.on('pending', function(test){                                                                                // 3948\n    console.log('ok %d %s # SKIP -', n, title(test));                                                                 // 3949\n  });                                                                                                                 // 3950\n                                                                                                                      // 3951\n  runner.on('pass', function(test){                                                                                   // 3952\n    passes++;                                                                                                         // 3953\n    console.log('ok %d %s', n, title(test));                                                                          // 3954\n  });                                                                                                                 // 3955\n                                                                                                                      // 3956\n  runner.on('fail', function(test, err){                                                                              // 3957\n    failures++;                                                                                                       // 3958\n    console.log('not ok %d %s', n, title(test));                                                                      // 3959\n    if (err.stack) console.log(err.stack.replace(/^/gm, '  '));                                                       // 3960\n  });                                                                                                                 // 3961\n                                                                                                                      // 3962\n  runner.on('end', function(){                                                                                        // 3963\n    console.log('# tests ' + (passes + failures));                                                                    // 3964\n    console.log('# pass ' + passes);                                                                                  // 3965\n    console.log('# fail ' + failures);                                                                                // 3966\n  });                                                                                                                 // 3967\n}                                                                                                                     // 3968\n                                                                                                                      // 3969\n/**                                                                                                                   // 3970\n * Return a TAP-safe title of `test`                                                                                  // 3971\n *                                                                                                                    // 3972\n * @param {Object} test                                                                                               // 3973\n * @return {String}                                                                                                   // 3974\n * @api private                                                                                                       // 3975\n */                                                                                                                   // 3976\n                                                                                                                      // 3977\nfunction title(test) {                                                                                                // 3978\n  return test.fullTitle().replace(/#/g, '');                                                                          // 3979\n}                                                                                                                     // 3980\n                                                                                                                      // 3981\n}); // module: reporters/tap.js                                                                                       // 3982\n                                                                                                                      // 3983\nrequire.register(\"reporters/xunit.js\", function(module, exports, require){                                            // 3984\n                                                                                                                      // 3985\n/**                                                                                                                   // 3986\n * Module dependencies.                                                                                               // 3987\n */                                                                                                                   // 3988\n                                                                                                                      // 3989\nvar Base = require('./base')                                                                                          // 3990\n  , utils = require('../utils')                                                                                       // 3991\n  , escape = utils.escape;                                                                                            // 3992\n                                                                                                                      // 3993\n/**                                                                                                                   // 3994\n * Save timer references to avoid Sinon interfering (see GH-237).                                                     // 3995\n */                                                                                                                   // 3996\n                                                                                                                      // 3997\nvar Date = global.Date                                                                                                // 3998\n  , setTimeout = global.setTimeout                                                                                    // 3999\n  , setInterval = global.setInterval                                                                                  // 4000\n  , clearTimeout = global.clearTimeout                                                                                // 4001\n  , clearInterval = global.clearInterval;                                                                             // 4002\n                                                                                                                      // 4003\n/**                                                                                                                   // 4004\n * Expose `XUnit`.                                                                                                    // 4005\n */                                                                                                                   // 4006\n                                                                                                                      // 4007\nexports = module.exports = XUnit;                                                                                     // 4008\n                                                                                                                      // 4009\n/**                                                                                                                   // 4010\n * Initialize a new `XUnit` reporter.                                                                                 // 4011\n *                                                                                                                    // 4012\n * @param {Runner} runner                                                                                             // 4013\n * @api public                                                                                                        // 4014\n */                                                                                                                   // 4015\n                                                                                                                      // 4016\nfunction XUnit(runner) {                                                                                              // 4017\n  Base.call(this, runner);                                                                                            // 4018\n  var stats = this.stats                                                                                              // 4019\n    , tests = []                                                                                                      // 4020\n    , self = this;                                                                                                    // 4021\n                                                                                                                      // 4022\n  runner.on('pending', function(test){                                                                                // 4023\n    tests.push(test);                                                                                                 // 4024\n  });                                                                                                                 // 4025\n                                                                                                                      // 4026\n  runner.on('pass', function(test){                                                                                   // 4027\n    tests.push(test);                                                                                                 // 4028\n  });                                                                                                                 // 4029\n                                                                                                                      // 4030\n  runner.on('fail', function(test){                                                                                   // 4031\n    tests.push(test);                                                                                                 // 4032\n  });                                                                                                                 // 4033\n                                                                                                                      // 4034\n  runner.on('end', function(){                                                                                        // 4035\n    console.log(tag('testsuite', {                                                                                    // 4036\n        name: 'Mocha Tests'                                                                                           // 4037\n      , tests: stats.tests                                                                                            // 4038\n      , failures: stats.failures                                                                                      // 4039\n      , errors: stats.failures                                                                                        // 4040\n      , skipped: stats.tests - stats.failures - stats.passes                                                          // 4041\n      , timestamp: (new Date).toUTCString()                                                                           // 4042\n      , time: (stats.duration / 1000) || 0                                                                            // 4043\n    }, false));                                                                                                       // 4044\n                                                                                                                      // 4045\n    tests.forEach(test);                                                                                              // 4046\n    console.log('</testsuite>');                                                                                      // 4047\n  });                                                                                                                 // 4048\n}                                                                                                                     // 4049\n                                                                                                                      // 4050\n/**                                                                                                                   // 4051\n * Inherit from `Base.prototype`.                                                                                     // 4052\n */                                                                                                                   // 4053\n                                                                                                                      // 4054\nfunction F(){};                                                                                                       // 4055\nF.prototype = Base.prototype;                                                                                         // 4056\nXUnit.prototype = new F;                                                                                              // 4057\nXUnit.prototype.constructor = XUnit;                                                                                  // 4058\n                                                                                                                      // 4059\n                                                                                                                      // 4060\n/**                                                                                                                   // 4061\n * Output tag for the given `test.`                                                                                   // 4062\n */                                                                                                                   // 4063\n                                                                                                                      // 4064\nfunction test(test) {                                                                                                 // 4065\n  var attrs = {                                                                                                       // 4066\n      classname: test.parent.fullTitle()                                                                              // 4067\n    , name: test.title                                                                                                // 4068\n    , time: (test.duration / 1000) || 0                                                                               // 4069\n  };                                                                                                                  // 4070\n                                                                                                                      // 4071\n  if ('failed' == test.state) {                                                                                       // 4072\n    var err = test.err;                                                                                               // 4073\n    attrs.message = escape(err.message);                                                                              // 4074\n    console.log(tag('testcase', attrs, false, tag('failure', attrs, false, cdata(err.stack))));                       // 4075\n  } else if (test.pending) {                                                                                          // 4076\n    console.log(tag('testcase', attrs, false, tag('skipped', {}, true)));                                             // 4077\n  } else {                                                                                                            // 4078\n    console.log(tag('testcase', attrs, true) );                                                                       // 4079\n  }                                                                                                                   // 4080\n}                                                                                                                     // 4081\n                                                                                                                      // 4082\n/**                                                                                                                   // 4083\n * HTML tag helper.                                                                                                   // 4084\n */                                                                                                                   // 4085\n                                                                                                                      // 4086\nfunction tag(name, attrs, close, content) {                                                                           // 4087\n  var end = close ? '/>' : '>'                                                                                        // 4088\n    , pairs = []                                                                                                      // 4089\n    , tag;                                                                                                            // 4090\n                                                                                                                      // 4091\n  for (var key in attrs) {                                                                                            // 4092\n    pairs.push(key + '=\"' + escape(attrs[key]) + '\"');                                                                // 4093\n  }                                                                                                                   // 4094\n                                                                                                                      // 4095\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;                                               // 4096\n  if (content) tag += content + '</' + name + end;                                                                    // 4097\n  return tag;                                                                                                         // 4098\n}                                                                                                                     // 4099\n                                                                                                                      // 4100\n/**                                                                                                                   // 4101\n * Return cdata escaped CDATA `str`.                                                                                  // 4102\n */                                                                                                                   // 4103\n                                                                                                                      // 4104\nfunction cdata(str) {                                                                                                 // 4105\n  return '<![CDATA[' + escape(str) + ']]>';                                                                           // 4106\n}                                                                                                                     // 4107\n                                                                                                                      // 4108\n}); // module: reporters/xunit.js                                                                                     // 4109\n                                                                                                                      // 4110\nrequire.register(\"runnable.js\", function(module, exports, require){                                                   // 4111\n                                                                                                                      // 4112\n/**                                                                                                                   // 4113\n * Module dependencies.                                                                                               // 4114\n */                                                                                                                   // 4115\n                                                                                                                      // 4116\nvar EventEmitter = require('browser/events').EventEmitter                                                             // 4117\n  , debug = require('browser/debug')('mocha:runnable')                                                                // 4118\n  , milliseconds = require('./ms');                                                                                   // 4119\n                                                                                                                      // 4120\n/**                                                                                                                   // 4121\n * Save timer references to avoid Sinon interfering (see GH-237).                                                     // 4122\n */                                                                                                                   // 4123\n                                                                                                                      // 4124\nvar Date = global.Date                                                                                                // 4125\n  , setTimeout = global.setTimeout                                                                                    // 4126\n  , setInterval = global.setInterval                                                                                  // 4127\n  , clearTimeout = global.clearTimeout                                                                                // 4128\n  , clearInterval = global.clearInterval;                                                                             // 4129\n                                                                                                                      // 4130\n/**                                                                                                                   // 4131\n * Object#toString().                                                                                                 // 4132\n */                                                                                                                   // 4133\n                                                                                                                      // 4134\nvar toString = Object.prototype.toString;                                                                             // 4135\n                                                                                                                      // 4136\n/**                                                                                                                   // 4137\n * Expose `Runnable`.                                                                                                 // 4138\n */                                                                                                                   // 4139\n                                                                                                                      // 4140\nmodule.exports = Runnable;                                                                                            // 4141\n                                                                                                                      // 4142\n/**                                                                                                                   // 4143\n * Initialize a new `Runnable` with the given `title` and callback `fn`.                                              // 4144\n *                                                                                                                    // 4145\n * @param {String} title                                                                                              // 4146\n * @param {Function} fn                                                                                               // 4147\n * @api private                                                                                                       // 4148\n */                                                                                                                   // 4149\n                                                                                                                      // 4150\nfunction Runnable(title, fn) {                                                                                        // 4151\n  this.title = title;                                                                                                 // 4152\n  this.fn = fn;                                                                                                       // 4153\n  this.async = fn && fn.length;                                                                                       // 4154\n  this.sync = ! this.async;                                                                                           // 4155\n  this._timeout = 2000;                                                                                               // 4156\n  this._slow = 75;                                                                                                    // 4157\n  this.timedOut = false;                                                                                              // 4158\n}                                                                                                                     // 4159\n                                                                                                                      // 4160\n/**                                                                                                                   // 4161\n * Inherit from `EventEmitter.prototype`.                                                                             // 4162\n */                                                                                                                   // 4163\n                                                                                                                      // 4164\nfunction F(){};                                                                                                       // 4165\nF.prototype = EventEmitter.prototype;                                                                                 // 4166\nRunnable.prototype = new F;                                                                                           // 4167\nRunnable.prototype.constructor = Runnable;                                                                            // 4168\n                                                                                                                      // 4169\n                                                                                                                      // 4170\n/**                                                                                                                   // 4171\n * Set & get timeout `ms`.                                                                                            // 4172\n *                                                                                                                    // 4173\n * @param {Number|String} ms                                                                                          // 4174\n * @return {Runnable|Number} ms or self                                                                               // 4175\n * @api private                                                                                                       // 4176\n */                                                                                                                   // 4177\n                                                                                                                      // 4178\nRunnable.prototype.timeout = function(ms){                                                                            // 4179\n  if (0 == arguments.length) return this._timeout;                                                                    // 4180\n  if ('string' == typeof ms) ms = milliseconds(ms);                                                                   // 4181\n  debug('timeout %d', ms);                                                                                            // 4182\n  this._timeout = ms;                                                                                                 // 4183\n  if (this.timer) this.resetTimeout();                                                                                // 4184\n  return this;                                                                                                        // 4185\n};                                                                                                                    // 4186\n                                                                                                                      // 4187\n/**                                                                                                                   // 4188\n * Set & get slow `ms`.                                                                                               // 4189\n *                                                                                                                    // 4190\n * @param {Number|String} ms                                                                                          // 4191\n * @return {Runnable|Number} ms or self                                                                               // 4192\n * @api private                                                                                                       // 4193\n */                                                                                                                   // 4194\n                                                                                                                      // 4195\nRunnable.prototype.slow = function(ms){                                                                               // 4196\n  if (0 === arguments.length) return this._slow;                                                                      // 4197\n  if ('string' == typeof ms) ms = milliseconds(ms);                                                                   // 4198\n  debug('timeout %d', ms);                                                                                            // 4199\n  this._slow = ms;                                                                                                    // 4200\n  return this;                                                                                                        // 4201\n};                                                                                                                    // 4202\n                                                                                                                      // 4203\n/**                                                                                                                   // 4204\n * Return the full title generated by recursively                                                                     // 4205\n * concatenating the parent's full title.                                                                             // 4206\n *                                                                                                                    // 4207\n * @return {String}                                                                                                   // 4208\n * @api public                                                                                                        // 4209\n */                                                                                                                   // 4210\n                                                                                                                      // 4211\nRunnable.prototype.fullTitle = function(){                                                                            // 4212\n  return this.parent.fullTitle() + ' ' + this.title;                                                                  // 4213\n};                                                                                                                    // 4214\n                                                                                                                      // 4215\n/**                                                                                                                   // 4216\n * Clear the timeout.                                                                                                 // 4217\n *                                                                                                                    // 4218\n * @api private                                                                                                       // 4219\n */                                                                                                                   // 4220\n                                                                                                                      // 4221\nRunnable.prototype.clearTimeout = function(){                                                                         // 4222\n  clearTimeout(this.timer);                                                                                           // 4223\n};                                                                                                                    // 4224\n                                                                                                                      // 4225\n/**                                                                                                                   // 4226\n * Inspect the runnable void of private properties.                                                                   // 4227\n *                                                                                                                    // 4228\n * @return {String}                                                                                                   // 4229\n * @api private                                                                                                       // 4230\n */                                                                                                                   // 4231\n                                                                                                                      // 4232\nRunnable.prototype.inspect = function(){                                                                              // 4233\n  return JSON.stringify(this, function(key, val){                                                                     // 4234\n    if ('_' == key[0]) return;                                                                                        // 4235\n    if ('parent' == key) return '#<Suite>';                                                                           // 4236\n    if ('ctx' == key) return '#<Context>';                                                                            // 4237\n    return val;                                                                                                       // 4238\n  }, 2);                                                                                                              // 4239\n};                                                                                                                    // 4240\n                                                                                                                      // 4241\n/**                                                                                                                   // 4242\n * Reset the timeout.                                                                                                 // 4243\n *                                                                                                                    // 4244\n * @api private                                                                                                       // 4245\n */                                                                                                                   // 4246\n                                                                                                                      // 4247\nRunnable.prototype.resetTimeout = function(){                                                                         // 4248\n  var self = this;                                                                                                    // 4249\n  var ms = this.timeout() || 1e9;                                                                                     // 4250\n                                                                                                                      // 4251\n  this.clearTimeout();                                                                                                // 4252\n  this.timer = setTimeout(function(){                                                                                 // 4253\n    self.callback(new Error('timeout of ' + ms + 'ms exceeded'));                                                     // 4254\n    self.timedOut = true;                                                                                             // 4255\n  }, ms);                                                                                                             // 4256\n};                                                                                                                    // 4257\n                                                                                                                      // 4258\n/**                                                                                                                   // 4259\n * Whitelist these globals for this test run                                                                          // 4260\n *                                                                                                                    // 4261\n * @api private                                                                                                       // 4262\n */                                                                                                                   // 4263\nRunnable.prototype.globals = function(arr){                                                                           // 4264\n  var self = this;                                                                                                    // 4265\n  this._allowedGlobals = arr;                                                                                         // 4266\n};                                                                                                                    // 4267\n                                                                                                                      // 4268\n/**                                                                                                                   // 4269\n * Run the test and invoke `fn(err)`.                                                                                 // 4270\n *                                                                                                                    // 4271\n * @param {Function} fn                                                                                               // 4272\n * @api private                                                                                                       // 4273\n */                                                                                                                   // 4274\n                                                                                                                      // 4275\nRunnable.prototype.run = function(fn){                                                                                // 4276\n  var self = this                                                                                                     // 4277\n    , ms = this.timeout()                                                                                             // 4278\n    , start = new Date                                                                                                // 4279\n    , ctx = this.ctx                                                                                                  // 4280\n    , finished                                                                                                        // 4281\n    , emitted;                                                                                                        // 4282\n                                                                                                                      // 4283\n  if (ctx) ctx.runnable(this);                                                                                        // 4284\n                                                                                                                      // 4285\n  // timeout                                                                                                          // 4286\n  if (this.async) {                                                                                                   // 4287\n    if (ms) {                                                                                                         // 4288\n      this.timer = setTimeout(function(){                                                                             // 4289\n        done(new Error('timeout of ' + ms + 'ms exceeded'));                                                          // 4290\n        self.timedOut = true;                                                                                         // 4291\n      }, ms);                                                                                                         // 4292\n    }                                                                                                                 // 4293\n  }                                                                                                                   // 4294\n                                                                                                                      // 4295\n  // called multiple times                                                                                            // 4296\n  function multiple(err) {                                                                                            // 4297\n    if (emitted) return;                                                                                              // 4298\n    emitted = true;                                                                                                   // 4299\n    self.emit('error', err || new Error('done() called multiple times'));                                             // 4300\n  }                                                                                                                   // 4301\n                                                                                                                      // 4302\n  // finished                                                                                                         // 4303\n  function done(err) {                                                                                                // 4304\n    if (self.timedOut) return;                                                                                        // 4305\n    if (finished) return multiple(err);                                                                               // 4306\n    self.clearTimeout();                                                                                              // 4307\n    self.duration = new Date - start;                                                                                 // 4308\n    finished = true;                                                                                                  // 4309\n    fn(err);                                                                                                          // 4310\n  }                                                                                                                   // 4311\n                                                                                                                      // 4312\n  // for .resetTimeout()                                                                                              // 4313\n  this.callback = done;                                                                                               // 4314\n                                                                                                                      // 4315\n  // async                                                                                                            // 4316\n  if (this.async) {                                                                                                   // 4317\n    try {                                                                                                             // 4318\n      this.fn.call(ctx, function(err){                                                                                // 4319\n        if (err instanceof Error || toString.call(err) === \"[object Error]\") return done(err);                        // 4320\n        if (null != err) return done(new Error('done() invoked with non-Error: ' + err));                             // 4321\n        done();                                                                                                       // 4322\n      });                                                                                                             // 4323\n    } catch (err) {                                                                                                   // 4324\n      done(err);                                                                                                      // 4325\n    }                                                                                                                 // 4326\n    return;                                                                                                           // 4327\n  }                                                                                                                   // 4328\n                                                                                                                      // 4329\n  if (this.asyncOnly) {                                                                                               // 4330\n    return done(new Error('--async-only option in use without declaring `done()`'));                                  // 4331\n  }                                                                                                                   // 4332\n                                                                                                                      // 4333\n  // sync                                                                                                             // 4334\n  try {                                                                                                               // 4335\n    if (!this.pending) this.fn.call(ctx);                                                                             // 4336\n    this.duration = new Date - start;                                                                                 // 4337\n    fn();                                                                                                             // 4338\n  } catch (err) {                                                                                                     // 4339\n    fn(err);                                                                                                          // 4340\n  }                                                                                                                   // 4341\n};                                                                                                                    // 4342\n                                                                                                                      // 4343\n}); // module: runnable.js                                                                                            // 4344\n                                                                                                                      // 4345\nrequire.register(\"runner.js\", function(module, exports, require){                                                     // 4346\n/**                                                                                                                   // 4347\n * Module dependencies.                                                                                               // 4348\n */                                                                                                                   // 4349\n                                                                                                                      // 4350\nvar EventEmitter = require('browser/events').EventEmitter                                                             // 4351\n  , debug = require('browser/debug')('mocha:runner')                                                                  // 4352\n  , Test = require('./test')                                                                                          // 4353\n  , utils = require('./utils')                                                                                        // 4354\n  , filter = utils.filter                                                                                             // 4355\n  , keys = utils.keys;                                                                                                // 4356\n                                                                                                                      // 4357\n/**                                                                                                                   // 4358\n * Non-enumerable globals.                                                                                            // 4359\n */                                                                                                                   // 4360\n                                                                                                                      // 4361\nvar globals = [                                                                                                       // 4362\n  'setTimeout',                                                                                                       // 4363\n  'clearTimeout',                                                                                                     // 4364\n  'setInterval',                                                                                                      // 4365\n  'clearInterval',                                                                                                    // 4366\n  'XMLHttpRequest',                                                                                                   // 4367\n  'Date'                                                                                                              // 4368\n];                                                                                                                    // 4369\n                                                                                                                      // 4370\n/**                                                                                                                   // 4371\n * Expose `Runner`.                                                                                                   // 4372\n */                                                                                                                   // 4373\n                                                                                                                      // 4374\nmodule.exports = Runner;                                                                                              // 4375\n                                                                                                                      // 4376\n/**                                                                                                                   // 4377\n * Initialize a `Runner` for the given `suite`.                                                                       // 4378\n *                                                                                                                    // 4379\n * Events:                                                                                                            // 4380\n *                                                                                                                    // 4381\n *   - `start`  execution started                                                                                     // 4382\n *   - `end`  execution complete                                                                                      // 4383\n *   - `suite`  (suite) test suite execution started                                                                  // 4384\n *   - `suite end`  (suite) all tests (and sub-suites) have finished                                                  // 4385\n *   - `test`  (test) test execution started                                                                          // 4386\n *   - `test end`  (test) test completed                                                                              // 4387\n *   - `hook`  (hook) hook execution started                                                                          // 4388\n *   - `hook end`  (hook) hook complete                                                                               // 4389\n *   - `pass`  (test) test passed                                                                                     // 4390\n *   - `fail`  (test, err) test failed                                                                                // 4391\n *   - `pending`  (test) test pending                                                                                 // 4392\n *                                                                                                                    // 4393\n * @api public                                                                                                        // 4394\n */                                                                                                                   // 4395\n                                                                                                                      // 4396\nfunction Runner(suite) {                                                                                              // 4397\n  var self = this;                                                                                                    // 4398\n  this._globals = [];                                                                                                 // 4399\n  this._abort = false;                                                                                                // 4400\n  this.suite = suite;                                                                                                 // 4401\n  this.total = suite.total();                                                                                         // 4402\n  this.failures = 0;                                                                                                  // 4403\n  this.on('test end', function(test){ self.checkGlobals(test); });                                                    // 4404\n  this.on('hook end', function(hook){ self.checkGlobals(hook); });                                                    // 4405\n  this.grep(/.*/);                                                                                                    // 4406\n  this.globals(this.globalProps().concat(extraGlobals()));                                                            // 4407\n}                                                                                                                     // 4408\n                                                                                                                      // 4409\n/**                                                                                                                   // 4410\n * Wrapper for setImmediate, process.nextTick, or browser polyfill.                                                   // 4411\n *                                                                                                                    // 4412\n * @param {Function} fn                                                                                               // 4413\n * @api private                                                                                                       // 4414\n */                                                                                                                   // 4415\n                                                                                                                      // 4416\nRunner.immediately = global.setImmediate || process.nextTick;                                                         // 4417\n                                                                                                                      // 4418\n/**                                                                                                                   // 4419\n * Inherit from `EventEmitter.prototype`.                                                                             // 4420\n */                                                                                                                   // 4421\n                                                                                                                      // 4422\nfunction F(){};                                                                                                       // 4423\nF.prototype = EventEmitter.prototype;                                                                                 // 4424\nRunner.prototype = new F;                                                                                             // 4425\nRunner.prototype.constructor = Runner;                                                                                // 4426\n                                                                                                                      // 4427\n                                                                                                                      // 4428\n/**                                                                                                                   // 4429\n * Run tests with full titles matching `re`. Updates runner.total                                                     // 4430\n * with number of tests matched.                                                                                      // 4431\n *                                                                                                                    // 4432\n * @param {RegExp} re                                                                                                 // 4433\n * @param {Boolean} invert                                                                                            // 4434\n * @return {Runner} for chaining                                                                                      // 4435\n * @api public                                                                                                        // 4436\n */                                                                                                                   // 4437\n                                                                                                                      // 4438\nRunner.prototype.grep = function(re, invert){                                                                         // 4439\n  debug('grep %s', re);                                                                                               // 4440\n  this._grep = re;                                                                                                    // 4441\n  this._invert = invert;                                                                                              // 4442\n  this.total = this.grepTotal(this.suite);                                                                            // 4443\n  return this;                                                                                                        // 4444\n};                                                                                                                    // 4445\n                                                                                                                      // 4446\n/**                                                                                                                   // 4447\n * Returns the number of tests matching the grep search for the                                                       // 4448\n * given suite.                                                                                                       // 4449\n *                                                                                                                    // 4450\n * @param {Suite} suite                                                                                               // 4451\n * @return {Number}                                                                                                   // 4452\n * @api public                                                                                                        // 4453\n */                                                                                                                   // 4454\n                                                                                                                      // 4455\nRunner.prototype.grepTotal = function(suite) {                                                                        // 4456\n  var self = this;                                                                                                    // 4457\n  var total = 0;                                                                                                      // 4458\n                                                                                                                      // 4459\n  suite.eachTest(function(test){                                                                                      // 4460\n    var match = self._grep.test(test.fullTitle());                                                                    // 4461\n    if (self._invert) match = !match;                                                                                 // 4462\n    if (match) total++;                                                                                               // 4463\n  });                                                                                                                 // 4464\n                                                                                                                      // 4465\n  return total;                                                                                                       // 4466\n};                                                                                                                    // 4467\n                                                                                                                      // 4468\n/**                                                                                                                   // 4469\n * Return a list of global properties.                                                                                // 4470\n *                                                                                                                    // 4471\n * @return {Array}                                                                                                    // 4472\n * @api private                                                                                                       // 4473\n */                                                                                                                   // 4474\n                                                                                                                      // 4475\nRunner.prototype.globalProps = function() {                                                                           // 4476\n  var props = utils.keys(global);                                                                                     // 4477\n                                                                                                                      // 4478\n  // non-enumerables                                                                                                  // 4479\n  for (var i = 0; i < globals.length; ++i) {                                                                          // 4480\n    if (~utils.indexOf(props, globals[i])) continue;                                                                  // 4481\n    props.push(globals[i]);                                                                                           // 4482\n  }                                                                                                                   // 4483\n                                                                                                                      // 4484\n  return props;                                                                                                       // 4485\n};                                                                                                                    // 4486\n                                                                                                                      // 4487\n/**                                                                                                                   // 4488\n * Allow the given `arr` of globals.                                                                                  // 4489\n *                                                                                                                    // 4490\n * @param {Array} arr                                                                                                 // 4491\n * @return {Runner} for chaining                                                                                      // 4492\n * @api public                                                                                                        // 4493\n */                                                                                                                   // 4494\n                                                                                                                      // 4495\nRunner.prototype.globals = function(arr){                                                                             // 4496\n  if (0 == arguments.length) return this._globals;                                                                    // 4497\n  debug('globals %j', arr);                                                                                           // 4498\n  this._globals = this._globals.concat(arr);                                                                          // 4499\n  return this;                                                                                                        // 4500\n};                                                                                                                    // 4501\n                                                                                                                      // 4502\n/**                                                                                                                   // 4503\n * Check for global variable leaks.                                                                                   // 4504\n *                                                                                                                    // 4505\n * @api private                                                                                                       // 4506\n */                                                                                                                   // 4507\n                                                                                                                      // 4508\nRunner.prototype.checkGlobals = function(test){                                                                       // 4509\n  if (this.ignoreLeaks) return;                                                                                       // 4510\n  var ok = this._globals;                                                                                             // 4511\n                                                                                                                      // 4512\n  var globals = this.globalProps();                                                                                   // 4513\n  var isNode = process.kill;                                                                                          // 4514\n  var leaks;                                                                                                          // 4515\n                                                                                                                      // 4516\n  if (test) {                                                                                                         // 4517\n    ok = ok.concat(test._allowedGlobals || []);                                                                       // 4518\n  }                                                                                                                   // 4519\n                                                                                                                      // 4520\n  if(this.prevGlobalsLength == globals.length) return;                                                                // 4521\n  this.prevGlobalsLength = globals.length;                                                                            // 4522\n                                                                                                                      // 4523\n  leaks = filterLeaks(ok, globals);                                                                                   // 4524\n  this._globals = this._globals.concat(leaks);                                                                        // 4525\n                                                                                                                      // 4526\n  if (leaks.length > 1) {                                                                                             // 4527\n    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));                                    // 4528\n  } else if (leaks.length) {                                                                                          // 4529\n    this.fail(test, new Error('global leak detected: ' + leaks[0]));                                                  // 4530\n  }                                                                                                                   // 4531\n};                                                                                                                    // 4532\n                                                                                                                      // 4533\n/**                                                                                                                   // 4534\n * Fail the given `test`.                                                                                             // 4535\n *                                                                                                                    // 4536\n * @param {Test} test                                                                                                 // 4537\n * @param {Error} err                                                                                                 // 4538\n * @api private                                                                                                       // 4539\n */                                                                                                                   // 4540\n                                                                                                                      // 4541\nRunner.prototype.fail = function(test, err){                                                                          // 4542\n  ++this.failures;                                                                                                    // 4543\n  test.state = 'failed';                                                                                              // 4544\n                                                                                                                      // 4545\n  if ('string' == typeof err) {                                                                                       // 4546\n    err = new Error('the string \"' + err + '\" was thrown, throw an Error :)');                                        // 4547\n  }                                                                                                                   // 4548\n                                                                                                                      // 4549\n  this.emit('fail', test, err);                                                                                       // 4550\n};                                                                                                                    // 4551\n                                                                                                                      // 4552\n/**                                                                                                                   // 4553\n * Fail the given `hook` with `err`.                                                                                  // 4554\n *                                                                                                                    // 4555\n * Hook failures work in the following pattern:                                                                       // 4556\n * - If bail, then exit                                                                                               // 4557\n * - Failed `before` hook skips all tests in a suite and subsuites,                                                   // 4558\n *   but jumps to corresponding `after` hook                                                                          // 4559\n * - Failed `before each` hook skips remaining tests in a                                                             // 4560\n *   suite and jumps to corresponding `after each` hook,                                                              // 4561\n *   which is run only once                                                                                           // 4562\n * - Failed `after` hook does not alter                                                                               // 4563\n *   execution order                                                                                                  // 4564\n * - Failed `after each` hook skips remaining tests in a                                                              // 4565\n *   suite and subsuites, but executes other `after each`                                                             // 4566\n *   hooks                                                                                                            // 4567\n *                                                                                                                    // 4568\n * @param {Hook} hook                                                                                                 // 4569\n * @param {Error} err                                                                                                 // 4570\n * @api private                                                                                                       // 4571\n */                                                                                                                   // 4572\n                                                                                                                      // 4573\nRunner.prototype.failHook = function(hook, err){                                                                      // 4574\n  this.fail(hook, err);                                                                                               // 4575\n  if (this.suite.bail()) {                                                                                            // 4576\n    this.emit('end');                                                                                                 // 4577\n  }                                                                                                                   // 4578\n};                                                                                                                    // 4579\n                                                                                                                      // 4580\n/**                                                                                                                   // 4581\n * Run hook `name` callbacks and then invoke `fn()`.                                                                  // 4582\n *                                                                                                                    // 4583\n * @param {String} name                                                                                               // 4584\n * @param {Function} function                                                                                         // 4585\n * @api private                                                                                                       // 4586\n */                                                                                                                   // 4587\n                                                                                                                      // 4588\nRunner.prototype.hook = function(name, fn){                                                                           // 4589\n  var suite = this.suite                                                                                              // 4590\n    , hooks = suite['_' + name]                                                                                       // 4591\n    , self = this                                                                                                     // 4592\n    , timer;                                                                                                          // 4593\n                                                                                                                      // 4594\n  function next(i) {                                                                                                  // 4595\n    var hook = hooks[i];                                                                                              // 4596\n    if (!hook) return fn();                                                                                           // 4597\n    if (self.failures && suite.bail()) return fn();                                                                   // 4598\n    self.currentRunnable = hook;                                                                                      // 4599\n                                                                                                                      // 4600\n    hook.ctx.currentTest = self.test;                                                                                 // 4601\n                                                                                                                      // 4602\n    self.emit('hook', hook);                                                                                          // 4603\n                                                                                                                      // 4604\n    hook.on('error', function(err){                                                                                   // 4605\n      self.failHook(hook, err);                                                                                       // 4606\n    });                                                                                                               // 4607\n                                                                                                                      // 4608\n    hook.run(function(err){                                                                                           // 4609\n      hook.removeAllListeners('error');                                                                               // 4610\n      var testError = hook.error();                                                                                   // 4611\n      if (testError) self.fail(self.test, testError);                                                                 // 4612\n      if (err) {                                                                                                      // 4613\n        self.failHook(hook, err);                                                                                     // 4614\n                                                                                                                      // 4615\n        // stop executing hooks, notify callee of hook err                                                            // 4616\n        return fn(err);                                                                                               // 4617\n      }                                                                                                               // 4618\n      self.emit('hook end', hook);                                                                                    // 4619\n      delete hook.ctx.currentTest;                                                                                    // 4620\n      next(++i);                                                                                                      // 4621\n    });                                                                                                               // 4622\n  }                                                                                                                   // 4623\n                                                                                                                      // 4624\n  Runner.immediately(function(){                                                                                      // 4625\n    next(0);                                                                                                          // 4626\n  });                                                                                                                 // 4627\n};                                                                                                                    // 4628\n                                                                                                                      // 4629\n/**                                                                                                                   // 4630\n * Run hook `name` for the given array of `suites`                                                                    // 4631\n * in order, and callback `fn(err, errSuite)`.                                                                        // 4632\n *                                                                                                                    // 4633\n * @param {String} name                                                                                               // 4634\n * @param {Array} suites                                                                                              // 4635\n * @param {Function} fn                                                                                               // 4636\n * @api private                                                                                                       // 4637\n */                                                                                                                   // 4638\n                                                                                                                      // 4639\nRunner.prototype.hooks = function(name, suites, fn){                                                                  // 4640\n  var self = this                                                                                                     // 4641\n    , orig = this.suite;                                                                                              // 4642\n                                                                                                                      // 4643\n  function next(suite) {                                                                                              // 4644\n    self.suite = suite;                                                                                               // 4645\n                                                                                                                      // 4646\n    if (!suite) {                                                                                                     // 4647\n      self.suite = orig;                                                                                              // 4648\n      return fn();                                                                                                    // 4649\n    }                                                                                                                 // 4650\n                                                                                                                      // 4651\n    self.hook(name, function(err){                                                                                    // 4652\n      if (err) {                                                                                                      // 4653\n        var errSuite = self.suite;                                                                                    // 4654\n        self.suite = orig;                                                                                            // 4655\n        return fn(err, errSuite);                                                                                     // 4656\n      }                                                                                                               // 4657\n                                                                                                                      // 4658\n      next(suites.pop());                                                                                             // 4659\n    });                                                                                                               // 4660\n  }                                                                                                                   // 4661\n                                                                                                                      // 4662\n  next(suites.pop());                                                                                                 // 4663\n};                                                                                                                    // 4664\n                                                                                                                      // 4665\n/**                                                                                                                   // 4666\n * Run hooks from the top level down.                                                                                 // 4667\n *                                                                                                                    // 4668\n * @param {String} name                                                                                               // 4669\n * @param {Function} fn                                                                                               // 4670\n * @api private                                                                                                       // 4671\n */                                                                                                                   // 4672\n                                                                                                                      // 4673\nRunner.prototype.hookUp = function(name, fn){                                                                         // 4674\n  var suites = [this.suite].concat(this.parents()).reverse();                                                         // 4675\n  this.hooks(name, suites, fn);                                                                                       // 4676\n};                                                                                                                    // 4677\n                                                                                                                      // 4678\n/**                                                                                                                   // 4679\n * Run hooks from the bottom up.                                                                                      // 4680\n *                                                                                                                    // 4681\n * @param {String} name                                                                                               // 4682\n * @param {Function} fn                                                                                               // 4683\n * @api private                                                                                                       // 4684\n */                                                                                                                   // 4685\n                                                                                                                      // 4686\nRunner.prototype.hookDown = function(name, fn){                                                                       // 4687\n  var suites = [this.suite].concat(this.parents());                                                                   // 4688\n  this.hooks(name, suites, fn);                                                                                       // 4689\n};                                                                                                                    // 4690\n                                                                                                                      // 4691\n/**                                                                                                                   // 4692\n * Return an array of parent Suites from                                                                              // 4693\n * closest to furthest.                                                                                               // 4694\n *                                                                                                                    // 4695\n * @return {Array}                                                                                                    // 4696\n * @api private                                                                                                       // 4697\n */                                                                                                                   // 4698\n                                                                                                                      // 4699\nRunner.prototype.parents = function(){                                                                                // 4700\n  var suite = this.suite                                                                                              // 4701\n    , suites = [];                                                                                                    // 4702\n  while (suite = suite.parent) suites.push(suite);                                                                    // 4703\n  return suites;                                                                                                      // 4704\n};                                                                                                                    // 4705\n                                                                                                                      // 4706\n/**                                                                                                                   // 4707\n * Run the current test and callback `fn(err)`.                                                                       // 4708\n *                                                                                                                    // 4709\n * @param {Function} fn                                                                                               // 4710\n * @api private                                                                                                       // 4711\n */                                                                                                                   // 4712\n                                                                                                                      // 4713\nRunner.prototype.runTest = function(fn){                                                                              // 4714\n  var test = this.test                                                                                                // 4715\n    , self = this;                                                                                                    // 4716\n                                                                                                                      // 4717\n  if (this.asyncOnly) test.asyncOnly = true;                                                                          // 4718\n                                                                                                                      // 4719\n  try {                                                                                                               // 4720\n    test.on('error', function(err){                                                                                   // 4721\n      self.fail(test, err);                                                                                           // 4722\n    });                                                                                                               // 4723\n    test.run(fn);                                                                                                     // 4724\n  } catch (err) {                                                                                                     // 4725\n    fn(err);                                                                                                          // 4726\n  }                                                                                                                   // 4727\n};                                                                                                                    // 4728\n                                                                                                                      // 4729\n/**                                                                                                                   // 4730\n * Run tests in the given `suite` and invoke                                                                          // 4731\n * the callback `fn()` when complete.                                                                                 // 4732\n *                                                                                                                    // 4733\n * @param {Suite} suite                                                                                               // 4734\n * @param {Function} fn                                                                                               // 4735\n * @api private                                                                                                       // 4736\n */                                                                                                                   // 4737\n                                                                                                                      // 4738\nRunner.prototype.runTests = function(suite, fn){                                                                      // 4739\n  var self = this                                                                                                     // 4740\n    , tests = suite.tests.slice()                                                                                     // 4741\n    , test;                                                                                                           // 4742\n                                                                                                                      // 4743\n                                                                                                                      // 4744\n  function hookErr(err, errSuite, after) {                                                                            // 4745\n    // before/after Each hook for errSuite failed:                                                                    // 4746\n    var orig = self.suite;                                                                                            // 4747\n                                                                                                                      // 4748\n    // for failed 'after each' hook start from errSuite parent,                                                       // 4749\n    // otherwise start from errSuite itself                                                                           // 4750\n    self.suite = after ? errSuite.parent : errSuite;                                                                  // 4751\n                                                                                                                      // 4752\n    if (self.suite) {                                                                                                 // 4753\n      // call hookUp afterEach                                                                                        // 4754\n      self.hookUp('afterEach', function(err2, errSuite2) {                                                            // 4755\n        self.suite = orig;                                                                                            // 4756\n        // some hooks may fail even now                                                                               // 4757\n        if (err2) return hookErr(err2, errSuite2, true);                                                              // 4758\n        // report error suite                                                                                         // 4759\n        fn(errSuite);                                                                                                 // 4760\n      });                                                                                                             // 4761\n    } else {                                                                                                          // 4762\n      // there is no need calling other 'after each' hooks                                                            // 4763\n      self.suite = orig;                                                                                              // 4764\n      fn(errSuite);                                                                                                   // 4765\n    }                                                                                                                 // 4766\n  }                                                                                                                   // 4767\n                                                                                                                      // 4768\n  function next(err, errSuite) {                                                                                      // 4769\n    // if we bail after first err                                                                                     // 4770\n    if (self.failures && suite._bail) return fn();                                                                    // 4771\n                                                                                                                      // 4772\n    if (self._abort) return fn();                                                                                     // 4773\n                                                                                                                      // 4774\n    if (err) return hookErr(err, errSuite, true);                                                                     // 4775\n                                                                                                                      // 4776\n    // next test                                                                                                      // 4777\n    test = tests.shift();                                                                                             // 4778\n                                                                                                                      // 4779\n    // all done                                                                                                       // 4780\n    if (!test) return fn();                                                                                           // 4781\n                                                                                                                      // 4782\n    // grep                                                                                                           // 4783\n    var match = self._grep.test(test.fullTitle());                                                                    // 4784\n    if (self._invert) match = !match;                                                                                 // 4785\n    if (!match) return next();                                                                                        // 4786\n                                                                                                                      // 4787\n    // pending                                                                                                        // 4788\n    if (test.pending) {                                                                                               // 4789\n      self.emit('pending', test);                                                                                     // 4790\n      self.emit('test end', test);                                                                                    // 4791\n      return next();                                                                                                  // 4792\n    }                                                                                                                 // 4793\n                                                                                                                      // 4794\n    // execute test and hook(s)                                                                                       // 4795\n    self.emit('test', self.test = test);                                                                              // 4796\n    self.hookDown('beforeEach', function(err, errSuite){                                                              // 4797\n                                                                                                                      // 4798\n      if (err) return hookErr(err, errSuite, false);                                                                  // 4799\n                                                                                                                      // 4800\n      self.currentRunnable = self.test;                                                                               // 4801\n      self.runTest(function(err){                                                                                     // 4802\n        test = self.test;                                                                                             // 4803\n                                                                                                                      // 4804\n        if (err) {                                                                                                    // 4805\n          self.fail(test, err);                                                                                       // 4806\n          self.emit('test end', test);                                                                                // 4807\n          return self.hookUp('afterEach', next);                                                                      // 4808\n        }                                                                                                             // 4809\n                                                                                                                      // 4810\n        test.state = 'passed';                                                                                        // 4811\n        self.emit('pass', test);                                                                                      // 4812\n        self.emit('test end', test);                                                                                  // 4813\n        self.hookUp('afterEach', next);                                                                               // 4814\n      });                                                                                                             // 4815\n    });                                                                                                               // 4816\n  }                                                                                                                   // 4817\n                                                                                                                      // 4818\n  this.next = next;                                                                                                   // 4819\n  next();                                                                                                             // 4820\n};                                                                                                                    // 4821\n                                                                                                                      // 4822\n/**                                                                                                                   // 4823\n * Run the given `suite` and invoke the                                                                               // 4824\n * callback `fn()` when complete.                                                                                     // 4825\n *                                                                                                                    // 4826\n * @param {Suite} suite                                                                                               // 4827\n * @param {Function} fn                                                                                               // 4828\n * @api private                                                                                                       // 4829\n */                                                                                                                   // 4830\n                                                                                                                      // 4831\nRunner.prototype.runSuite = function(suite, fn){                                                                      // 4832\n  var total = this.grepTotal(suite)                                                                                   // 4833\n    , self = this                                                                                                     // 4834\n    , i = 0;                                                                                                          // 4835\n                                                                                                                      // 4836\n  debug('run suite %s', suite.fullTitle());                                                                           // 4837\n                                                                                                                      // 4838\n  if (!total) return fn();                                                                                            // 4839\n                                                                                                                      // 4840\n  this.emit('suite', this.suite = suite);                                                                             // 4841\n                                                                                                                      // 4842\n  function next(errSuite) {                                                                                           // 4843\n    if (errSuite) {                                                                                                   // 4844\n      // current suite failed on a hook from errSuite                                                                 // 4845\n      if (errSuite == suite) {                                                                                        // 4846\n        // if errSuite is current suite                                                                               // 4847\n        // continue to the next sibling suite                                                                         // 4848\n        return done();                                                                                                // 4849\n      } else {                                                                                                        // 4850\n        // errSuite is among the parents of current suite                                                             // 4851\n        // stop execution of errSuite and all sub-suites                                                              // 4852\n        return done(errSuite);                                                                                        // 4853\n      }                                                                                                               // 4854\n    }                                                                                                                 // 4855\n                                                                                                                      // 4856\n    if (self._abort) return done();                                                                                   // 4857\n                                                                                                                      // 4858\n    var curr = suite.suites[i++];                                                                                     // 4859\n    if (!curr) return done();                                                                                         // 4860\n    self.runSuite(curr, next);                                                                                        // 4861\n  }                                                                                                                   // 4862\n                                                                                                                      // 4863\n  function done(errSuite) {                                                                                           // 4864\n    self.suite = suite;                                                                                               // 4865\n    self.hook('afterAll', function(){                                                                                 // 4866\n      self.emit('suite end', suite);                                                                                  // 4867\n      fn(errSuite);                                                                                                   // 4868\n    });                                                                                                               // 4869\n  }                                                                                                                   // 4870\n                                                                                                                      // 4871\n  this.hook('beforeAll', function(err){                                                                               // 4872\n    if (err) return done();                                                                                           // 4873\n    self.runTests(suite, next);                                                                                       // 4874\n  });                                                                                                                 // 4875\n};                                                                                                                    // 4876\n                                                                                                                      // 4877\n/**                                                                                                                   // 4878\n * Handle uncaught exceptions.                                                                                        // 4879\n *                                                                                                                    // 4880\n * @param {Error} err                                                                                                 // 4881\n * @api private                                                                                                       // 4882\n */                                                                                                                   // 4883\n                                                                                                                      // 4884\nRunner.prototype.uncaught = function(err){                                                                            // 4885\n  debug('uncaught exception %s', err.message);                                                                        // 4886\n  var runnable = this.currentRunnable;                                                                                // 4887\n  if (!runnable || 'failed' == runnable.state) return;                                                                // 4888\n  runnable.clearTimeout();                                                                                            // 4889\n  err.uncaught = true;                                                                                                // 4890\n  this.fail(runnable, err);                                                                                           // 4891\n                                                                                                                      // 4892\n  // recover from test                                                                                                // 4893\n  if ('test' == runnable.type) {                                                                                      // 4894\n    this.emit('test end', runnable);                                                                                  // 4895\n    this.hookUp('afterEach', this.next);                                                                              // 4896\n    return;                                                                                                           // 4897\n  }                                                                                                                   // 4898\n                                                                                                                      // 4899\n  // bail on hooks                                                                                                    // 4900\n  this.emit('end');                                                                                                   // 4901\n};                                                                                                                    // 4902\n                                                                                                                      // 4903\n/**                                                                                                                   // 4904\n * Run the root suite and invoke `fn(failures)`                                                                       // 4905\n * on completion.                                                                                                     // 4906\n *                                                                                                                    // 4907\n * @param {Function} fn                                                                                               // 4908\n * @return {Runner} for chaining                                                                                      // 4909\n * @api public                                                                                                        // 4910\n */                                                                                                                   // 4911\n                                                                                                                      // 4912\nRunner.prototype.run = function(fn){                                                                                  // 4913\n  var self = this                                                                                                     // 4914\n    , fn = fn || function(){};                                                                                        // 4915\n                                                                                                                      // 4916\n  function uncaught(err){                                                                                             // 4917\n    self.uncaught(err);                                                                                               // 4918\n  }                                                                                                                   // 4919\n                                                                                                                      // 4920\n  debug('start');                                                                                                     // 4921\n                                                                                                                      // 4922\n  // callback                                                                                                         // 4923\n  this.on('end', function(){                                                                                          // 4924\n    debug('end');                                                                                                     // 4925\n    process.removeListener('uncaughtException', uncaught);                                                            // 4926\n    fn(self.failures);                                                                                                // 4927\n  });                                                                                                                 // 4928\n                                                                                                                      // 4929\n  // run suites                                                                                                       // 4930\n  this.emit('start');                                                                                                 // 4931\n  this.runSuite(this.suite, function(){                                                                               // 4932\n    debug('finished running');                                                                                        // 4933\n    self.emit('end');                                                                                                 // 4934\n  });                                                                                                                 // 4935\n                                                                                                                      // 4936\n  // uncaught exception                                                                                               // 4937\n  process.on('uncaughtException', uncaught);                                                                          // 4938\n                                                                                                                      // 4939\n  return this;                                                                                                        // 4940\n};                                                                                                                    // 4941\n                                                                                                                      // 4942\n/**                                                                                                                   // 4943\n * Cleanly abort execution                                                                                            // 4944\n *                                                                                                                    // 4945\n * @return {Runner} for chaining                                                                                      // 4946\n * @api public                                                                                                        // 4947\n */                                                                                                                   // 4948\nRunner.prototype.abort = function(){                                                                                  // 4949\n  debug('aborting');                                                                                                  // 4950\n  this._abort = true;                                                                                                 // 4951\n}                                                                                                                     // 4952\n                                                                                                                      // 4953\n/**                                                                                                                   // 4954\n * Filter leaks with the given globals flagged as `ok`.                                                               // 4955\n *                                                                                                                    // 4956\n * @param {Array} ok                                                                                                  // 4957\n * @param {Array} globals                                                                                             // 4958\n * @return {Array}                                                                                                    // 4959\n * @api private                                                                                                       // 4960\n */                                                                                                                   // 4961\n                                                                                                                      // 4962\nfunction filterLeaks(ok, globals) {                                                                                   // 4963\n  return filter(globals, function(key){                                                                               // 4964\n    // Firefox and Chrome exposes iframes as index inside the window object                                           // 4965\n    if (/^d+/.test(key)) return false;                                                                                // 4966\n                                                                                                                      // 4967\n    // in firefox                                                                                                     // 4968\n    // if runner runs in an iframe, this iframe's window.getInterface method not init at first                        // 4969\n    // it is assigned in some seconds                                                                                 // 4970\n    if (global.navigator && /^getInterface/.test(key)) return false;                                                  // 4971\n                                                                                                                      // 4972\n    // an iframe could be approached by window[iframeIndex]                                                           // 4973\n    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak                                         // 4974\n    if (global.navigator && /^\\d+/.test(key)) return false;                                                           // 4975\n                                                                                                                      // 4976\n    // Opera and IE expose global variables for HTML element IDs (issue #243)                                         // 4977\n    if (/^mocha-/.test(key)) return false;                                                                            // 4978\n                                                                                                                      // 4979\n    var matched = filter(ok, function(ok){                                                                            // 4980\n      if (~ok.indexOf('*')) return 0 == key.indexOf(ok.split('*')[0]);                                                // 4981\n      return key == ok;                                                                                               // 4982\n    });                                                                                                               // 4983\n    return matched.length == 0 && (!global.navigator || 'onerror' !== key);                                           // 4984\n  });                                                                                                                 // 4985\n}                                                                                                                     // 4986\n                                                                                                                      // 4987\n/**                                                                                                                   // 4988\n * Array of globals dependent on the environment.                                                                     // 4989\n *                                                                                                                    // 4990\n * @return {Array}                                                                                                    // 4991\n * @api private                                                                                                       // 4992\n */                                                                                                                   // 4993\n                                                                                                                      // 4994\n function extraGlobals() {                                                                                            // 4995\n  if (typeof(process) === 'object' &&                                                                                 // 4996\n      typeof(process.version) === 'string') {                                                                         // 4997\n                                                                                                                      // 4998\n    var nodeVersion = process.version.split('.').reduce(function(a, v) {                                              // 4999\n      return a << 8 | v;                                                                                              // 5000\n    });                                                                                                               // 5001\n                                                                                                                      // 5002\n    // 'errno' was renamed to process._errno in v0.9.11.                                                              // 5003\n                                                                                                                      // 5004\n    if (nodeVersion < 0x00090B) {                                                                                     // 5005\n      return ['errno'];                                                                                               // 5006\n    }                                                                                                                 // 5007\n  }                                                                                                                   // 5008\n                                                                                                                      // 5009\n  return [];                                                                                                          // 5010\n }                                                                                                                    // 5011\n                                                                                                                      // 5012\n}); // module: runner.js                                                                                              // 5013\n                                                                                                                      // 5014\nrequire.register(\"suite.js\", function(module, exports, require){                                                      // 5015\n                                                                                                                      // 5016\n/**                                                                                                                   // 5017\n * Module dependencies.                                                                                               // 5018\n */                                                                                                                   // 5019\n                                                                                                                      // 5020\nvar EventEmitter = require('browser/events').EventEmitter                                                             // 5021\n  , debug = require('browser/debug')('mocha:suite')                                                                   // 5022\n  , milliseconds = require('./ms')                                                                                    // 5023\n  , utils = require('./utils')                                                                                        // 5024\n  , Hook = require('./hook');                                                                                         // 5025\n                                                                                                                      // 5026\n/**                                                                                                                   // 5027\n * Expose `Suite`.                                                                                                    // 5028\n */                                                                                                                   // 5029\n                                                                                                                      // 5030\nexports = module.exports = Suite;                                                                                     // 5031\n                                                                                                                      // 5032\n/**                                                                                                                   // 5033\n * Create a new `Suite` with the given `title`                                                                        // 5034\n * and parent `Suite`. When a suite with the                                                                          // 5035\n * same title is already present, that suite                                                                          // 5036\n * is returned to provide nicer reporter                                                                              // 5037\n * and more flexible meta-testing.                                                                                    // 5038\n *                                                                                                                    // 5039\n * @param {Suite} parent                                                                                              // 5040\n * @param {String} title                                                                                              // 5041\n * @return {Suite}                                                                                                    // 5042\n * @api public                                                                                                        // 5043\n */                                                                                                                   // 5044\n                                                                                                                      // 5045\nexports.create = function(parent, title){                                                                             // 5046\n  var suite = new Suite(title, parent.ctx);                                                                           // 5047\n  suite.parent = parent;                                                                                              // 5048\n  if (parent.pending) suite.pending = true;                                                                           // 5049\n  title = suite.fullTitle();                                                                                          // 5050\n  parent.addSuite(suite);                                                                                             // 5051\n  return suite;                                                                                                       // 5052\n};                                                                                                                    // 5053\n                                                                                                                      // 5054\n/**                                                                                                                   // 5055\n * Initialize a new `Suite` with the given                                                                            // 5056\n * `title` and `ctx`.                                                                                                 // 5057\n *                                                                                                                    // 5058\n * @param {String} title                                                                                              // 5059\n * @param {Context} ctx                                                                                               // 5060\n * @api private                                                                                                       // 5061\n */                                                                                                                   // 5062\n                                                                                                                      // 5063\nfunction Suite(title, ctx) {                                                                                          // 5064\n  this.title = title;                                                                                                 // 5065\n  this.ctx = ctx;                                                                                                     // 5066\n  this.suites = [];                                                                                                   // 5067\n  this.tests = [];                                                                                                    // 5068\n  this.pending = false;                                                                                               // 5069\n  this._beforeEach = [];                                                                                              // 5070\n  this._beforeAll = [];                                                                                               // 5071\n  this._afterEach = [];                                                                                               // 5072\n  this._afterAll = [];                                                                                                // 5073\n  this.root = !title;                                                                                                 // 5074\n  this._timeout = 2000;                                                                                               // 5075\n  this._slow = 75;                                                                                                    // 5076\n  this._bail = false;                                                                                                 // 5077\n}                                                                                                                     // 5078\n                                                                                                                      // 5079\n/**                                                                                                                   // 5080\n * Inherit from `EventEmitter.prototype`.                                                                             // 5081\n */                                                                                                                   // 5082\n                                                                                                                      // 5083\nfunction F(){};                                                                                                       // 5084\nF.prototype = EventEmitter.prototype;                                                                                 // 5085\nSuite.prototype = new F;                                                                                              // 5086\nSuite.prototype.constructor = Suite;                                                                                  // 5087\n                                                                                                                      // 5088\n                                                                                                                      // 5089\n/**                                                                                                                   // 5090\n * Return a clone of this `Suite`.                                                                                    // 5091\n *                                                                                                                    // 5092\n * @return {Suite}                                                                                                    // 5093\n * @api private                                                                                                       // 5094\n */                                                                                                                   // 5095\n                                                                                                                      // 5096\nSuite.prototype.clone = function(){                                                                                   // 5097\n  var suite = new Suite(this.title);                                                                                  // 5098\n  debug('clone');                                                                                                     // 5099\n  suite.ctx = this.ctx;                                                                                               // 5100\n  suite.timeout(this.timeout());                                                                                      // 5101\n  suite.slow(this.slow());                                                                                            // 5102\n  suite.bail(this.bail());                                                                                            // 5103\n  return suite;                                                                                                       // 5104\n};                                                                                                                    // 5105\n                                                                                                                      // 5106\n/**                                                                                                                   // 5107\n * Set timeout `ms` or short-hand such as \"2s\".                                                                       // 5108\n *                                                                                                                    // 5109\n * @param {Number|String} ms                                                                                          // 5110\n * @return {Suite|Number} for chaining                                                                                // 5111\n * @api private                                                                                                       // 5112\n */                                                                                                                   // 5113\n                                                                                                                      // 5114\nSuite.prototype.timeout = function(ms){                                                                               // 5115\n  if (0 == arguments.length) return this._timeout;                                                                    // 5116\n  if ('string' == typeof ms) ms = milliseconds(ms);                                                                   // 5117\n  debug('timeout %d', ms);                                                                                            // 5118\n  this._timeout = parseInt(ms, 10);                                                                                   // 5119\n  return this;                                                                                                        // 5120\n};                                                                                                                    // 5121\n                                                                                                                      // 5122\n/**                                                                                                                   // 5123\n * Set slow `ms` or short-hand such as \"2s\".                                                                          // 5124\n *                                                                                                                    // 5125\n * @param {Number|String} ms                                                                                          // 5126\n * @return {Suite|Number} for chaining                                                                                // 5127\n * @api private                                                                                                       // 5128\n */                                                                                                                   // 5129\n                                                                                                                      // 5130\nSuite.prototype.slow = function(ms){                                                                                  // 5131\n  if (0 === arguments.length) return this._slow;                                                                      // 5132\n  if ('string' == typeof ms) ms = milliseconds(ms);                                                                   // 5133\n  debug('slow %d', ms);                                                                                               // 5134\n  this._slow = ms;                                                                                                    // 5135\n  return this;                                                                                                        // 5136\n};                                                                                                                    // 5137\n                                                                                                                      // 5138\n/**                                                                                                                   // 5139\n * Sets whether to bail after first error.                                                                            // 5140\n *                                                                                                                    // 5141\n * @parma {Boolean} bail                                                                                              // 5142\n * @return {Suite|Number} for chaining                                                                                // 5143\n * @api private                                                                                                       // 5144\n */                                                                                                                   // 5145\n                                                                                                                      // 5146\nSuite.prototype.bail = function(bail){                                                                                // 5147\n  if (0 == arguments.length) return this._bail;                                                                       // 5148\n  debug('bail %s', bail);                                                                                             // 5149\n  this._bail = bail;                                                                                                  // 5150\n  return this;                                                                                                        // 5151\n};                                                                                                                    // 5152\n                                                                                                                      // 5153\n/**                                                                                                                   // 5154\n * Run `fn(test[, done])` before running tests.                                                                       // 5155\n *                                                                                                                    // 5156\n * @param {Function} fn                                                                                               // 5157\n * @return {Suite} for chaining                                                                                       // 5158\n * @api private                                                                                                       // 5159\n */                                                                                                                   // 5160\n                                                                                                                      // 5161\nSuite.prototype.beforeAll = function(fn){                                                                             // 5162\n  if (this.pending) return this;                                                                                      // 5163\n  var hook = new Hook('\"before all\" hook', fn);                                                                       // 5164\n  hook.parent = this;                                                                                                 // 5165\n  hook.timeout(this.timeout());                                                                                       // 5166\n  hook.slow(this.slow());                                                                                             // 5167\n  hook.ctx = this.ctx;                                                                                                // 5168\n  this._beforeAll.push(hook);                                                                                         // 5169\n  this.emit('beforeAll', hook);                                                                                       // 5170\n  return this;                                                                                                        // 5171\n};                                                                                                                    // 5172\n                                                                                                                      // 5173\n/**                                                                                                                   // 5174\n * Run `fn(test[, done])` after running tests.                                                                        // 5175\n *                                                                                                                    // 5176\n * @param {Function} fn                                                                                               // 5177\n * @return {Suite} for chaining                                                                                       // 5178\n * @api private                                                                                                       // 5179\n */                                                                                                                   // 5180\n                                                                                                                      // 5181\nSuite.prototype.afterAll = function(fn){                                                                              // 5182\n  if (this.pending) return this;                                                                                      // 5183\n  var hook = new Hook('\"after all\" hook', fn);                                                                        // 5184\n  hook.parent = this;                                                                                                 // 5185\n  hook.timeout(this.timeout());                                                                                       // 5186\n  hook.slow(this.slow());                                                                                             // 5187\n  hook.ctx = this.ctx;                                                                                                // 5188\n  this._afterAll.push(hook);                                                                                          // 5189\n  this.emit('afterAll', hook);                                                                                        // 5190\n  return this;                                                                                                        // 5191\n};                                                                                                                    // 5192\n                                                                                                                      // 5193\n/**                                                                                                                   // 5194\n * Run `fn(test[, done])` before each test case.                                                                      // 5195\n *                                                                                                                    // 5196\n * @param {Function} fn                                                                                               // 5197\n * @return {Suite} for chaining                                                                                       // 5198\n * @api private                                                                                                       // 5199\n */                                                                                                                   // 5200\n                                                                                                                      // 5201\nSuite.prototype.beforeEach = function(fn){                                                                            // 5202\n  if (this.pending) return this;                                                                                      // 5203\n  var hook = new Hook('\"before each\" hook', fn);                                                                      // 5204\n  hook.parent = this;                                                                                                 // 5205\n  hook.timeout(this.timeout());                                                                                       // 5206\n  hook.slow(this.slow());                                                                                             // 5207\n  hook.ctx = this.ctx;                                                                                                // 5208\n  this._beforeEach.push(hook);                                                                                        // 5209\n  this.emit('beforeEach', hook);                                                                                      // 5210\n  return this;                                                                                                        // 5211\n};                                                                                                                    // 5212\n                                                                                                                      // 5213\n/**                                                                                                                   // 5214\n * Run `fn(test[, done])` after each test case.                                                                       // 5215\n *                                                                                                                    // 5216\n * @param {Function} fn                                                                                               // 5217\n * @return {Suite} for chaining                                                                                       // 5218\n * @api private                                                                                                       // 5219\n */                                                                                                                   // 5220\n                                                                                                                      // 5221\nSuite.prototype.afterEach = function(fn){                                                                             // 5222\n  if (this.pending) return this;                                                                                      // 5223\n  var hook = new Hook('\"after each\" hook', fn);                                                                       // 5224\n  hook.parent = this;                                                                                                 // 5225\n  hook.timeout(this.timeout());                                                                                       // 5226\n  hook.slow(this.slow());                                                                                             // 5227\n  hook.ctx = this.ctx;                                                                                                // 5228\n  this._afterEach.push(hook);                                                                                         // 5229\n  this.emit('afterEach', hook);                                                                                       // 5230\n  return this;                                                                                                        // 5231\n};                                                                                                                    // 5232\n                                                                                                                      // 5233\n/**                                                                                                                   // 5234\n * Add a test `suite`.                                                                                                // 5235\n *                                                                                                                    // 5236\n * @param {Suite} suite                                                                                               // 5237\n * @return {Suite} for chaining                                                                                       // 5238\n * @api private                                                                                                       // 5239\n */                                                                                                                   // 5240\n                                                                                                                      // 5241\nSuite.prototype.addSuite = function(suite){                                                                           // 5242\n  suite.parent = this;                                                                                                // 5243\n  suite.timeout(this.timeout());                                                                                      // 5244\n  suite.slow(this.slow());                                                                                            // 5245\n  suite.bail(this.bail());                                                                                            // 5246\n  this.suites.push(suite);                                                                                            // 5247\n  this.emit('suite', suite);                                                                                          // 5248\n  return this;                                                                                                        // 5249\n};                                                                                                                    // 5250\n                                                                                                                      // 5251\n/**                                                                                                                   // 5252\n * Add a `test` to this suite.                                                                                        // 5253\n *                                                                                                                    // 5254\n * @param {Test} test                                                                                                 // 5255\n * @return {Suite} for chaining                                                                                       // 5256\n * @api private                                                                                                       // 5257\n */                                                                                                                   // 5258\n                                                                                                                      // 5259\nSuite.prototype.addTest = function(test){                                                                             // 5260\n  test.parent = this;                                                                                                 // 5261\n  test.timeout(this.timeout());                                                                                       // 5262\n  test.slow(this.slow());                                                                                             // 5263\n  test.ctx = this.ctx;                                                                                                // 5264\n  this.tests.push(test);                                                                                              // 5265\n  this.emit('test', test);                                                                                            // 5266\n  return this;                                                                                                        // 5267\n};                                                                                                                    // 5268\n                                                                                                                      // 5269\n/**                                                                                                                   // 5270\n * Return the full title generated by recursively                                                                     // 5271\n * concatenating the parent's full title.                                                                             // 5272\n *                                                                                                                    // 5273\n * @return {String}                                                                                                   // 5274\n * @api public                                                                                                        // 5275\n */                                                                                                                   // 5276\n                                                                                                                      // 5277\nSuite.prototype.fullTitle = function(){                                                                               // 5278\n  if (this.parent) {                                                                                                  // 5279\n    var full = this.parent.fullTitle();                                                                               // 5280\n    if (full) return full + ' ' + this.title;                                                                         // 5281\n  }                                                                                                                   // 5282\n  return this.title;                                                                                                  // 5283\n};                                                                                                                    // 5284\n                                                                                                                      // 5285\n/**                                                                                                                   // 5286\n * Return the total number of tests.                                                                                  // 5287\n *                                                                                                                    // 5288\n * @return {Number}                                                                                                   // 5289\n * @api public                                                                                                        // 5290\n */                                                                                                                   // 5291\n                                                                                                                      // 5292\nSuite.prototype.total = function(){                                                                                   // 5293\n  return utils.reduce(this.suites, function(sum, suite){                                                              // 5294\n    return sum + suite.total();                                                                                       // 5295\n  }, 0) + this.tests.length;                                                                                          // 5296\n};                                                                                                                    // 5297\n                                                                                                                      // 5298\n/**                                                                                                                   // 5299\n * Iterates through each suite recursively to find                                                                    // 5300\n * all tests. Applies a function in the format                                                                        // 5301\n * `fn(test)`.                                                                                                        // 5302\n *                                                                                                                    // 5303\n * @param {Function} fn                                                                                               // 5304\n * @return {Suite}                                                                                                    // 5305\n * @api private                                                                                                       // 5306\n */                                                                                                                   // 5307\n                                                                                                                      // 5308\nSuite.prototype.eachTest = function(fn){                                                                              // 5309\n  utils.forEach(this.tests, fn);                                                                                      // 5310\n  utils.forEach(this.suites, function(suite){                                                                         // 5311\n    suite.eachTest(fn);                                                                                               // 5312\n  });                                                                                                                 // 5313\n  return this;                                                                                                        // 5314\n};                                                                                                                    // 5315\n                                                                                                                      // 5316\n}); // module: suite.js                                                                                               // 5317\n                                                                                                                      // 5318\nrequire.register(\"test.js\", function(module, exports, require){                                                       // 5319\n                                                                                                                      // 5320\n/**                                                                                                                   // 5321\n * Module dependencies.                                                                                               // 5322\n */                                                                                                                   // 5323\n                                                                                                                      // 5324\nvar Runnable = require('./runnable');                                                                                 // 5325\n                                                                                                                      // 5326\n/**                                                                                                                   // 5327\n * Expose `Test`.                                                                                                     // 5328\n */                                                                                                                   // 5329\n                                                                                                                      // 5330\nmodule.exports = Test;                                                                                                // 5331\n                                                                                                                      // 5332\n/**                                                                                                                   // 5333\n * Initialize a new `Test` with the given `title` and callback `fn`.                                                  // 5334\n *                                                                                                                    // 5335\n * @param {String} title                                                                                              // 5336\n * @param {Function} fn                                                                                               // 5337\n * @api private                                                                                                       // 5338\n */                                                                                                                   // 5339\n                                                                                                                      // 5340\nfunction Test(title, fn) {                                                                                            // 5341\n  Runnable.call(this, title, fn);                                                                                     // 5342\n  this.pending = !fn;                                                                                                 // 5343\n  this.type = 'test';                                                                                                 // 5344\n}                                                                                                                     // 5345\n                                                                                                                      // 5346\n/**                                                                                                                   // 5347\n * Inherit from `Runnable.prototype`.                                                                                 // 5348\n */                                                                                                                   // 5349\n                                                                                                                      // 5350\nfunction F(){};                                                                                                       // 5351\nF.prototype = Runnable.prototype;                                                                                     // 5352\nTest.prototype = new F;                                                                                               // 5353\nTest.prototype.constructor = Test;                                                                                    // 5354\n                                                                                                                      // 5355\n                                                                                                                      // 5356\n}); // module: test.js                                                                                                // 5357\n                                                                                                                      // 5358\nrequire.register(\"utils.js\", function(module, exports, require){                                                      // 5359\n/**                                                                                                                   // 5360\n * Module dependencies.                                                                                               // 5361\n */                                                                                                                   // 5362\n                                                                                                                      // 5363\nvar fs = require('browser/fs')                                                                                        // 5364\n  , path = require('browser/path')                                                                                    // 5365\n  , join = path.join                                                                                                  // 5366\n  , debug = require('browser/debug')('mocha:watch');                                                                  // 5367\n                                                                                                                      // 5368\n/**                                                                                                                   // 5369\n * Ignored directories.                                                                                               // 5370\n */                                                                                                                   // 5371\n                                                                                                                      // 5372\nvar ignore = ['node_modules', '.git'];                                                                                // 5373\n                                                                                                                      // 5374\n/**                                                                                                                   // 5375\n * Escape special characters in the given string of html.                                                             // 5376\n *                                                                                                                    // 5377\n * @param  {String} html                                                                                              // 5378\n * @return {String}                                                                                                   // 5379\n * @api private                                                                                                       // 5380\n */                                                                                                                   // 5381\n                                                                                                                      // 5382\nexports.escape = function(html){                                                                                      // 5383\n  return String(html)                                                                                                 // 5384\n    .replace(/&/g, '&amp;')                                                                                           // 5385\n    .replace(/\"/g, '&quot;')                                                                                          // 5386\n    .replace(/</g, '&lt;')                                                                                            // 5387\n    .replace(/>/g, '&gt;');                                                                                           // 5388\n};                                                                                                                    // 5389\n                                                                                                                      // 5390\n/**                                                                                                                   // 5391\n * Array#forEach (<=IE8)                                                                                              // 5392\n *                                                                                                                    // 5393\n * @param {Array} array                                                                                               // 5394\n * @param {Function} fn                                                                                               // 5395\n * @param {Object} scope                                                                                              // 5396\n * @api private                                                                                                       // 5397\n */                                                                                                                   // 5398\n                                                                                                                      // 5399\nexports.forEach = function(arr, fn, scope){                                                                           // 5400\n  for (var i = 0, l = arr.length; i < l; i++)                                                                         // 5401\n    fn.call(scope, arr[i], i);                                                                                        // 5402\n};                                                                                                                    // 5403\n                                                                                                                      // 5404\n/**                                                                                                                   // 5405\n * Array#map (<=IE8)                                                                                                  // 5406\n *                                                                                                                    // 5407\n * @param {Array} array                                                                                               // 5408\n * @param {Function} fn                                                                                               // 5409\n * @param {Object} scope                                                                                              // 5410\n * @api private                                                                                                       // 5411\n */                                                                                                                   // 5412\n                                                                                                                      // 5413\nexports.map = function(arr, fn, scope){                                                                               // 5414\n  var result = [];                                                                                                    // 5415\n  for (var i = 0, l = arr.length; i < l; i++)                                                                         // 5416\n    result.push(fn.call(scope, arr[i], i));                                                                           // 5417\n  return result;                                                                                                      // 5418\n};                                                                                                                    // 5419\n                                                                                                                      // 5420\n/**                                                                                                                   // 5421\n * Array#indexOf (<=IE8)                                                                                              // 5422\n *                                                                                                                    // 5423\n * @parma {Array} arr                                                                                                 // 5424\n * @param {Object} obj to find index of                                                                               // 5425\n * @param {Number} start                                                                                              // 5426\n * @api private                                                                                                       // 5427\n */                                                                                                                   // 5428\n                                                                                                                      // 5429\nexports.indexOf = function(arr, obj, start){                                                                          // 5430\n  for (var i = start || 0, l = arr.length; i < l; i++) {                                                              // 5431\n    if (arr[i] === obj)                                                                                               // 5432\n      return i;                                                                                                       // 5433\n  }                                                                                                                   // 5434\n  return -1;                                                                                                          // 5435\n};                                                                                                                    // 5436\n                                                                                                                      // 5437\n/**                                                                                                                   // 5438\n * Array#reduce (<=IE8)                                                                                               // 5439\n *                                                                                                                    // 5440\n * @param {Array} array                                                                                               // 5441\n * @param {Function} fn                                                                                               // 5442\n * @param {Object} initial value                                                                                      // 5443\n * @api private                                                                                                       // 5444\n */                                                                                                                   // 5445\n                                                                                                                      // 5446\nexports.reduce = function(arr, fn, val){                                                                              // 5447\n  var rval = val;                                                                                                     // 5448\n                                                                                                                      // 5449\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                       // 5450\n    rval = fn(rval, arr[i], i, arr);                                                                                  // 5451\n  }                                                                                                                   // 5452\n                                                                                                                      // 5453\n  return rval;                                                                                                        // 5454\n};                                                                                                                    // 5455\n                                                                                                                      // 5456\n/**                                                                                                                   // 5457\n * Array#filter (<=IE8)                                                                                               // 5458\n *                                                                                                                    // 5459\n * @param {Array} array                                                                                               // 5460\n * @param {Function} fn                                                                                               // 5461\n * @api private                                                                                                       // 5462\n */                                                                                                                   // 5463\n                                                                                                                      // 5464\nexports.filter = function(arr, fn){                                                                                   // 5465\n  var ret = [];                                                                                                       // 5466\n                                                                                                                      // 5467\n  for (var i = 0, l = arr.length; i < l; i++) {                                                                       // 5468\n    var val = arr[i];                                                                                                 // 5469\n    if (fn(val, i, arr)) ret.push(val);                                                                               // 5470\n  }                                                                                                                   // 5471\n                                                                                                                      // 5472\n  return ret;                                                                                                         // 5473\n};                                                                                                                    // 5474\n                                                                                                                      // 5475\n/**                                                                                                                   // 5476\n * Object.keys (<=IE8)                                                                                                // 5477\n *                                                                                                                    // 5478\n * @param {Object} obj                                                                                                // 5479\n * @return {Array} keys                                                                                               // 5480\n * @api private                                                                                                       // 5481\n */                                                                                                                   // 5482\n                                                                                                                      // 5483\nexports.keys = Object.keys || function(obj) {                                                                         // 5484\n  var keys = []                                                                                                       // 5485\n    , has = Object.prototype.hasOwnProperty // for `window` on <=IE8                                                  // 5486\n                                                                                                                      // 5487\n  for (var key in obj) {                                                                                              // 5488\n    if (has.call(obj, key)) {                                                                                         // 5489\n      keys.push(key);                                                                                                 // 5490\n    }                                                                                                                 // 5491\n  }                                                                                                                   // 5492\n                                                                                                                      // 5493\n  return keys;                                                                                                        // 5494\n};                                                                                                                    // 5495\n                                                                                                                      // 5496\n/**                                                                                                                   // 5497\n * Watch the given `files` for changes                                                                                // 5498\n * and invoke `fn(file)` on modification.                                                                             // 5499\n *                                                                                                                    // 5500\n * @param {Array} files                                                                                               // 5501\n * @param {Function} fn                                                                                               // 5502\n * @api private                                                                                                       // 5503\n */                                                                                                                   // 5504\n                                                                                                                      // 5505\nexports.watch = function(files, fn){                                                                                  // 5506\n  var options = { interval: 100 };                                                                                    // 5507\n  files.forEach(function(file){                                                                                       // 5508\n    debug('file %s', file);                                                                                           // 5509\n    fs.watchFile(file, options, function(curr, prev){                                                                 // 5510\n      if (prev.mtime < curr.mtime) fn(file);                                                                          // 5511\n    });                                                                                                               // 5512\n  });                                                                                                                 // 5513\n};                                                                                                                    // 5514\n                                                                                                                      // 5515\n/**                                                                                                                   // 5516\n * Ignored files.                                                                                                     // 5517\n */                                                                                                                   // 5518\n                                                                                                                      // 5519\nfunction ignored(path){                                                                                               // 5520\n  return !~ignore.indexOf(path);                                                                                      // 5521\n}                                                                                                                     // 5522\n                                                                                                                      // 5523\n/**                                                                                                                   // 5524\n * Lookup files in the given `dir`.                                                                                   // 5525\n *                                                                                                                    // 5526\n * @return {Array}                                                                                                    // 5527\n * @api private                                                                                                       // 5528\n */                                                                                                                   // 5529\n                                                                                                                      // 5530\nexports.files = function(dir, ret){                                                                                   // 5531\n  ret = ret || [];                                                                                                    // 5532\n                                                                                                                      // 5533\n  fs.readdirSync(dir)                                                                                                 // 5534\n  .filter(ignored)                                                                                                    // 5535\n  .forEach(function(path){                                                                                            // 5536\n    path = join(dir, path);                                                                                           // 5537\n    if (fs.statSync(path).isDirectory()) {                                                                            // 5538\n      exports.files(path, ret);                                                                                       // 5539\n    } else if (path.match(/\\.(js|coffee|litcoffee|coffee.md)$/)) {                                                    // 5540\n      ret.push(path);                                                                                                 // 5541\n    }                                                                                                                 // 5542\n  });                                                                                                                 // 5543\n                                                                                                                      // 5544\n  return ret;                                                                                                         // 5545\n};                                                                                                                    // 5546\n                                                                                                                      // 5547\n/**                                                                                                                   // 5548\n * Compute a slug from the given `str`.                                                                               // 5549\n *                                                                                                                    // 5550\n * @param {String} str                                                                                                // 5551\n * @return {String}                                                                                                   // 5552\n * @api private                                                                                                       // 5553\n */                                                                                                                   // 5554\n                                                                                                                      // 5555\nexports.slug = function(str){                                                                                         // 5556\n  return str                                                                                                          // 5557\n    .toLowerCase()                                                                                                    // 5558\n    .replace(/ +/g, '-')                                                                                              // 5559\n    .replace(/[^-\\w]/g, '');                                                                                          // 5560\n};                                                                                                                    // 5561\n                                                                                                                      // 5562\n/**                                                                                                                   // 5563\n * Strip the function definition from `str`,                                                                          // 5564\n * and re-indent for pre whitespace.                                                                                  // 5565\n */                                                                                                                   // 5566\n                                                                                                                      // 5567\nexports.clean = function(str) {                                                                                       // 5568\n  str = str                                                                                                           // 5569\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, \"\\n\").replace(/^\\uFEFF/, '')                                                  // 5570\n    .replace(/^function *\\(.*\\) *{/, '')                                                                              // 5571\n    .replace(/\\s+\\}$/, '');                                                                                           // 5572\n                                                                                                                      // 5573\n  var spaces = str.match(/^\\n?( *)/)[1].length                                                                        // 5574\n    , tabs = str.match(/^\\n?(\\t*)/)[1].length                                                                         // 5575\n    , re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');                       // 5576\n                                                                                                                      // 5577\n  str = str.replace(re, '');                                                                                          // 5578\n                                                                                                                      // 5579\n  return exports.trim(str);                                                                                           // 5580\n};                                                                                                                    // 5581\n                                                                                                                      // 5582\n/**                                                                                                                   // 5583\n * Escape regular expression characters in `str`.                                                                     // 5584\n *                                                                                                                    // 5585\n * @param {String} str                                                                                                // 5586\n * @return {String}                                                                                                   // 5587\n * @api private                                                                                                       // 5588\n */                                                                                                                   // 5589\n                                                                                                                      // 5590\nexports.escapeRegexp = function(str){                                                                                 // 5591\n  return str.replace(/[-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");                                                                 // 5592\n};                                                                                                                    // 5593\n                                                                                                                      // 5594\n/**                                                                                                                   // 5595\n * Trim the given `str`.                                                                                              // 5596\n *                                                                                                                    // 5597\n * @param {String} str                                                                                                // 5598\n * @return {String}                                                                                                   // 5599\n * @api private                                                                                                       // 5600\n */                                                                                                                   // 5601\n                                                                                                                      // 5602\nexports.trim = function(str){                                                                                         // 5603\n  return str.replace(/^\\s+|\\s+$/g, '');                                                                               // 5604\n};                                                                                                                    // 5605\n                                                                                                                      // 5606\n/**                                                                                                                   // 5607\n * Parse the given `qs`.                                                                                              // 5608\n *                                                                                                                    // 5609\n * @param {String} qs                                                                                                 // 5610\n * @return {Object}                                                                                                   // 5611\n * @api private                                                                                                       // 5612\n */                                                                                                                   // 5613\n                                                                                                                      // 5614\nexports.parseQuery = function(qs){                                                                                    // 5615\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair){                                          // 5616\n    var i = pair.indexOf('=')                                                                                         // 5617\n      , key = pair.slice(0, i)                                                                                        // 5618\n      , val = pair.slice(++i);                                                                                        // 5619\n                                                                                                                      // 5620\n    obj[key] = decodeURIComponent(val);                                                                               // 5621\n    return obj;                                                                                                       // 5622\n  }, {});                                                                                                             // 5623\n};                                                                                                                    // 5624\n                                                                                                                      // 5625\n/**                                                                                                                   // 5626\n * Highlight the given string of `js`.                                                                                // 5627\n *                                                                                                                    // 5628\n * @param {String} js                                                                                                 // 5629\n * @return {String}                                                                                                   // 5630\n * @api private                                                                                                       // 5631\n */                                                                                                                   // 5632\n                                                                                                                      // 5633\nfunction highlight(js) {                                                                                              // 5634\n  return js                                                                                                           // 5635\n    .replace(/</g, '&lt;')                                                                                            // 5636\n    .replace(/>/g, '&gt;')                                                                                            // 5637\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')                                                       // 5638\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')                                                           // 5639\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')                                                        // 5640\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')                                                             // 5641\n    .replace(/\\bnew *(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')                       // 5642\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>')                      // 5643\n}                                                                                                                     // 5644\n                                                                                                                      // 5645\n/**                                                                                                                   // 5646\n * Highlight the contents of tag `name`.                                                                              // 5647\n *                                                                                                                    // 5648\n * @param {String} name                                                                                               // 5649\n * @api private                                                                                                       // 5650\n */                                                                                                                   // 5651\n                                                                                                                      // 5652\nexports.highlightTags = function(name) {                                                                              // 5653\n  var code = document.getElementsByTagName(name);                                                                     // 5654\n  for (var i = 0, len = code.length; i < len; ++i) {                                                                  // 5655\n    code[i].innerHTML = highlight(code[i].innerHTML);                                                                 // 5656\n  }                                                                                                                   // 5657\n};                                                                                                                    // 5658\n                                                                                                                      // 5659\n}); // module: utils.js                                                                                               // 5660\n// The global object is \"self\" in Web Workers.                                                                        // 5661\nglobal = (function() { return this; })();                                                                             // 5662\n                                                                                                                      // 5663\n/**                                                                                                                   // 5664\n * Save timer references to avoid Sinon interfering (see GH-237).                                                     // 5665\n */                                                                                                                   // 5666\n                                                                                                                      // 5667\nvar Date = global.Date;                                                                                               // 5668\nvar setTimeout = global.setTimeout;                                                                                   // 5669\nvar setInterval = global.setInterval;                                                                                 // 5670\nvar clearTimeout = global.clearTimeout;                                                                               // 5671\nvar clearInterval = global.clearInterval;                                                                             // 5672\n                                                                                                                      // 5673\n/**                                                                                                                   // 5674\n * Node shims.                                                                                                        // 5675\n *                                                                                                                    // 5676\n * These are meant only to allow                                                                                      // 5677\n * mocha.js to run untouched, not                                                                                     // 5678\n * to allow running node code in                                                                                      // 5679\n * the browser.                                                                                                       // 5680\n */                                                                                                                   // 5681\n                                                                                                                      // 5682\nvar process = {};                                                                                                     // 5683\nprocess.exit = function(status){};                                                                                    // 5684\nprocess.stdout = {};                                                                                                  // 5685\n                                                                                                                      // 5686\nvar uncaughtExceptionHandlers = [];                                                                                   // 5687\n                                                                                                                      // 5688\n/**                                                                                                                   // 5689\n * Remove uncaughtException listener.                                                                                 // 5690\n */                                                                                                                   // 5691\n                                                                                                                      // 5692\nprocess.removeListener = function(e, fn){                                                                             // 5693\n  if ('uncaughtException' == e) {                                                                                     // 5694\n    global.onerror = function() {};                                                                                   // 5695\n    var i = Mocha.utils.indexOf(uncaughtExceptionHandlers, fn);                                                       // 5696\n    if (i != -1) { uncaughtExceptionHandlers.splice(i, 1); }                                                          // 5697\n  }                                                                                                                   // 5698\n};                                                                                                                    // 5699\n                                                                                                                      // 5700\n/**                                                                                                                   // 5701\n * Implements uncaughtException listener.                                                                             // 5702\n */                                                                                                                   // 5703\n                                                                                                                      // 5704\nprocess.on = function(e, fn){                                                                                         // 5705\n  if ('uncaughtException' == e) {                                                                                     // 5706\n    global.onerror = function(err, url, line){                                                                        // 5707\n      fn(new Error(err + ' (' + url + ':' + line + ')'));                                                             // 5708\n      return true;                                                                                                    // 5709\n    };                                                                                                                // 5710\n    uncaughtExceptionHandlers.push(fn);                                                                               // 5711\n  }                                                                                                                   // 5712\n};                                                                                                                    // 5713\n                                                                                                                      // 5714\n/**                                                                                                                   // 5715\n * Expose mocha.                                                                                                      // 5716\n */                                                                                                                   // 5717\n                                                                                                                      // 5718\nvar Mocha = global.Mocha = require('mocha'),                                                                          // 5719\n    mocha = global.mocha = new Mocha({ reporter: 'html' });                                                           // 5720\n                                                                                                                      // 5721\n// The BDD UI is registered by default, but no UI will be functional in the                                           // 5722\n// browser without an explicit call to the overridden `mocha.ui` (see below).                                         // 5723\n// Ensure that this default UI does not expose its methods to the global scope.                                       // 5724\nmocha.suite.removeAllListeners('pre-require');                                                                        // 5725\n                                                                                                                      // 5726\nvar immediateQueue = []                                                                                               // 5727\n  , immediateTimeout;                                                                                                 // 5728\n                                                                                                                      // 5729\nfunction timeslice() {                                                                                                // 5730\n  var immediateStart = new Date().getTime();                                                                          // 5731\n  while (immediateQueue.length && (new Date().getTime() - immediateStart) < 100) {                                    // 5732\n    immediateQueue.shift()();                                                                                         // 5733\n  }                                                                                                                   // 5734\n  if (immediateQueue.length) {                                                                                        // 5735\n    immediateTimeout = setTimeout(timeslice, 0);                                                                      // 5736\n  } else {                                                                                                            // 5737\n    immediateTimeout = null;                                                                                          // 5738\n  }                                                                                                                   // 5739\n}                                                                                                                     // 5740\n                                                                                                                      // 5741\n/**                                                                                                                   // 5742\n * High-performance override of Runner.immediately.                                                                   // 5743\n */                                                                                                                   // 5744\n                                                                                                                      // 5745\nMocha.Runner.immediately = function(callback) {                                                                       // 5746\n  immediateQueue.push(callback);                                                                                      // 5747\n  if (!immediateTimeout) {                                                                                            // 5748\n    immediateTimeout = setTimeout(timeslice, 0);                                                                      // 5749\n  }                                                                                                                   // 5750\n};                                                                                                                    // 5751\n                                                                                                                      // 5752\n/**                                                                                                                   // 5753\n * Function to allow assertion libraries to throw errors directly into mocha.                                         // 5754\n * This is useful when running tests in a browser because window.onerror will                                         // 5755\n * only receive the 'message' attribute of the Error.                                                                 // 5756\n */                                                                                                                   // 5757\nmocha.throwError = function(err) {                                                                                    // 5758\n  Mocha.utils.forEach(uncaughtExceptionHandlers, function (fn) {                                                      // 5759\n    fn(err);                                                                                                          // 5760\n  });                                                                                                                 // 5761\n  throw err;                                                                                                          // 5762\n};                                                                                                                    // 5763\n                                                                                                                      // 5764\n/**                                                                                                                   // 5765\n * Override ui to ensure that the ui functions are initialized.                                                       // 5766\n * Normally this would happen in Mocha.prototype.loadFiles.                                                           // 5767\n */                                                                                                                   // 5768\n                                                                                                                      // 5769\nmocha.ui = function(ui){                                                                                              // 5770\n  Mocha.prototype.ui.call(this, ui);                                                                                  // 5771\n  this.suite.emit('pre-require', global, null, this);                                                                 // 5772\n  return this;                                                                                                        // 5773\n};                                                                                                                    // 5774\n                                                                                                                      // 5775\n/**                                                                                                                   // 5776\n * Setup mocha with the given setting options.                                                                        // 5777\n */                                                                                                                   // 5778\n                                                                                                                      // 5779\nmocha.setup = function(opts){                                                                                         // 5780\n  if ('string' == typeof opts) opts = { ui: opts };                                                                   // 5781\n  for (var opt in opts) this[opt](opts[opt]);                                                                         // 5782\n  return this;                                                                                                        // 5783\n};                                                                                                                    // 5784\n                                                                                                                      // 5785\n/**                                                                                                                   // 5786\n * Run mocha, returning the Runner.                                                                                   // 5787\n */                                                                                                                   // 5788\n                                                                                                                      // 5789\nmocha.run = function(fn){                                                                                             // 5790\n  var options = mocha.options;                                                                                        // 5791\n  mocha.globals('location');                                                                                          // 5792\n                                                                                                                      // 5793\n  var query = Mocha.utils.parseQuery(global.location.search || '');                                                   // 5794\n  if (query.grep) mocha.grep(query.grep);                                                                             // 5795\n  if (query.invert) mocha.invert();                                                                                   // 5796\n                                                                                                                      // 5797\n  return Mocha.prototype.run.call(mocha, function(){                                                                  // 5798\n    // The DOM Document is not available in Web Workers.                                                              // 5799\n    if (global.document) {                                                                                            // 5800\n      Mocha.utils.highlightTags('code');                                                                              // 5801\n    }                                                                                                                 // 5802\n    if (fn) fn();                                                                                                     // 5803\n  });                                                                                                                 // 5804\n};                                                                                                                    // 5805\n                                                                                                                      // 5806\n/**                                                                                                                   // 5807\n * Expose the process shim.                                                                                           // 5808\n */                                                                                                                   // 5809\n                                                                                                                      // 5810\nMocha.process = process;                                                                                              // 5811\n})();                                                                                                                 // 5812\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mike_mocha/reporter.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nMochaWeb = this.MochaWeb = {};                                                                                        // 1\n                                                                                                                      // 2\nif (Meteor.isServer)                                                                                                  // 3\n  var Base = Npm.require(\"mocha/lib/reporters\").Base;                                                                 // 4\nelse                                                                                                                  // 5\n  Base = Mocha.reporters.Base                                                                                         // 6\n                                                                                                                      // 7\nfunction getAncestors(testObject, ancestors){                                                                         // 8\n  if (!ancestors)                                                                                                     // 9\n    ancestors = []                                                                                                    // 10\n  if (testObject.parent && testObject.parent.title !== \"\"){                                                           // 11\n    ancestors.push(testObject.parent.title)                                                                           // 12\n    return getAncestors(testObject.parent, ancestors);                                                                // 13\n  }                                                                                                                   // 14\n  else{                                                                                                               // 15\n    return ancestors;                                                                                                 // 16\n  }                                                                                                                   // 17\n};                                                                                                                    // 18\n                                                                                                                      // 19\nMochaWeb.MeteorCollectionTestReporter = function(runner){                                                             // 20\n  Base.call(this, runner);                                                                                            // 21\n  var self = this;                                                                                                    // 22\n                                                                                                                      // 23\n  function saveTestResult(test){                                                                                      // 24\n    if (test.state === \"failed\"){                                                                                     // 25\n      console.log(test.err.message);                                                                                  // 26\n      console.log(test.err.stack);                                                                                    // 27\n    }                                                                                                                 // 28\n                                                                                                                      // 29\n    // console.log(\"SAVE TEST RESULT\", test);                                                                         // 30\n                                                                                                                      // 31\n    var ancestors = getAncestors(test);                                                                               // 32\n    var result = {                                                                                                    // 33\n      id: \"mocha:\" + ancestors.join(\":\") + \":\" + test.title,                                                          // 34\n      async: !!test.async,                                                                                            // 35\n      framework: \"mocha\",                                                                                             // 36\n      name: test.title,                                                                                               // 37\n      pending: test.pending,                                                                                          // 38\n      result: test.state,                                                                                             // 39\n      duration: test.duration,                                                                                        // 40\n      timeOut: test._timeout,                                                                                         // 41\n      timedOut: test.timedOut,                                                                                        // 42\n      ancestors: ancestors,                                                                                           // 43\n      isClient: Meteor.isClient,                                                                                      // 44\n      isServer: Meteor.isServer,                                                                                      // 45\n      timestamp: new Date()                                                                                           // 46\n    };                                                                                                                // 47\n    if (typeof test.state === \"undefined\" && test.pending === true) {                                                 // 48\n      result.result = \"pending\";                                                                                      // 49\n    }                                                                                                                 // 50\n    if (test.err){                                                                                                    // 51\n      result.failureMessage = test.err.message;                                                                       // 52\n      result.failureStackTrace = test.err.stack;                                                                      // 53\n    }                                                                                                                 // 54\n    // console.log(\"POSTING RESULT\", result);                                                                         // 55\n                                                                                                                      // 56\n    ddpParentConnection.call(\"velocity/reports/submit\", result, function(error, result){                              // 57\n      if (error){                                                                                                     // 58\n        console.error(\"ERROR WRITING TEST\", error);                                                                   // 59\n      }                                                                                                               // 60\n    });                                                                                                               // 61\n  }                                                                                                                   // 62\n                                                                                                                      // 63\n  runner.on(\"start\", Meteor.bindEnvironment(                                                                          // 64\n    function(){                                                                                                       // 65\n      //TODO tell testRunner that mocha tests have started                                                            // 66\n    },                                                                                                                // 67\n    function(err){                                                                                                    // 68\n      throw err;                                                                                                      // 69\n    }                                                                                                                 // 70\n  ));                                                                                                                 // 71\n                                                                                                                      // 72\n  [\"pass\", \"fail\", \"pending\"].forEach(function(testEvent){                                                            // 73\n    runner.on(testEvent, Meteor.bindEnvironment(                                                                      // 74\n      function(test){                                                                                                 // 75\n        saveTestResult(test);                                                                                         // 76\n      },                                                                                                              // 77\n      function(err){                                                                                                  // 78\n        throw err;                                                                                                    // 79\n      }                                                                                                               // 80\n    ));                                                                                                               // 81\n  });                                                                                                                 // 82\n                                                                                                                      // 83\n  runner.on('end', Meteor.bindEnvironment(function(){                                                                 // 84\n    //TODO tell testRunner all mocha web tests have finished                                                          // 85\n  }, function(err){                                                                                                   // 86\n    throw err;                                                                                                        // 87\n  }));                                                                                                                // 88\n};                                                                                                                    // 89\n                                                                                                                      // 90\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mike_mocha/client.js                                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nddpParentConnection = null;                                                                                           // 1\nwindow.mochaWebClientTestsComplete = false;                                                                           // 2\n                                                                                                                      // 3\nvar testSetupFunctions = [];                                                                                          // 4\n                                                                                                                      // 5\nMochaWeb.testOnly = function(callback){                                                                               // 6\n  testSetupFunctions.push(callback);                                                                                  // 7\n};                                                                                                                    // 8\n                                                                                                                      // 9\nwindow.MirrorURLs = new Meteor.Collection(\"mirrorUrls\");                                                              // 10\n                                                                                                                      // 11\nwindow.chai = Package['practicalmeteor:chai'].chai;                                                                   // 12\n                                                                                                                      // 13\n                                                                                                                      // 14\nMeteor.startup(function(){                                                                                            // 15\n  //TODO this method should probably live in the Velocity namespace velocity/mirrorInfo?                              // 16\n  Meteor.call(\"mirrorInfo\", function(error, mirrorInfo){                                                              // 17\n    if (mirrorInfo.isMirror){                                                                                         // 18\n      Session.set(\"mochaWebMirror\", true);                                                                            // 19\n      Meteor.setTimeout(function(){                                                                                   // 20\n        ddpParentConnection = DDP.connect(mirrorInfo.parentUrl);                                                      // 21\n        ddpParentConnection.call(\"velocity/reports/reset\", {framework: 'mocha'}, function(err, result){               // 22\n          // enable stack trace with line numbers with assertions                                                     // 23\n          chai.config.includeStack = true;                                                                            // 24\n          //TODO allow ui to be customized with Meteor.settings                                                       // 25\n          mocha.setup({reporter: MochaWeb.MeteorCollectionTestReporter, ui: \"bdd\"});                                  // 26\n          testSetupFunctions.forEach(function(testFunction){                                                          // 27\n            testFunction();                                                                                           // 28\n          });                                                                                                         // 29\n          mocha.run(function(){                                                                                       // 30\n            window.mochaWebClientTestsComplete = true;                                                                // 31\n            Meteor.call(\"clientTestsComplete\", function(err, result){                                                 // 32\n              if (err){                                                                                               // 33\n                console.error(\"ERROR INVOKING CLIENT TESTS COMPLETE\", err);                                           // 34\n              }                                                                                                       // 35\n            });                                                                                                       // 36\n          });                                                                                                         // 37\n        });                                                                                                           // 38\n      }, 0);                                                                                                          // 39\n    } else {                                                                                                          // 40\n      Session.set(\"mochaWebMirror\", false);                                                                           // 41\n    }                                                                                                                 // 42\n  });                                                                                                                 // 43\n});                                                                                                                   // 44\n                                                                                                                      // 45\nTemplate.mochaweb.helpers({                                                                                           // 46\n  mochaWebIFrameURL: function(){                                                                                      // 47\n    var mirror = VelocityMirrors.findOne({framework: \"mocha\", state: \"ready\"});                                       // 48\n    if (mirror && mirror.rootUrl){                                                                                    // 49\n      return mirror.rootUrl + mirror.rootUrlPath + \"&lastModified=\" + mirror.lastModified;                            // 50\n    }                                                                                                                 // 51\n    return null;                                                                                                      // 52\n  }                                                                                                                   // 53\n});                                                                                                                   // 54\n                                                                                                                      // 55\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mike:mocha'] = {\n  MochaWeb: MochaWeb\n};\n\n})();\n","servePath":"/packages/mike_mocha.js","sourceMap":{"version":3,"sources":["/packages/mike_mocha/template.client.js","/packages/mike_mocha/mocha.js","/packages/mike_mocha/reporter.js","/packages/mike_mocha/client.js"],"names":[],"mappingsnrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H","file":"/packages/mike_mocha.js","sourcesContent":["\nTemplate.__checkName(\"mochaweb\");\nTemplate[\"mochaweb\"] = new Template(\"Template.mochaweb\", (function() {\n  var view = this;\n  return HTML.IFRAME({\n    src: function() {\n      return Spacebars.mustache(view.lookup(\"mochaWebIFrameURL\"));\n    }\n  });\n}));\n",";(function(){\n\n// CommonJS require()\n\nfunction require(p){\n    var path = require.resolve(p)\n      , mod = require.modules[path];\n    if (!mod) throw new Error('failed to require \"' + p + '\"');\n    if (!mod.exports) {\n      mod.exports = {};\n      mod.call(mod.exports, mod, mod.exports, require.relative(path));\n    }\n    return mod.exports;\n  }\n\nrequire.modules = {};\n\nrequire.resolve = function (path){\n    var orig = path\n      , reg = path + '.js'\n      , index = path + '/index.js';\n    return require.modules[reg] && reg\n      || require.modules[index] && index\n      || orig;\n  };\n\nrequire.register = function (path, fn){\n    require.modules[path] = fn;\n  };\n\nrequire.relative = function (parent) {\n    return function(p){\n      if ('.' != p.charAt(0)) return require(p);\n\n      var path = parent.split('/')\n        , segs = p.split('/');\n      path.pop();\n\n      for (var i = 0; i < segs.length; i++) {\n        var seg = segs[i];\n        if ('..' == seg) path.pop();\n        else if ('.' != seg) path.push(seg);\n      }\n\n      return require(path.join('/'));\n    };\n  };\n\n\nrequire.register(\"browser/debug.js\", function(module, exports, require){\n\nmodule.exports = function(type){\n  return function(){\n  }\n};\n\n}); // module: browser/debug.js\n\nrequire.register(\"browser/diff.js\", function(module, exports, require){\n/* See LICENSE file for terms of use */\n\n/*\n * Text diff implementation.\n *\n * This library supports the following APIS:\n * JsDiff.diffChars: Character by character diff\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\n * JsDiff.diffLines: Line based diff\n *\n * JsDiff.diffCss: Diff targeted at CSS content\n *\n * These methods are based on the implementation proposed in\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\n */\nvar JsDiff = (function() {\n  /*jshint maxparams: 5*/\n  function clonePath(path) {\n    return { newPos: path.newPos, components: path.components.slice(0) };\n  }\n  function removeEmpty(array) {\n    var ret = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n    return ret;\n  }\n  function escapeHTML(s) {\n    var n = s;\n    n = n.replace(/&/g, '&amp;');\n    n = n.replace(/</g, '&lt;');\n    n = n.replace(/>/g, '&gt;');\n    n = n.replace(/\"/g, '&quot;');\n\n    return n;\n  }\n\n  var Diff = function(ignoreWhitespace) {\n    this.ignoreWhitespace = ignoreWhitespace;\n  };\n  Diff.prototype = {\n      diff: function(oldString, newString) {\n        // Handle the identity case (this is due to unrolling editLength == 0\n        if (newString === oldString) {\n          return [{ value: newString }];\n        }\n        if (!newString) {\n          return [{ value: oldString, removed: true }];\n        }\n        if (!oldString) {\n          return [{ value: newString, added: true }];\n        }\n\n        newString = this.tokenize(newString);\n        oldString = this.tokenize(oldString);\n\n        var newLen = newString.length, oldLen = oldString.length;\n        var maxEditLength = newLen + oldLen;\n        var bestPath = [{ newPos: -1, components: [] }];\n\n        // Seed editLength = 0\n        var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n        if (bestPath[0].newPos+1 >= newLen && oldPos+1 >= oldLen) {\n          return bestPath[0].components;\n        }\n\n        for (var editLength = 1; editLength <= maxEditLength; editLength++) {\n          for (var diagonalPath = -1*editLength; diagonalPath <= editLength; diagonalPath+=2) {\n            var basePath;\n            var addPath = bestPath[diagonalPath-1],\n                removePath = bestPath[diagonalPath+1];\n            oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n            if (addPath) {\n              // No one else is going to attempt to use this value, clear it\n              bestPath[diagonalPath-1] = undefined;\n            }\n\n            var canAdd = addPath && addPath.newPos+1 < newLen;\n            var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n            if (!canAdd && !canRemove) {\n              bestPath[diagonalPath] = undefined;\n              continue;\n            }\n\n            // Select the diagonal that we want to branch from. We select the prior\n            // path whose position in the new string is the farthest from the origin\n            // and does not pass the bounds of the diff graph\n            if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\n              basePath = clonePath(removePath);\n              this.pushComponent(basePath.components, oldString[oldPos], undefined, true);\n            } else {\n              basePath = clonePath(addPath);\n              basePath.newPos++;\n              this.pushComponent(basePath.components, newString[basePath.newPos], true, undefined);\n            }\n\n            var oldPos = this.extractCommon(basePath, newString, oldString, diagonalPath);\n\n            if (basePath.newPos+1 >= newLen && oldPos+1 >= oldLen) {\n              return basePath.components;\n            } else {\n              bestPath[diagonalPath] = basePath;\n            }\n          }\n        }\n      },\n\n      pushComponent: function(components, value, added, removed) {\n        var last = components[components.length-1];\n        if (last && last.added === added && last.removed === removed) {\n          // We need to clone here as the component clone operation is just\n          // as shallow array clone\n          components[components.length-1] =\n            {value: this.join(last.value, value), added: added, removed: removed };\n        } else {\n          components.push({value: value, added: added, removed: removed });\n        }\n      },\n      extractCommon: function(basePath, newString, oldString, diagonalPath) {\n        var newLen = newString.length,\n            oldLen = oldString.length,\n            newPos = basePath.newPos,\n            oldPos = newPos - diagonalPath;\n        while (newPos+1 < newLen && oldPos+1 < oldLen && this.equals(newString[newPos+1], oldString[oldPos+1])) {\n          newPos++;\n          oldPos++;\n\n          this.pushComponent(basePath.components, newString[newPos], undefined, undefined);\n        }\n        basePath.newPos = newPos;\n        return oldPos;\n      },\n\n      equals: function(left, right) {\n        var reWhitespace = /\\S/;\n        if (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right)) {\n          return true;\n        } else {\n          return left === right;\n        }\n      },\n      join: function(left, right) {\n        return left + right;\n      },\n      tokenize: function(value) {\n        return value;\n      }\n  };\n\n  var CharDiff = new Diff();\n\n  var WordDiff = new Diff(true);\n  var WordWithSpaceDiff = new Diff();\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/(\\s+|\\b)/));\n  };\n\n  var CssDiff = new Diff(true);\n  CssDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));\n  };\n\n  var LineDiff = new Diff();\n  LineDiff.tokenize = function(value) {\n    return value.split(/^/m);\n  };\n\n  return {\n    Diff: Diff,\n\n    diffChars: function(oldStr, newStr) { return CharDiff.diff(oldStr, newStr); },\n    diffWords: function(oldStr, newStr) { return WordDiff.diff(oldStr, newStr); },\n    diffWordsWithSpace: function(oldStr, newStr) { return WordWithSpaceDiff.diff(oldStr, newStr); },\n    diffLines: function(oldStr, newStr) { return LineDiff.diff(oldStr, newStr); },\n\n    diffCss: function(oldStr, newStr) { return CssDiff.diff(oldStr, newStr); },\n\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {\n      var ret = [];\n\n      ret.push('Index: ' + fileName);\n      ret.push('===================================================================');\n      ret.push('--- ' + fileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));\n      ret.push('+++ ' + fileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));\n\n      var diff = LineDiff.diff(oldStr, newStr);\n      if (!diff[diff.length-1].value) {\n        diff.pop();   // Remove trailing newline add\n      }\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier\n\n      function contextLines(lines) {\n        return lines.map(function(entry) { return ' ' + entry; });\n      }\n      function eofNL(curRange, i, current) {\n        var last = diff[diff.length-2],\n            isLast = i === diff.length-2,\n            isLastOfType = i === diff.length-3 && (current.added !== last.added || current.removed !== last.removed);\n\n        // Figure out if this is the last line for the given file and missing NL\n        if (!/\\n$/.test(current.value) && (isLast || isLastOfType)) {\n          curRange.push('\\\\ No newline at end of file');\n        }\n      }\n\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],\n          oldLine = 1, newLine = 1;\n      for (var i = 0; i < diff.length; i++) {\n        var current = diff[i],\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n        current.lines = lines;\n\n        if (current.added || current.removed) {\n          if (!oldRangeStart) {\n            var prev = diff[i-1];\n            oldRangeStart = oldLine;\n            newRangeStart = newLine;\n\n            if (prev) {\n              curRange = contextLines(prev.lines.slice(-4));\n              oldRangeStart -= curRange.length;\n              newRangeStart -= curRange.length;\n            }\n          }\n          curRange.push.apply(curRange, lines.map(function(entry) { return (current.added?'+':'-') + entry; }));\n          eofNL(curRange, i, current);\n\n          if (current.added) {\n            newLine += lines.length;\n          } else {\n            oldLine += lines.length;\n          }\n        } else {\n          if (oldRangeStart) {\n            // Close out any changes that have been output (or join overlapping)\n            if (lines.length <= 8 && i < diff.length-2) {\n              // Overlapping\n              curRange.push.apply(curRange, contextLines(lines));\n            } else {\n              // end the range and output\n              var contextSize = Math.min(lines.length, 4);\n              ret.push(\n                  '@@ -' + oldRangeStart + ',' + (oldLine-oldRangeStart+contextSize)\n                  + ' +' + newRangeStart + ',' + (newLine-newRangeStart+contextSize)\n                  + ' @@');\n              ret.push.apply(ret, curRange);\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));\n              if (lines.length <= 4) {\n                eofNL(ret, i, current);\n              }\n\n              oldRangeStart = 0;  newRangeStart = 0; curRange = [];\n            }\n          }\n          oldLine += lines.length;\n          newLine += lines.length;\n        }\n      }\n\n      return ret.join('\\n') + '\\n';\n    },\n\n    applyPatch: function(oldStr, uniDiff) {\n      var diffstr = uniDiff.split('\\n');\n      var diff = [];\n      var remEOFNL = false,\n          addEOFNL = false;\n\n      for (var i = (diffstr[0][0]==='I'?4:0); i < diffstr.length; i++) {\n        if(diffstr[i][0] === '@') {\n          var meh = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);\n          diff.unshift({\n            start:meh[3],\n            oldlength:meh[2],\n            oldlines:[],\n            newlength:meh[4],\n            newlines:[]\n          });\n        } else if(diffstr[i][0] === '+') {\n          diff[0].newlines.push(diffstr[i].substr(1));\n        } else if(diffstr[i][0] === '-') {\n          diff[0].oldlines.push(diffstr[i].substr(1));\n        } else if(diffstr[i][0] === ' ') {\n          diff[0].newlines.push(diffstr[i].substr(1));\n          diff[0].oldlines.push(diffstr[i].substr(1));\n        } else if(diffstr[i][0] === '\\\\') {\n          if (diffstr[i-1][0] === '+') {\n            remEOFNL = true;\n          } else if(diffstr[i-1][0] === '-') {\n            addEOFNL = true;\n          }\n        }\n      }\n\n      var str = oldStr.split('\\n');\n      for (var i = diff.length - 1; i >= 0; i--) {\n        var d = diff[i];\n        for (var j = 0; j < d.oldlength; j++) {\n          if(str[d.start-1+j] !== d.oldlines[j]) {\n            return false;\n          }\n        }\n        Array.prototype.splice.apply(str,[d.start-1,+d.oldlength].concat(d.newlines));\n      }\n\n      if (remEOFNL) {\n        while (!str[str.length-1]) {\n          str.pop();\n        }\n      } else if (addEOFNL) {\n        str.push('');\n      }\n      return str.join('\\n');\n    },\n\n    convertChangesToXML: function(changes){\n      var ret = [];\n      for ( var i = 0; i < changes.length; i++) {\n        var change = changes[i];\n        if (change.added) {\n          ret.push('<ins>');\n        } else if (change.removed) {\n          ret.push('<del>');\n        }\n\n        ret.push(escapeHTML(change.value));\n\n        if (change.added) {\n          ret.push('</ins>');\n        } else if (change.removed) {\n          ret.push('</del>');\n        }\n      }\n      return ret.join('');\n    },\n\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API\n    convertChangesToDMP: function(changes){\n      var ret = [], change;\n      for ( var i = 0; i < changes.length; i++) {\n        change = changes[i];\n        ret.push([(change.added ? 1 : change.removed ? -1 : 0), change.value]);\n      }\n      return ret;\n    }\n  };\n})();\n\nif (typeof module !== 'undefined') {\n    module.exports = JsDiff;\n}\n\n}); // module: browser/diff.js\n\nrequire.register(\"browser/events.js\", function(module, exports, require){\n\n/**\n * Module exports.\n */\n\nexports.EventEmitter = EventEmitter;\n\n/**\n * Check if `obj` is an array.\n */\n\nfunction isArray(obj) {\n  return '[object Array]' == {}.toString.call(obj);\n}\n\n/**\n * Event emitter constructor.\n *\n * @api public\n */\n\nfunction EventEmitter(){};\n\n/**\n * Adds a listener.\n *\n * @api public\n */\n\nEventEmitter.prototype.on = function (name, fn) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = fn;\n  } else if (isArray(this.$events[name])) {\n    this.$events[name].push(fn);\n  } else {\n    this.$events[name] = [this.$events[name], fn];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n/**\n * Adds a volatile listener.\n *\n * @api public\n */\n\nEventEmitter.prototype.once = function (name, fn) {\n  var self = this;\n\n  function on () {\n    self.removeListener(name, on);\n    fn.apply(this, arguments);\n  };\n\n  on.listener = fn;\n  this.on(name, on);\n\n  return this;\n};\n\n/**\n * Removes a listener.\n *\n * @api public\n */\n\nEventEmitter.prototype.removeListener = function (name, fn) {\n  if (this.$events && this.$events[name]) {\n    var list = this.$events[name];\n\n    if (isArray(list)) {\n      var pos = -1;\n\n      for (var i = 0, l = list.length; i < l; i++) {\n        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n          pos = i;\n          break;\n        }\n      }\n\n      if (pos < 0) {\n        return this;\n      }\n\n      list.splice(pos, 1);\n\n      if (!list.length) {\n        delete this.$events[name];\n      }\n    } else if (list === fn || (list.listener && list.listener === fn)) {\n      delete this.$events[name];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Removes all listeners for an event.\n *\n * @api public\n */\n\nEventEmitter.prototype.removeAllListeners = function (name) {\n  if (name === undefined) {\n    this.$events = {};\n    return this;\n  }\n\n  if (this.$events && this.$events[name]) {\n    this.$events[name] = null;\n  }\n\n  return this;\n};\n\n/**\n * Gets all listeners for a certain event.\n *\n * @api public\n */\n\nEventEmitter.prototype.listeners = function (name) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = [];\n  }\n\n  if (!isArray(this.$events[name])) {\n    this.$events[name] = [this.$events[name]];\n  }\n\n  return this.$events[name];\n};\n\n/**\n * Emits an event.\n *\n * @api public\n */\n\nEventEmitter.prototype.emit = function (name) {\n  if (!this.$events) {\n    return false;\n  }\n\n  var handler = this.$events[name];\n\n  if (!handler) {\n    return false;\n  }\n\n  var args = [].slice.call(arguments, 1);\n\n  if ('function' == typeof handler) {\n    handler.apply(this, args);\n  } else if (isArray(handler)) {\n    var listeners = handler.slice();\n\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n  } else {\n    return false;\n  }\n\n  return true;\n};\n}); // module: browser/events.js\n\nrequire.register(\"browser/fs.js\", function(module, exports, require){\n\n}); // module: browser/fs.js\n\nrequire.register(\"browser/path.js\", function(module, exports, require){\n\n}); // module: browser/path.js\n\nrequire.register(\"browser/progress.js\", function(module, exports, require){\n/**\n * Expose `Progress`.\n */\n\nmodule.exports = Progress;\n\n/**\n * Initialize a new `Progress` indicator.\n */\n\nfunction Progress() {\n  this.percent = 0;\n  this.size(0);\n  this.fontSize(11);\n  this.font('helvetica, arial, sans-serif');\n}\n\n/**\n * Set progress size to `n`.\n *\n * @param {Number} n\n * @return {Progress} for chaining\n * @api public\n */\n\nProgress.prototype.size = function(n){\n  this._size = n;\n  return this;\n};\n\n/**\n * Set text to `str`.\n *\n * @param {String} str\n * @return {Progress} for chaining\n * @api public\n */\n\nProgress.prototype.text = function(str){\n  this._text = str;\n  return this;\n};\n\n/**\n * Set font size to `n`.\n *\n * @param {Number} n\n * @return {Progress} for chaining\n * @api public\n */\n\nProgress.prototype.fontSize = function(n){\n  this._fontSize = n;\n  return this;\n};\n\n/**\n * Set font `family`.\n *\n * @param {String} family\n * @return {Progress} for chaining\n */\n\nProgress.prototype.font = function(family){\n  this._font = family;\n  return this;\n};\n\n/**\n * Update percentage to `n`.\n *\n * @param {Number} n\n * @return {Progress} for chaining\n */\n\nProgress.prototype.update = function(n){\n  this.percent = n;\n  return this;\n};\n\n/**\n * Draw on `ctx`.\n *\n * @param {CanvasRenderingContext2d} ctx\n * @return {Progress} for chaining\n */\n\nProgress.prototype.draw = function(ctx){\n  try {\n    var percent = Math.min(this.percent, 100)\n      , size = this._size\n      , half = size / 2\n      , x = half\n      , y = half\n      , rad = half - 1\n      , fontSize = this._fontSize;\n  \n    ctx.font = fontSize + 'px ' + this._font;\n  \n    var angle = Math.PI * 2 * (percent / 100);\n    ctx.clearRect(0, 0, size, size);\n  \n    // outer circle\n    ctx.strokeStyle = '#9f9f9f';\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, angle, false);\n    ctx.stroke();\n  \n    // inner circle\n    ctx.strokeStyle = '#eee';\n    ctx.beginPath();\n    ctx.arc(x, y, rad - 1, 0, angle, true);\n    ctx.stroke();\n  \n    // text\n    var text = this._text || (percent | 0) + '%'\n      , w = ctx.measureText(text).width;\n  \n    ctx.fillText(\n        text\n      , x - w / 2 + 1\n      , y + fontSize / 2 - 1);\n  } catch (ex) {} //don't fail if we can't render progress\n  return this;\n};\n\n}); // module: browser/progress.js\n\nrequire.register(\"browser/tty.js\", function(module, exports, require){\n\nexports.isatty = function(){\n  return true;\n};\n\nexports.getWindowSize = function(){\n  if ('innerHeight' in global) {\n    return [global.innerHeight, global.innerWidth];\n  } else {\n    // In a Web Worker, the DOM Window is not available.\n    return [640, 480];\n  }\n};\n\n}); // module: browser/tty.js\n\nrequire.register(\"context.js\", function(module, exports, require){\n\n/**\n * Expose `Context`.\n */\n\nmodule.exports = Context;\n\n/**\n * Initialize a new `Context`.\n *\n * @api private\n */\n\nfunction Context(){}\n\n/**\n * Set or get the context `Runnable` to `runnable`.\n *\n * @param {Runnable} runnable\n * @return {Context}\n * @api private\n */\n\nContext.prototype.runnable = function(runnable){\n  if (0 == arguments.length) return this._runnable;\n  this.test = this._runnable = runnable;\n  return this;\n};\n\n/**\n * Set test timeout `ms`.\n *\n * @param {Number} ms\n * @return {Context} self\n * @api private\n */\n\nContext.prototype.timeout = function(ms){\n  this.runnable().timeout(ms);\n  return this;\n};\n\n/**\n * Set test slowness threshold `ms`.\n *\n * @param {Number} ms\n * @return {Context} self\n * @api private\n */\n\nContext.prototype.slow = function(ms){\n  this.runnable().slow(ms);\n  return this;\n};\n\n/**\n * Inspect the context void of `._runnable`.\n *\n * @return {String}\n * @api private\n */\n\nContext.prototype.inspect = function(){\n  return JSON.stringify(this, function(key, val){\n    if ('_runnable' == key) return;\n    if ('test' == key) return;\n    return val;\n  }, 2);\n};\n\n}); // module: context.js\n\nrequire.register(\"hook.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\n\n/**\n * Expose `Hook`.\n */\n\nmodule.exports = Hook;\n\n/**\n * Initialize a new `Hook` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n */\n\nfunction Hook(title, fn) {\n  Runnable.call(this, title, fn);\n  this.type = 'hook';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\n\nfunction F(){};\nF.prototype = Runnable.prototype;\nHook.prototype = new F;\nHook.prototype.constructor = Hook;\n\n\n/**\n * Get or set the test `err`.\n *\n * @param {Error} err\n * @return {Error}\n * @api public\n */\n\nHook.prototype.error = function(err){\n  if (0 == arguments.length) {\n    var err = this._error;\n    this._error = null;\n    return err;\n  }\n\n  this._error = err;\n};\n\n}); // module: hook.js\n\nrequire.register(\"interfaces/bdd.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite')\n  , Test = require('../test')\n  , utils = require('../utils');\n\n/**\n * BDD-style interface:\n *\n *      describe('Array', function(){\n *        describe('#indexOf()', function(){\n *          it('should return -1 when not present', function(){\n *\n *          });\n *\n *          it('should return the index when present', function(){\n *\n *          });\n *        });\n *      });\n *\n */\n\nmodule.exports = function(suite){\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha){\n\n    /**\n     * Execute before running tests.\n     */\n\n    context.before = function(fn){\n      suites[0].beforeAll(fn);\n    };\n\n    /**\n     * Execute after running tests.\n     */\n\n    context.after = function(fn){\n      suites[0].afterAll(fn);\n    };\n\n    /**\n     * Execute before each test case.\n     */\n\n    context.beforeEach = function(fn){\n      suites[0].beforeEach(fn);\n    };\n\n    /**\n     * Execute after each test case.\n     */\n\n    context.afterEach = function(fn){\n      suites[0].afterEach(fn);\n    };\n\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.describe = context.context = function(title, fn){\n      var suite = Suite.create(suites[0], title);\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n      return suite;\n    };\n\n    /**\n     * Pending describe.\n     */\n\n    context.xdescribe =\n    context.xcontext =\n    context.describe.skip = function(title, fn){\n      var suite = Suite.create(suites[0], title);\n      suite.pending = true;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n    };\n\n    /**\n     * Exclusive suite.\n     */\n\n    context.describe.only = function(title, fn){\n      var suite = context.describe(title, fn);\n      mocha.grep(suite.fullTitle());\n      return suite;\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.it = context.specify = function(title, fn){\n      var suite = suites[0];\n      if (suite.pending) var fn = null;\n      var test = new Test(title, fn);\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.it.only = function(title, fn){\n      var test = context.it(title, fn);\n      var reString = '^' + utils.escapeRegexp(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n      return test;\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.xit =\n    context.xspecify =\n    context.it.skip = function(title){\n      context.it(title);\n    };\n  });\n};\n\n}); // module: interfaces/bdd.js\n\nrequire.register(\"interfaces/exports.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite')\n  , Test = require('../test');\n\n/**\n * TDD-style interface:\n *\n *     exports.Array = {\n *       '#indexOf()': {\n *         'should return -1 when the value is not present': function(){\n *\n *         },\n *\n *         'should return the correct index when the value is present': function(){\n *\n *         }\n *       }\n *     };\n *\n */\n\nmodule.exports = function(suite){\n  var suites = [suite];\n\n  suite.on('require', visit);\n\n  function visit(obj) {\n    var suite;\n    for (var key in obj) {\n      if ('function' == typeof obj[key]) {\n        var fn = obj[key];\n        switch (key) {\n          case 'before':\n            suites[0].beforeAll(fn);\n            break;\n          case 'after':\n            suites[0].afterAll(fn);\n            break;\n          case 'beforeEach':\n            suites[0].beforeEach(fn);\n            break;\n          case 'afterEach':\n            suites[0].afterEach(fn);\n            break;\n          default:\n            suites[0].addTest(new Test(key, fn));\n        }\n      } else {\n        var suite = Suite.create(suites[0], key);\n        suites.unshift(suite);\n        visit(obj[key]);\n        suites.shift();\n      }\n    }\n  }\n};\n\n}); // module: interfaces/exports.js\n\nrequire.register(\"interfaces/index.js\", function(module, exports, require){\n\nexports.bdd = require('./bdd');\nexports.tdd = require('./tdd');\nexports.qunit = require('./qunit');\nexports.exports = require('./exports');\n\n}); // module: interfaces/index.js\n\nrequire.register(\"interfaces/qunit.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite')\n  , Test = require('../test')\n  , utils = require('../utils');\n\n/**\n * QUnit-style interface:\n *\n *     suite('Array');\n *\n *     test('#length', function(){\n *       var arr = [1,2,3];\n *       ok(arr.length == 3);\n *     });\n *\n *     test('#indexOf()', function(){\n *       var arr = [1,2,3];\n *       ok(arr.indexOf(1) == 0);\n *       ok(arr.indexOf(2) == 1);\n *       ok(arr.indexOf(3) == 2);\n *     });\n *\n *     suite('String');\n *\n *     test('#length', function(){\n *       ok('foo'.length == 3);\n *     });\n *\n */\n\nmodule.exports = function(suite){\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha){\n\n    /**\n     * Execute before running tests.\n     */\n\n    context.before = function(fn){\n      suites[0].beforeAll(fn);\n    };\n\n    /**\n     * Execute after running tests.\n     */\n\n    context.after = function(fn){\n      suites[0].afterAll(fn);\n    };\n\n    /**\n     * Execute before each test case.\n     */\n\n    context.beforeEach = function(fn){\n      suites[0].beforeEach(fn);\n    };\n\n    /**\n     * Execute after each test case.\n     */\n\n    context.afterEach = function(fn){\n      suites[0].afterEach(fn);\n    };\n\n    /**\n     * Describe a \"suite\" with the given `title`.\n     */\n\n    context.suite = function(title){\n      if (suites.length > 1) suites.shift();\n      var suite = Suite.create(suites[0], title);\n      suites.unshift(suite);\n      return suite;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.suite.only = function(title, fn){\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function(title, fn){\n      var test = new Test(title, fn);\n      suites[0].addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn){\n      var test = context.test(title, fn);\n      var reString = '^' + utils.escapeRegexp(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.test.skip = function(title){\n      context.test(title);\n    };\n  });\n};\n\n}); // module: interfaces/qunit.js\n\nrequire.register(\"interfaces/tdd.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite')\n  , Test = require('../test')\n  , utils = require('../utils');;\n\n/**\n * TDD-style interface:\n *\n *      suite('Array', function(){\n *        suite('#indexOf()', function(){\n *          suiteSetup(function(){\n *\n *          });\n *\n *          test('should return -1 when not present', function(){\n *\n *          });\n *\n *          test('should return the index when present', function(){\n *\n *          });\n *\n *          suiteTeardown(function(){\n *\n *          });\n *        });\n *      });\n *\n */\n\nmodule.exports = function(suite){\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha){\n\n    /**\n     * Execute before each test case.\n     */\n\n    context.setup = function(fn){\n      suites[0].beforeEach(fn);\n    };\n\n    /**\n     * Execute after each test case.\n     */\n\n    context.teardown = function(fn){\n      suites[0].afterEach(fn);\n    };\n\n    /**\n     * Execute before the suite.\n     */\n\n    context.suiteSetup = function(fn){\n      suites[0].beforeAll(fn);\n    };\n\n    /**\n     * Execute after the suite.\n     */\n\n    context.suiteTeardown = function(fn){\n      suites[0].afterAll(fn);\n    };\n\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.suite = function(title, fn){\n      var suite = Suite.create(suites[0], title);\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n      return suite;\n    };\n\n    /**\n     * Pending suite.\n     */\n    context.suite.skip = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.pending = true;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.suite.only = function(title, fn){\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function(title, fn){\n      var suite = suites[0];\n      if (suite.pending) var fn = null;\n      var test = new Test(title, fn);\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn){\n      var test = context.test(title, fn);\n      var reString = '^' + utils.escapeRegexp(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.test.skip = function(title){\n      context.test(title);\n    };\n  });\n};\n\n}); // module: interfaces/tdd.js\n\nrequire.register(\"mocha.js\", function(module, exports, require){\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar path = require('browser/path')\n  , utils = require('./utils');\n\n/**\n * Expose `Mocha`.\n */\n\nexports = module.exports = Mocha;\n\n/**\n * Expose internals.\n */\n\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\nexports.reporters = require('./reporters');\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\nexports.Runner = require('./runner');\nexports.Suite = require('./suite');\nexports.Hook = require('./hook');\nexports.Test = require('./test');\n\n/**\n * Return image `name` path.\n *\n * @param {String} name\n * @return {String}\n * @api private\n */\n\nfunction image(name) {\n  return __dirname + '/../images/' + name + '.png';\n}\n\n/**\n * Setup mocha with `options`.\n *\n * Options:\n *\n *   - `ui` name \"bdd\", \"tdd\", \"exports\" etc\n *   - `reporter` reporter instance, defaults to `mocha.reporters.Dot`\n *   - `globals` array of accepted globals\n *   - `timeout` timeout in milliseconds\n *   - `bail` bail on the first test failure\n *   - `slow` milliseconds to wait before considering a test slow\n *   - `ignoreLeaks` ignore global leaks\n *   - `grep` string or regexp to filter tests with\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Mocha(options) {\n  options = options || {};\n  this.files = [];\n  this.options = options;\n  this.grep(options.grep);\n  this.suite = new exports.Suite('', new exports.Context);\n  this.ui(options.ui);\n  this.bail(options.bail);\n  this.reporter(options.reporter);\n  if (null != options.timeout) this.timeout(options.timeout);\n  this.useColors(options.useColors)\n  if (options.slow) this.slow(options.slow);\n\n  this.suite.on('pre-require', function (context) {\n    exports.afterEach = context.afterEach || context.teardown;\n    exports.after = context.after || context.suiteTeardown;\n    exports.beforeEach = context.beforeEach || context.setup;\n    exports.before = context.before || context.suiteSetup;\n    exports.describe = context.describe || context.suite;\n    exports.it = context.it || context.test;\n    exports.setup = context.setup || context.beforeEach;\n    exports.suiteSetup = context.suiteSetup || context.before;\n    exports.suiteTeardown = context.suiteTeardown || context.after;\n    exports.suite = context.suite || context.describe;\n    exports.teardown = context.teardown || context.afterEach;\n    exports.test = context.test || context.it;\n  });\n}\n\n/**\n * Enable or disable bailing on the first failure.\n *\n * @param {Boolean} [bail]\n * @api public\n */\n\nMocha.prototype.bail = function(bail){\n  if (0 == arguments.length) bail = true;\n  this.suite.bail(bail);\n  return this;\n};\n\n/**\n * Add test `file`.\n *\n * @param {String} file\n * @api public\n */\n\nMocha.prototype.addFile = function(file){\n  this.files.push(file);\n  return this;\n};\n\n/**\n * Set reporter to `reporter`, defaults to \"dot\".\n *\n * @param {String|Function} reporter name or constructor\n * @api public\n */\n\nMocha.prototype.reporter = function(reporter){\n  if ('function' == typeof reporter) {\n    this._reporter = reporter;\n  } else {\n    reporter = reporter || 'dot';\n    var _reporter;\n    try { _reporter = require('./reporters/' + reporter); } catch (err) {};\n    if (!_reporter) try { _reporter = require(reporter); } catch (err) {};\n    if (!_reporter && reporter === 'teamcity')\n      console.warn('The Teamcity reporter was moved to a package named ' +\n        'mocha-teamcity-reporter ' +\n        '(https://npmjs.org/package/mocha-teamcity-reporter).');\n    if (!_reporter) throw new Error('invalid reporter \"' + reporter + '\"');\n    this._reporter = _reporter;\n  }\n  return this;\n};\n\n/**\n * Set test UI `name`, defaults to \"bdd\".\n *\n * @param {String} bdd\n * @api public\n */\n\nMocha.prototype.ui = function(name){\n  name = name || 'bdd';\n  this._ui = exports.interfaces[name];\n  if (!this._ui) try { this._ui = require(name); } catch (err) {};\n  if (!this._ui) throw new Error('invalid interface \"' + name + '\"');\n  this._ui = this._ui(this.suite);\n  return this;\n};\n\n/**\n * Load registered files.\n *\n * @api private\n */\n\nMocha.prototype.loadFiles = function(fn){\n  var self = this;\n  var suite = this.suite;\n  var pending = this.files.length;\n  this.files.forEach(function(file){\n    file = path.resolve(file);\n    suite.emit('pre-require', global, file, self);\n    suite.emit('require', require(file), file, self);\n    suite.emit('post-require', global, file, self);\n    --pending || (fn && fn());\n  });\n};\n\n/**\n * Enable growl support.\n *\n * @api private\n */\n\nMocha.prototype._growl = function(runner, reporter) {\n  var notify = require('growl');\n\n  runner.on('end', function(){\n    var stats = reporter.stats;\n    if (stats.failures) {\n      var msg = stats.failures + ' of ' + runner.total + ' tests failed';\n      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });\n    } else {\n      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {\n          name: 'mocha'\n        , title: 'Passed'\n        , image: image('ok')\n      });\n    }\n  });\n};\n\n/**\n * Add regexp to grep, if `re` is a string it is escaped.\n *\n * @param {RegExp|String} re\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.grep = function(re){\n  this.options.grep = 'string' == typeof re\n    ? new RegExp(utils.escapeRegexp(re))\n    : re;\n  return this;\n};\n\n/**\n * Invert `.grep()` matches.\n *\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.invert = function(){\n  this.options.invert = true;\n  return this;\n};\n\n/**\n * Ignore global leaks.\n *\n * @param {Boolean} ignore\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.ignoreLeaks = function(ignore){\n  this.options.ignoreLeaks = !!ignore;\n  return this;\n};\n\n/**\n * Enable global leak checking.\n *\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.checkLeaks = function(){\n  this.options.ignoreLeaks = false;\n  return this;\n};\n\n/**\n * Enable growl support.\n *\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.growl = function(){\n  this.options.growl = true;\n  return this;\n};\n\n/**\n * Ignore `globals` array or string.\n *\n * @param {Array|String} globals\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.globals = function(globals){\n  this.options.globals = (this.options.globals || []).concat(globals);\n  return this;\n};\n\n/**\n * Emit color output.\n *\n * @param {Boolean} colors\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.useColors = function(colors){\n  this.options.useColors = arguments.length && colors != undefined\n    ? colors\n    : true;\n  return this;\n};\n\n/**\n * Use inline diffs rather than +/-.\n *\n * @param {Boolean} inlineDiffs\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.useInlineDiffs = function(inlineDiffs) {\n  this.options.useInlineDiffs = arguments.length && inlineDiffs != undefined\n  ? inlineDiffs\n  : false;\n  return this;\n};\n\n/**\n * Set the timeout in milliseconds.\n *\n * @param {Number} timeout\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.timeout = function(timeout){\n  this.suite.timeout(timeout);\n  return this;\n};\n\n/**\n * Set slowness threshold in milliseconds.\n *\n * @param {Number} slow\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.slow = function(slow){\n  this.suite.slow(slow);\n  return this;\n};\n\n/**\n * Makes all tests async (accepting a callback)\n *\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.asyncOnly = function(){\n  this.options.asyncOnly = true;\n  return this;\n};\n\n/**\n * Run tests and invoke `fn()` when complete.\n *\n * @param {Function} fn\n * @return {Runner}\n * @api public\n */\n\nMocha.prototype.run = function(fn){\n  if (this.files.length) this.loadFiles();\n  var suite = this.suite;\n  var options = this.options;\n  var runner = new exports.Runner(suite);\n  var reporter = new this._reporter(runner);\n  runner.ignoreLeaks = false !== options.ignoreLeaks;\n  runner.asyncOnly = options.asyncOnly;\n  if (options.grep) runner.grep(options.grep, options.invert);\n  if (options.globals) runner.globals(options.globals);\n  if (options.growl) this._growl(runner, reporter);\n  exports.reporters.Base.useColors = options.useColors;\n  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;\n  return runner.run(fn);\n};\n\n}); // module: mocha.js\n\nrequire.register(\"ms.js\", function(module, exports, require){\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long ? longFormat(val) : shortFormat(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  var match = /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction shortFormat(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction longFormat(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n}); // module: ms.js\n\nrequire.register(\"reporters/base.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar tty = require('browser/tty')\n  , diff = require('browser/diff')\n  , ms = require('../ms')\n  , utils = require('../utils');\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date\n  , setTimeout = global.setTimeout\n  , setInterval = global.setInterval\n  , clearTimeout = global.clearTimeout\n  , clearInterval = global.clearInterval;\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = tty.isatty(1) && tty.isatty(2);\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Enable coloring by default.\n */\n\nexports.useColors = isatty || (process.env.MOCHA_COLORS !== undefined);\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n    'pass': 90\n  , 'fail': 31\n  , 'bright pass': 92\n  , 'bright fail': 91\n  , 'bright yellow': 93\n  , 'pending': 36\n  , 'suite': 0\n  , 'error title': 0\n  , 'error message': 31\n  , 'error stack': 90\n  , 'checkmark': 32\n  , 'fast': 90\n  , 'medium': 33\n  , 'slow': 31\n  , 'green': 32\n  , 'light': 90\n  , 'diff gutter': 90\n  , 'diff added': 42\n  , 'diff removed': 41\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․'\n};\n\n// With node.js on Windows: use symbols available in terminal default fonts\nif ('win32' == process.platform) {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @param {String} type\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nvar color = exports.color = function(type, str) {\n  if (!exports.useColors) return str;\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Expose term window size, with some\n * defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: isatty\n    ? process.stdout.getWindowSize\n      ? process.stdout.getWindowSize(1)[0]\n      : tty.getWindowSize()[1]\n    : 75\n};\n\n/**\n * Expose some basic cursor interactions\n * that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function(){\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function(){\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function(){\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function(){\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function(){\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\n/**\n * Outut the given `failures` as a list.\n *\n * @param {Array} failures\n * @api public\n */\n\nexports.list = function(failures){\n  console.error();\n  failures.forEach(function(test, i){\n    // format\n    var fmt = color('error title', '  %s) %s:\\n')\n      + color('error message', '     %s')\n      + color('error stack', '\\n%s\\n');\n\n    // msg\n    var err = test.err\n      , message = err.message || ''\n      , stack = err.stack || message\n      , index = stack.indexOf(message) + message.length\n      , msg = stack.slice(0, index)\n      , actual = err.actual\n      , expected = err.expected\n      , escape = true;\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n\n    // explicitly show diff\n    if (err.showDiff && sameType(actual, expected)) {\n      escape = false;\n      err.actual = actual = stringify(canonicalize(actual));\n      err.expected = expected = stringify(canonicalize(expected));\n    }\n\n    // actual / expected diff\n    if ('string' == typeof actual && 'string' == typeof expected) {\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      if (exports.inlineDiffs) {\n        msg += inlineDiff(err, escape);\n      } else {\n        msg += unifiedDiff(err, escape);\n      }\n    }\n\n    // indent stack trace without msg\n    stack = stack.slice(index ? index + 1 : index)\n      .replace(/^/gm, '  ');\n\n    console.error(fmt, (i + 1), test.fullTitle(), msg, stack);\n  });\n};\n\n/**\n * Initialize a new `Base` reporter.\n *\n * All other reporters generally\n * inherit from this reporter, providing\n * stats such as test duration, number\n * of tests passed / failed etc.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Base(runner) {\n  var self = this\n    , stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 }\n    , failures = this.failures = [];\n\n  if (!runner) return;\n  this.runner = runner;\n\n  runner.stats = stats;\n\n  runner.on('start', function(){\n    stats.start = new Date;\n  });\n\n  runner.on('suite', function(suite){\n    stats.suites = stats.suites || 0;\n    suite.root || stats.suites++;\n  });\n\n  runner.on('test end', function(test){\n    stats.tests = stats.tests || 0;\n    stats.tests++;\n  });\n\n  runner.on('pass', function(test){\n    stats.passes = stats.passes || 0;\n\n    var medium = test.slow() / 2;\n    test.speed = test.duration > test.slow()\n      ? 'slow'\n      : test.duration > medium\n        ? 'medium'\n        : 'fast';\n\n    stats.passes++;\n  });\n\n  runner.on('fail', function(test, err){\n    stats.failures = stats.failures || 0;\n    stats.failures++;\n    test.err = err;\n    failures.push(test);\n  });\n\n  runner.on('end', function(){\n    stats.end = new Date;\n    stats.duration = new Date - stats.start;\n  });\n\n  runner.on('pending', function(){\n    stats.pending++;\n  });\n}\n\n/**\n * Output common epilogue used by many of\n * the bundled reporters.\n *\n * @api public\n */\n\nBase.prototype.epilogue = function(){\n  var stats = this.stats;\n  var tests;\n  var fmt;\n\n  console.log();\n\n  // passes\n  fmt = color('bright pass', ' ')\n    + color('green', ' %d passing')\n    + color('light', ' (%s)');\n\n  console.log(fmt,\n    stats.passes || 0,\n    ms(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ')\n      + color('pending', ' %d pending');\n\n    console.log(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    console.error(fmt,\n      stats.failures);\n\n    Base.list(this.failures);\n    console.error();\n  }\n\n  console.log();\n};\n\n/**\n * Pad the given `str` to `len`.\n *\n * @param {String} str\n * @param {String} len\n * @return {String}\n * @api private\n */\n\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n\n/**\n * Returns an inline diff between 2 strings with coloured ANSI output\n *\n * @param {Error} Error with actual/expected\n * @return {String} Diff\n * @api private\n */\n\nfunction inlineDiff(err, escape) {\n  var msg = errorDiff(err, 'WordsWithSpace', escape);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function(str, i){\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  }\n\n  // legend\n  msg = '\\n'\n    + color('diff removed', 'actual')\n    + ' '\n    + color('diff added', 'expected')\n    + '\\n\\n'\n    + msg\n    + '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns a unified diff between 2 strings\n *\n * @param {Error} Error with actual/expected\n * @return {String} Diff\n * @api private\n */\n\nfunction unifiedDiff(err, escape) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (escape) {\n      line = escapeInvisibles(line);\n    }\n    if (line[0] === '+') return indent + colorLines('diff added', line);\n    if (line[0] === '-') return indent + colorLines('diff removed', line);\n    if (line.match(/\\@\\@/)) return null;\n    if (line.match(/\\\\ No newline/)) return null;\n    else return indent + line;\n  }\n  function notBlank(line) {\n    return line != null;\n  }\n  msg = diff.createPatch('string', err.actual, err.expected);\n  var lines = msg.split('\\n').splice(4);\n  return '\\n      '\n         + colorLines('diff added',   '+ expected') + ' '\n         + colorLines('diff removed', '- actual')\n         + '\\n\\n'\n         + lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n\n/**\n * Return a character diff for `err`.\n *\n * @param {Error} err\n * @return {String}\n * @api private\n */\n\nfunction errorDiff(err, type, escape) {\n  var actual   = escape ? escapeInvisibles(err.actual)   : err.actual;\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;\n  return diff['diff' + type](actual, expected).map(function(str){\n    if (str.added) return colorLines('diff added', str.value);\n    if (str.removed) return colorLines('diff removed', str.value);\n    return str.value;\n  }).join('');\n}\n\n/**\n * Returns a string with all invisible characters in plain text\n *\n * @param {String} line\n * @return {String}\n * @api private\n */\nfunction escapeInvisibles(line) {\n    return line.replace(/\\t/g, '<tab>')\n               .replace(/\\r/g, '<CR>')\n               .replace(/\\n/g, '<LF>\\n');\n}\n\n/**\n * Color lines for `str`, using the color `name`.\n *\n * @param {String} name\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function(str){\n    return color(name, str);\n  }).join('\\n');\n}\n\n/**\n * Stringify `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction stringify(obj) {\n  if (obj instanceof RegExp) return obj.toString();\n  return JSON.stringify(obj, null, 2);\n}\n\n/**\n * Return a new object that has the keys in sorted order.\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\n function canonicalize(obj, stack) {\n   stack = stack || [];\n\n   if (utils.indexOf(stack, obj) !== -1) return obj;\n\n   var canonicalizedObj;\n\n   if ('[object Array]' == {}.toString.call(obj)) {\n     stack.push(obj);\n     canonicalizedObj = utils.map(obj, function(item) {\n       return canonicalize(item, stack);\n     });\n     stack.pop();\n   } else if (typeof obj === 'object' && obj !== null) {\n     stack.push(obj);\n     canonicalizedObj = {};\n     utils.forEach(utils.keys(obj).sort(), function(key) {\n       canonicalizedObj[key] = canonicalize(obj[key], stack);\n     });\n     stack.pop();\n   } else {\n     canonicalizedObj = obj;\n   }\n\n   return canonicalizedObj;\n }\n\n/**\n * Check that a / b have the same type.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Boolean}\n * @api private\n */\n\nfunction sameType(a, b) {\n  a = Object.prototype.toString.call(a);\n  b = Object.prototype.toString.call(b);\n  return a == b;\n}\n\n\n}); // module: reporters/base.js\n\nrequire.register(\"reporters/doc.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , utils = require('../utils');\n\n/**\n * Expose `Doc`.\n */\n\nexports = module.exports = Doc;\n\n/**\n * Initialize a new `Doc` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Doc(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , total = runner.total\n    , indents = 2;\n\n  function indent() {\n    return Array(indents).join('  ');\n  }\n\n  runner.on('suite', function(suite){\n    if (suite.root) return;\n    ++indents;\n    console.log('%s<section class=\"suite\">', indent());\n    ++indents;\n    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));\n    console.log('%s<dl>', indent());\n  });\n\n  runner.on('suite end', function(suite){\n    if (suite.root) return;\n    console.log('%s</dl>', indent());\n    --indents;\n    console.log('%s</section>', indent());\n    --indents;\n  });\n\n  runner.on('pass', function(test){\n    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));\n    var code = utils.escape(utils.clean(test.fn.toString()));\n    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);\n  });\n}\n\n}); // module: reporters/doc.js\n\nrequire.register(\"reporters/dot.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , color = Base.color;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = Dot;\n\n/**\n * Initialize a new `Dot` matrix test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Dot(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , width = Base.window.width * .75 | 0\n    , n = 0;\n\n  runner.on('start', function(){\n    process.stdout.write('\\n  ');\n  });\n\n  runner.on('pending', function(test){\n    process.stdout.write(color('pending', Base.symbols.dot));\n  });\n\n  runner.on('pass', function(test){\n    if (++n % width == 0) process.stdout.write('\\n  ');\n    if ('slow' == test.speed) {\n      process.stdout.write(color('bright yellow', Base.symbols.dot));\n    } else {\n      process.stdout.write(color(test.speed, Base.symbols.dot));\n    }\n  });\n\n  runner.on('fail', function(test, err){\n    if (++n % width == 0) process.stdout.write('\\n  ');\n    process.stdout.write(color('fail', Base.symbols.dot));\n  });\n\n  runner.on('end', function(){\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nDot.prototype = new F;\nDot.prototype.constructor = Dot;\n\n}); // module: reporters/dot.js\n\nrequire.register(\"reporters/html-cov.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar JSONCov = require('./json-cov')\n  , fs = require('browser/fs');\n\n/**\n * Expose `HTMLCov`.\n */\n\nexports = module.exports = HTMLCov;\n\n/**\n * Initialize a new `JsCoverage` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction HTMLCov(runner) {\n  var jade = require('jade')\n    , file = __dirname + '/templates/coverage.jade'\n    , str = fs.readFileSync(file, 'utf8')\n    , fn = jade.compile(str, { filename: file })\n    , self = this;\n\n  JSONCov.call(this, runner, false);\n\n  runner.on('end', function(){\n    process.stdout.write(fn({\n        cov: self.cov\n      , coverageClass: coverageClass\n    }));\n  });\n}\n\n/**\n * Return coverage class for `n`.\n *\n * @return {String}\n * @api private\n */\n\nfunction coverageClass(n) {\n  if (n >= 75) return 'high';\n  if (n >= 50) return 'medium';\n  if (n >= 25) return 'low';\n  return 'terrible';\n}\n}); // module: reporters/html-cov.js\n\nrequire.register(\"reporters/html.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , utils = require('../utils')\n  , Progress = require('../browser/progress')\n  , escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date\n  , setTimeout = global.setTimeout\n  , setInterval = global.setInterval\n  , clearTimeout = global.clearTimeout\n  , clearInterval = global.clearInterval;\n\n/**\n * Expose `HTML`.\n */\n\nexports = module.exports = HTML;\n\n/**\n * Stats template.\n */\n\nvar statsTemplate = '<ul id=\"mocha-stats\">'\n  + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>'\n  + '<li class=\"passes\"><a href=\"#\">passes:</a> <em>0</em></li>'\n  + '<li class=\"failures\"><a href=\"#\">failures:</a> <em>0</em></li>'\n  + '<li class=\"duration\">duration: <em>0</em>s</li>'\n  + '</ul>';\n\n/**\n * Initialize a new `HTML` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction HTML(runner, root) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , total = runner.total\n    , stat = fragment(statsTemplate)\n    , items = stat.getElementsByTagName('li')\n    , passes = items[1].getElementsByTagName('em')[0]\n    , passesLink = items[1].getElementsByTagName('a')[0]\n    , failures = items[2].getElementsByTagName('em')[0]\n    , failuresLink = items[2].getElementsByTagName('a')[0]\n    , duration = items[3].getElementsByTagName('em')[0]\n    , canvas = stat.getElementsByTagName('canvas')[0]\n    , report = fragment('<ul id=\"mocha-report\"></ul>')\n    , stack = [report]\n    , progress\n    , ctx\n\n  root = root || document.getElementById('mocha');\n\n  if (canvas.getContext) {\n    var ratio = window.devicePixelRatio || 1;\n    canvas.style.width = canvas.width;\n    canvas.style.height = canvas.height;\n    canvas.width *= ratio;\n    canvas.height *= ratio;\n    ctx = canvas.getContext('2d');\n    ctx.scale(ratio, ratio);\n    progress = new Progress;\n  }\n\n  if (!root) return error('#mocha div missing, add it to your document');\n\n  // pass toggle\n  on(passesLink, 'click', function(){\n    unhide();\n    var name = /pass/.test(report.className) ? '' : ' pass';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) hideSuitesWithout('test pass');\n  });\n\n  // failure toggle\n  on(failuresLink, 'click', function(){\n    unhide();\n    var name = /fail/.test(report.className) ? '' : ' fail';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) hideSuitesWithout('test fail');\n  });\n\n  root.appendChild(stat);\n  root.appendChild(report);\n\n  if (progress) progress.size(40);\n\n  runner.on('suite', function(suite){\n    if (suite.root) return;\n\n    // suite\n    var url = self.suiteURL(suite);\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));\n\n    // container\n    stack[0].appendChild(el);\n    stack.unshift(document.createElement('ul'));\n    el.appendChild(stack[0]);\n  });\n\n  runner.on('suite end', function(suite){\n    if (suite.root) return;\n    stack.shift();\n  });\n\n  runner.on('fail', function(test, err){\n    if ('hook' == test.type) runner.emit('test end', test);\n  });\n\n  runner.on('test end', function(test){\n    // TODO: add to stats\n    var percent = stats.tests / this.total * 100 | 0;\n    if (progress) progress.update(percent).draw(ctx);\n\n    // update stats\n    var ms = new Date - stats.start;\n    text(passes, stats.passes);\n    text(failures, stats.failures);\n    text(duration, (ms / 1000).toFixed(2));\n\n    // test\n    if ('passed' == test.state) {\n      var url = self.testURL(test);\n      var el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {\n      var el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);\n    } else {\n      var el = fragment('<li class=\"test fail\"><h2>%e <a href=\"?grep=%e\" class=\"replay\">‣</a></h2></li>', test.title, encodeURIComponent(test.fullTitle()));\n      var str = test.err.stack || test.err.toString();\n\n      // FF / Opera do not add the message\n      if (!~str.indexOf(test.err.message)) {\n        str = test.err.message + '\\n' + str;\n      }\n\n      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we\n      // check for the result of the stringifying.\n      if ('[object Error]' == str) str = test.err.message;\n\n      // Safari doesn't give you a stack. Let's at least provide a source line.\n      if (!test.err.stack && test.err.sourceURL && test.err.line !== undefined) {\n        str += \"\\n(\" + test.err.sourceURL + \":\" + test.err.line + \")\";\n      }\n\n      el.appendChild(fragment('<pre class=\"error\">%e</pre>', str));\n    }\n\n    // toggle code\n    // TODO: defer\n    if (!test.pending) {\n      var h2 = el.getElementsByTagName('h2')[0];\n\n      on(h2, 'click', function(){\n        pre.style.display = 'none' == pre.style.display\n          ? 'block'\n          : 'none';\n      });\n\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.fn.toString()));\n      el.appendChild(pre);\n      pre.style.display = 'none';\n    }\n\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.\n    if (stack[0]) stack[0].appendChild(el);\n  });\n}\n\n/**\n * Provide suite URL\n *\n * @param {Object} [suite]\n */\n\nHTML.prototype.suiteURL = function(suite){\n  return '?grep=' + encodeURIComponent(suite.fullTitle());\n};\n\n/**\n * Provide test URL\n *\n * @param {Object} [test]\n */\n\nHTML.prototype.testURL = function(test){\n  return '?grep=' + encodeURIComponent(test.fullTitle());\n};\n\n/**\n * Display error `msg`.\n */\n\nfunction error(msg) {\n  document.body.appendChild(fragment('<div id=\"mocha-error\">%s</div>', msg));\n}\n\n/**\n * Return a DOM fragment from `html`.\n */\n\nfunction fragment(html) {\n  var args = arguments\n    , div = document.createElement('div')\n    , i = 1;\n\n  div.innerHTML = html.replace(/%([se])/g, function(_, type){\n    switch (type) {\n      case 's': return String(args[i++]);\n      case 'e': return escape(args[i++]);\n    }\n  });\n\n  return div.firstChild;\n}\n\n/**\n * Check for suites that do not have elements\n * with `classname`, and hide them.\n */\n\nfunction hideSuitesWithout(classname) {\n  var suites = document.getElementsByClassName('suite');\n  for (var i = 0; i < suites.length; i++) {\n    var els = suites[i].getElementsByClassName(classname);\n    if (0 == els.length) suites[i].className += ' hidden';\n  }\n}\n\n/**\n * Unhide .hidden suites.\n */\n\nfunction unhide() {\n  var els = document.getElementsByClassName('suite hidden');\n  for (var i = 0; i < els.length; ++i) {\n    els[i].className = els[i].className.replace('suite hidden', 'suite');\n  }\n}\n\n/**\n * Set `el` text to `str`.\n */\n\nfunction text(el, str) {\n  if (el.textContent) {\n    el.textContent = str;\n  } else {\n    el.innerText = str;\n  }\n}\n\n/**\n * Listen on `event` with callback `fn`.\n */\n\nfunction on(el, event, fn) {\n  if (el.addEventListener) {\n    el.addEventListener(event, fn, false);\n  } else {\n    el.attachEvent('on' + event, fn);\n  }\n}\n\n}); // module: reporters/html.js\n\nrequire.register(\"reporters/index.js\", function(module, exports, require){\n\nexports.Base = require('./base');\nexports.Dot = require('./dot');\nexports.Doc = require('./doc');\nexports.TAP = require('./tap');\nexports.JSON = require('./json');\nexports.HTML = require('./html');\nexports.List = require('./list');\nexports.Min = require('./min');\nexports.Spec = require('./spec');\nexports.Nyan = require('./nyan');\nexports.XUnit = require('./xunit');\nexports.Markdown = require('./markdown');\nexports.Progress = require('./progress');\nexports.Landing = require('./landing');\nexports.JSONCov = require('./json-cov');\nexports.HTMLCov = require('./html-cov');\nexports.JSONStream = require('./json-stream');\n\n}); // module: reporters/index.js\n\nrequire.register(\"reporters/json-cov.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `JSONCov`.\n */\n\nexports = module.exports = JSONCov;\n\n/**\n * Initialize a new `JsCoverage` reporter.\n *\n * @param {Runner} runner\n * @param {Boolean} output\n * @api public\n */\n\nfunction JSONCov(runner, output) {\n  var self = this\n    , output = 1 == arguments.length ? true : output;\n\n  Base.call(this, runner);\n\n  var tests = []\n    , failures = []\n    , passes = [];\n\n  runner.on('test end', function(test){\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test){\n    passes.push(test);\n  });\n\n  runner.on('fail', function(test){\n    failures.push(test);\n  });\n\n  runner.on('end', function(){\n    var cov = global._$jscoverage || {};\n    var result = self.cov = map(cov);\n    result.stats = self.stats;\n    result.tests = tests.map(clean);\n    result.failures = failures.map(clean);\n    result.passes = passes.map(clean);\n    if (!output) return;\n    process.stdout.write(JSON.stringify(result, null, 2 ));\n  });\n}\n\n/**\n * Map jscoverage data to a JSON structure\n * suitable for reporting.\n *\n * @param {Object} cov\n * @return {Object}\n * @api private\n */\n\nfunction map(cov) {\n  var ret = {\n      instrumentation: 'node-jscoverage'\n    , sloc: 0\n    , hits: 0\n    , misses: 0\n    , coverage: 0\n    , files: []\n  };\n\n  for (var filename in cov) {\n    var data = coverage(filename, cov[filename]);\n    ret.files.push(data);\n    ret.hits += data.hits;\n    ret.misses += data.misses;\n    ret.sloc += data.sloc;\n  }\n\n  ret.files.sort(function(a, b) {\n    return a.filename.localeCompare(b.filename);\n  });\n\n  if (ret.sloc > 0) {\n    ret.coverage = (ret.hits / ret.sloc) * 100;\n  }\n\n  return ret;\n};\n\n/**\n * Map jscoverage data for a single source file\n * to a JSON structure suitable for reporting.\n *\n * @param {String} filename name of the source file\n * @param {Object} data jscoverage coverage data\n * @return {Object}\n * @api private\n */\n\nfunction coverage(filename, data) {\n  var ret = {\n    filename: filename,\n    coverage: 0,\n    hits: 0,\n    misses: 0,\n    sloc: 0,\n    source: {}\n  };\n\n  data.source.forEach(function(line, num){\n    num++;\n\n    if (data[num] === 0) {\n      ret.misses++;\n      ret.sloc++;\n    } else if (data[num] !== undefined) {\n      ret.hits++;\n      ret.sloc++;\n    }\n\n    ret.source[num] = {\n        source: line\n      , coverage: data[num] === undefined\n        ? ''\n        : data[num]\n    };\n  });\n\n  ret.coverage = ret.hits / ret.sloc * 100;\n\n  return ret;\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @param {Object} test\n * @return {Object}\n * @api private\n */\n\nfunction clean(test) {\n  return {\n      title: test.title\n    , fullTitle: test.fullTitle()\n    , duration: test.duration\n  }\n}\n\n}); // module: reporters/json-cov.js\n\nrequire.register(\"reporters/json-stream.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , color = Base.color;\n\n/**\n * Expose `List`.\n */\n\nexports = module.exports = List;\n\n/**\n * Initialize a new `List` test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction List(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , total = runner.total;\n\n  runner.on('start', function(){\n    console.log(JSON.stringify(['start', { total: total }]));\n  });\n\n  runner.on('pass', function(test){\n    console.log(JSON.stringify(['pass', clean(test)]));\n  });\n\n  runner.on('fail', function(test, err){\n    console.log(JSON.stringify(['fail', clean(test)]));\n  });\n\n  runner.on('end', function(){\n    process.stdout.write(JSON.stringify(['end', self.stats]));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @param {Object} test\n * @return {Object}\n * @api private\n */\n\nfunction clean(test) {\n  return {\n      title: test.title\n    , fullTitle: test.fullTitle()\n    , duration: test.duration\n  }\n}\n}); // module: reporters/json-stream.js\n\nrequire.register(\"reporters/json.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `JSON`.\n */\n\nexports = module.exports = JSONReporter;\n\n/**\n * Initialize a new `JSON` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction JSONReporter(runner) {\n  var self = this;\n  Base.call(this, runner);\n\n  var tests = []\n    , failures = []\n    , passes = [];\n\n  runner.on('test end', function(test){\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test){\n    passes.push(test);\n  });\n\n  runner.on('fail', function(test){\n    failures.push(test);\n  });\n\n  runner.on('end', function(){\n    var obj = {\n        stats: self.stats\n      , tests: tests.map(clean)\n      , failures: failures.map(clean)\n      , passes: passes.map(clean)\n    };\n\n    process.stdout.write(JSON.stringify(obj, null, 2));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @param {Object} test\n * @return {Object}\n * @api private\n */\n\nfunction clean(test) {\n  return {\n      title: test.title\n    , fullTitle: test.fullTitle()\n    , duration: test.duration\n  }\n}\n}); // module: reporters/json.js\n\nrequire.register(\"reporters/landing.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `Landing`.\n */\n\nexports = module.exports = Landing;\n\n/**\n * Airplane color.\n */\n\nBase.colors.plane = 0;\n\n/**\n * Airplane crash color.\n */\n\nBase.colors['plane crash'] = 31;\n\n/**\n * Runway color.\n */\n\nBase.colors.runway = 90;\n\n/**\n * Initialize a new `Landing` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Landing(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , width = Base.window.width * .75 | 0\n    , total = runner.total\n    , stream = process.stdout\n    , plane = color('plane', '✈')\n    , crashed = -1\n    , n = 0;\n\n  function runway() {\n    var buf = Array(width).join('-');\n    return '  ' + color('runway', buf);\n  }\n\n  runner.on('start', function(){\n    stream.write('\\n  ');\n    cursor.hide();\n  });\n\n  runner.on('test end', function(test){\n    // check if the plane crashed\n    var col = -1 == crashed\n      ? width * ++n / total | 0\n      : crashed;\n\n    // show the crash\n    if ('failed' == test.state) {\n      plane = color('plane crash', '✈');\n      crashed = col;\n    }\n\n    // render landing strip\n    stream.write('\\u001b[4F\\n\\n');\n    stream.write(runway());\n    stream.write('\\n  ');\n    stream.write(color('runway', Array(col).join('⋅')));\n    stream.write(plane)\n    stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));\n    stream.write(runway());\n    stream.write('\\u001b[0m');\n  });\n\n  runner.on('end', function(){\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nLanding.prototype = new F;\nLanding.prototype.constructor = Landing;\n\n}); // module: reporters/landing.js\n\nrequire.register(\"reporters/list.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `List`.\n */\n\nexports = module.exports = List;\n\n/**\n * Initialize a new `List` test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction List(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , n = 0;\n\n  runner.on('start', function(){\n    console.log();\n  });\n\n  runner.on('test', function(test){\n    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));\n  });\n\n  runner.on('pending', function(test){\n    var fmt = color('checkmark', '  -')\n      + color('pending', ' %s');\n    console.log(fmt, test.fullTitle());\n  });\n\n  runner.on('pass', function(test){\n    var fmt = color('checkmark', '  '+Base.symbols.dot)\n      + color('pass', ' %s: ')\n      + color(test.speed, '%dms');\n    cursor.CR();\n    console.log(fmt, test.fullTitle(), test.duration);\n  });\n\n  runner.on('fail', function(test, err){\n    cursor.CR();\n    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());\n  });\n\n  runner.on('end', self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nList.prototype = new F;\nList.prototype.constructor = List;\n\n\n}); // module: reporters/list.js\n\nrequire.register(\"reporters/markdown.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , utils = require('../utils');\n\n/**\n * Expose `Markdown`.\n */\n\nexports = module.exports = Markdown;\n\n/**\n * Initialize a new `Markdown` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Markdown(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , level = 0\n    , buf = '';\n\n  function title(str) {\n    return Array(level).join('#') + ' ' + str;\n  }\n\n  function indent() {\n    return Array(level).join('  ');\n  }\n\n  function mapTOC(suite, obj) {\n    var ret = obj;\n    obj = obj[suite.title] = obj[suite.title] || { suite: suite };\n    suite.suites.forEach(function(suite){\n      mapTOC(suite, obj);\n    });\n    return ret;\n  }\n\n  function stringifyTOC(obj, level) {\n    ++level;\n    var buf = '';\n    var link;\n    for (var key in obj) {\n      if ('suite' == key) continue;\n      if (key) link = ' - [' + key + '](#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';\n      if (key) buf += Array(level).join('  ') + link;\n      buf += stringifyTOC(obj[key], level);\n    }\n    --level;\n    return buf;\n  }\n\n  function generateTOC(suite) {\n    var obj = mapTOC(suite, {});\n    return stringifyTOC(obj, 0);\n  }\n\n  generateTOC(runner.suite);\n\n  runner.on('suite', function(suite){\n    ++level;\n    var slug = utils.slug(suite.fullTitle());\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';\n    buf += title(suite.title) + '\\n';\n  });\n\n  runner.on('suite end', function(suite){\n    --level;\n  });\n\n  runner.on('pass', function(test){\n    var code = utils.clean(test.fn.toString());\n    buf += test.title + '.\\n';\n    buf += '\\n```js\\n';\n    buf += code + '\\n';\n    buf += '```\\n\\n';\n  });\n\n  runner.on('end', function(){\n    process.stdout.write('# TOC\\n');\n    process.stdout.write(generateTOC(runner.suite));\n    process.stdout.write(buf);\n  });\n}\n}); // module: reporters/markdown.js\n\nrequire.register(\"reporters/min.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `Min`.\n */\n\nexports = module.exports = Min;\n\n/**\n * Initialize a new `Min` minimal test reporter (best used with --watch).\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Min(runner) {\n  Base.call(this, runner);\n\n  runner.on('start', function(){\n    // clear screen\n    process.stdout.write('\\u001b[2J');\n    // set cursor position\n    process.stdout.write('\\u001b[1;3H');\n  });\n\n  runner.on('end', this.epilogue.bind(this));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nMin.prototype = new F;\nMin.prototype.constructor = Min;\n\n\n}); // module: reporters/min.js\n\nrequire.register(\"reporters/nyan.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , color = Base.color;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = NyanCat;\n\n/**\n * Initialize a new `Dot` matrix test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction NyanCat(runner) {\n  Base.call(this, runner);\n  var self = this\n    , stats = this.stats\n    , width = Base.window.width * .75 | 0\n    , rainbowColors = this.rainbowColors = self.generateColors()\n    , colorIndex = this.colorIndex = 0\n    , numerOfLines = this.numberOfLines = 4\n    , trajectories = this.trajectories = [[], [], [], []]\n    , nyanCatWidth = this.nyanCatWidth = 11\n    , trajectoryWidthMax = this.trajectoryWidthMax = (width - nyanCatWidth)\n    , scoreboardWidth = this.scoreboardWidth = 5\n    , tick = this.tick = 0\n    , n = 0;\n\n  runner.on('start', function(){\n    Base.cursor.hide();\n    self.draw();\n  });\n\n  runner.on('pending', function(test){\n    self.draw();\n  });\n\n  runner.on('pass', function(test){\n    self.draw();\n  });\n\n  runner.on('fail', function(test, err){\n    self.draw();\n  });\n\n  runner.on('end', function(){\n    Base.cursor.show();\n    for (var i = 0; i < self.numberOfLines; i++) write('\\n');\n    self.epilogue();\n  });\n}\n\n/**\n * Draw the nyan cat\n *\n * @api private\n */\n\nNyanCat.prototype.draw = function(){\n  this.appendRainbow();\n  this.drawScoreboard();\n  this.drawRainbow();\n  this.drawNyanCat();\n  this.tick = !this.tick;\n};\n\n/**\n * Draw the \"scoreboard\" showing the number\n * of passes, failures and pending tests.\n *\n * @api private\n */\n\nNyanCat.prototype.drawScoreboard = function(){\n  var stats = this.stats;\n  var colors = Base.colors;\n\n  function draw(color, n) {\n    write(' ');\n    write('\\u001b[' + color + 'm' + n + '\\u001b[0m');\n    write('\\n');\n  }\n\n  draw(colors.green, stats.passes);\n  draw(colors.fail, stats.failures);\n  draw(colors.pending, stats.pending);\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Append the rainbow.\n *\n * @api private\n */\n\nNyanCat.prototype.appendRainbow = function(){\n  var segment = this.tick ? '_' : '-';\n  var rainbowified = this.rainbowify(segment);\n\n  for (var index = 0; index < this.numberOfLines; index++) {\n    var trajectory = this.trajectories[index];\n    if (trajectory.length >= this.trajectoryWidthMax) trajectory.shift();\n    trajectory.push(rainbowified);\n  }\n};\n\n/**\n * Draw the rainbow.\n *\n * @api private\n */\n\nNyanCat.prototype.drawRainbow = function(){\n  var self = this;\n\n  this.trajectories.forEach(function(line, index) {\n    write('\\u001b[' + self.scoreboardWidth + 'C');\n    write(line.join(''));\n    write('\\n');\n  });\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw the nyan cat\n *\n * @api private\n */\n\nNyanCat.prototype.drawNyanCat = function() {\n  var self = this;\n  var startWidth = this.scoreboardWidth + this.trajectories[0].length;\n  var color = '\\u001b[' + startWidth + 'C';\n  var padding = '';\n\n  write(color);\n  write('_,------,');\n  write('\\n');\n\n  write(color);\n  padding = self.tick ? '  ' : '   ';\n  write('_|' + padding + '/\\\\_/\\\\ ');\n  write('\\n');\n\n  write(color);\n  padding = self.tick ? '_' : '__';\n  var tail = self.tick ? '~' : '^';\n  var face;\n  write(tail + '|' + padding + this.face() + ' ');\n  write('\\n');\n\n  write(color);\n  padding = self.tick ? ' ' : '  ';\n  write(padding + '\"\"  \"\" ');\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw nyan cat face.\n *\n * @return {String}\n * @api private\n */\n\nNyanCat.prototype.face = function() {\n  var stats = this.stats;\n  if (stats.failures) {\n    return '( x .x)';\n  } else if (stats.pending) {\n    return '( o .o)';\n  } else if(stats.passes) {\n    return '( ^ .^)';\n  } else {\n    return '( - .-)';\n  }\n}\n\n/**\n * Move cursor up `n`.\n *\n * @param {Number} n\n * @api private\n */\n\nNyanCat.prototype.cursorUp = function(n) {\n  write('\\u001b[' + n + 'A');\n};\n\n/**\n * Move cursor down `n`.\n *\n * @param {Number} n\n * @api private\n */\n\nNyanCat.prototype.cursorDown = function(n) {\n  write('\\u001b[' + n + 'B');\n};\n\n/**\n * Generate rainbow colors.\n *\n * @return {Array}\n * @api private\n */\n\nNyanCat.prototype.generateColors = function(){\n  var colors = [];\n\n  for (var i = 0; i < (6 * 7); i++) {\n    var pi3 = Math.floor(Math.PI / 3);\n    var n = (i * (1.0 / 6));\n    var r = Math.floor(3 * Math.sin(n) + 3);\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);\n    colors.push(36 * r + 6 * g + b + 16);\n  }\n\n  return colors;\n};\n\n/**\n * Apply rainbow to the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nNyanCat.prototype.rainbowify = function(str){\n  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];\n  this.colorIndex += 1;\n  return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Stdout helper.\n */\n\nfunction write(string) {\n  process.stdout.write(string);\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nNyanCat.prototype = new F;\nNyanCat.prototype.constructor = NyanCat;\n\n\n}); // module: reporters/nyan.js\n\nrequire.register(\"reporters/progress.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `Progress`.\n */\n\nexports = module.exports = Progress;\n\n/**\n * General progress bar color.\n */\n\nBase.colors.progress = 90;\n\n/**\n * Initialize a new `Progress` bar test reporter.\n *\n * @param {Runner} runner\n * @param {Object} options\n * @api public\n */\n\nfunction Progress(runner, options) {\n  Base.call(this, runner);\n\n  var self = this\n    , options = options || {}\n    , stats = this.stats\n    , width = Base.window.width * .50 | 0\n    , total = runner.total\n    , complete = 0\n    , max = Math.max;\n\n  // default chars\n  options.open = options.open || '[';\n  options.complete = options.complete || '▬';\n  options.incomplete = options.incomplete || Base.symbols.dot;\n  options.close = options.close || ']';\n  options.verbose = false;\n\n  // tests started\n  runner.on('start', function(){\n    console.log();\n    cursor.hide();\n  });\n\n  // tests complete\n  runner.on('test end', function(){\n    complete++;\n    var incomplete = total - complete\n      , percent = complete / total\n      , n = width * percent | 0\n      , i = width - n;\n\n    cursor.CR();\n    process.stdout.write('\\u001b[J');\n    process.stdout.write(color('progress', '  ' + options.open));\n    process.stdout.write(Array(n).join(options.complete));\n    process.stdout.write(Array(i).join(options.incomplete));\n    process.stdout.write(color('progress', options.close));\n    if (options.verbose) {\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\n    }\n  });\n\n  // tests are complete, output some stats\n  // and the failures if any\n  runner.on('end', function(){\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nProgress.prototype = new F;\nProgress.prototype.constructor = Progress;\n\n\n}); // module: reporters/progress.js\n\nrequire.register(\"reporters/spec.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `Spec`.\n */\n\nexports = module.exports = Spec;\n\n/**\n * Initialize a new `Spec` test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Spec(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , indents = 0\n    , n = 0;\n\n  function indent() {\n    return Array(indents).join('  ')\n  }\n\n  runner.on('start', function(){\n    console.log();\n  });\n\n  runner.on('suite', function(suite){\n    ++indents;\n    console.log(color('suite', '%s%s'), indent(), suite.title);\n  });\n\n  runner.on('suite end', function(suite){\n    --indents;\n    if (1 == indents) console.log();\n  });\n\n  runner.on('pending', function(test){\n    var fmt = indent() + color('pending', '  - %s');\n    console.log(fmt, test.title);\n  });\n\n  runner.on('pass', function(test){\n    if ('fast' == test.speed) {\n      var fmt = indent()\n        + color('checkmark', '  ' + Base.symbols.ok)\n        + color('pass', ' %s ');\n      cursor.CR();\n      console.log(fmt, test.title);\n    } else {\n      var fmt = indent()\n        + color('checkmark', '  ' + Base.symbols.ok)\n        + color('pass', ' %s ')\n        + color(test.speed, '(%dms)');\n      cursor.CR();\n      console.log(fmt, test.title, test.duration);\n    }\n  });\n\n  runner.on('fail', function(test, err){\n    cursor.CR();\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);\n  });\n\n  runner.on('end', self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nSpec.prototype = new F;\nSpec.prototype.constructor = Spec;\n\n\n}); // module: reporters/spec.js\n\nrequire.register(\"reporters/tap.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `TAP`.\n */\n\nexports = module.exports = TAP;\n\n/**\n * Initialize a new `TAP` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction TAP(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , n = 1\n    , passes = 0\n    , failures = 0;\n\n  runner.on('start', function(){\n    var total = runner.grepTotal(runner.suite);\n    console.log('%d..%d', 1, total);\n  });\n\n  runner.on('test end', function(){\n    ++n;\n  });\n\n  runner.on('pending', function(test){\n    console.log('ok %d %s # SKIP -', n, title(test));\n  });\n\n  runner.on('pass', function(test){\n    passes++;\n    console.log('ok %d %s', n, title(test));\n  });\n\n  runner.on('fail', function(test, err){\n    failures++;\n    console.log('not ok %d %s', n, title(test));\n    if (err.stack) console.log(err.stack.replace(/^/gm, '  '));\n  });\n\n  runner.on('end', function(){\n    console.log('# tests ' + (passes + failures));\n    console.log('# pass ' + passes);\n    console.log('# fail ' + failures);\n  });\n}\n\n/**\n * Return a TAP-safe title of `test`\n *\n * @param {Object} test\n * @return {String}\n * @api private\n */\n\nfunction title(test) {\n  return test.fullTitle().replace(/#/g, '');\n}\n\n}); // module: reporters/tap.js\n\nrequire.register(\"reporters/xunit.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , utils = require('../utils')\n  , escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date\n  , setTimeout = global.setTimeout\n  , setInterval = global.setInterval\n  , clearTimeout = global.clearTimeout\n  , clearInterval = global.clearInterval;\n\n/**\n * Expose `XUnit`.\n */\n\nexports = module.exports = XUnit;\n\n/**\n * Initialize a new `XUnit` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction XUnit(runner) {\n  Base.call(this, runner);\n  var stats = this.stats\n    , tests = []\n    , self = this;\n\n  runner.on('pending', function(test){\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test){\n    tests.push(test);\n  });\n\n  runner.on('fail', function(test){\n    tests.push(test);\n  });\n\n  runner.on('end', function(){\n    console.log(tag('testsuite', {\n        name: 'Mocha Tests'\n      , tests: stats.tests\n      , failures: stats.failures\n      , errors: stats.failures\n      , skipped: stats.tests - stats.failures - stats.passes\n      , timestamp: (new Date).toUTCString()\n      , time: (stats.duration / 1000) || 0\n    }, false));\n\n    tests.forEach(test);\n    console.log('</testsuite>');\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nXUnit.prototype = new F;\nXUnit.prototype.constructor = XUnit;\n\n\n/**\n * Output tag for the given `test.`\n */\n\nfunction test(test) {\n  var attrs = {\n      classname: test.parent.fullTitle()\n    , name: test.title\n    , time: (test.duration / 1000) || 0\n  };\n\n  if ('failed' == test.state) {\n    var err = test.err;\n    attrs.message = escape(err.message);\n    console.log(tag('testcase', attrs, false, tag('failure', attrs, false, cdata(err.stack))));\n  } else if (test.pending) {\n    console.log(tag('testcase', attrs, false, tag('skipped', {}, true)));\n  } else {\n    console.log(tag('testcase', attrs, true) );\n  }\n}\n\n/**\n * HTML tag helper.\n */\n\nfunction tag(name, attrs, close, content) {\n  var end = close ? '/>' : '>'\n    , pairs = []\n    , tag;\n\n  for (var key in attrs) {\n    pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\n  }\n\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n  if (content) tag += content + '</' + name + end;\n  return tag;\n}\n\n/**\n * Return cdata escaped CDATA `str`.\n */\n\nfunction cdata(str) {\n  return '<![CDATA[' + escape(str) + ']]>';\n}\n\n}); // module: reporters/xunit.js\n\nrequire.register(\"runnable.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('browser/events').EventEmitter\n  , debug = require('browser/debug')('mocha:runnable')\n  , milliseconds = require('./ms');\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date\n  , setTimeout = global.setTimeout\n  , setInterval = global.setInterval\n  , clearTimeout = global.clearTimeout\n  , clearInterval = global.clearInterval;\n\n/**\n * Object#toString().\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Expose `Runnable`.\n */\n\nmodule.exports = Runnable;\n\n/**\n * Initialize a new `Runnable` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n */\n\nfunction Runnable(title, fn) {\n  this.title = title;\n  this.fn = fn;\n  this.async = fn && fn.length;\n  this.sync = ! this.async;\n  this._timeout = 2000;\n  this._slow = 75;\n  this.timedOut = false;\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nfunction F(){};\nF.prototype = EventEmitter.prototype;\nRunnable.prototype = new F;\nRunnable.prototype.constructor = Runnable;\n\n\n/**\n * Set & get timeout `ms`.\n *\n * @param {Number|String} ms\n * @return {Runnable|Number} ms or self\n * @api private\n */\n\nRunnable.prototype.timeout = function(ms){\n  if (0 == arguments.length) return this._timeout;\n  if ('string' == typeof ms) ms = milliseconds(ms);\n  debug('timeout %d', ms);\n  this._timeout = ms;\n  if (this.timer) this.resetTimeout();\n  return this;\n};\n\n/**\n * Set & get slow `ms`.\n *\n * @param {Number|String} ms\n * @return {Runnable|Number} ms or self\n * @api private\n */\n\nRunnable.prototype.slow = function(ms){\n  if (0 === arguments.length) return this._slow;\n  if ('string' == typeof ms) ms = milliseconds(ms);\n  debug('timeout %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Return the full title generated by recursively\n * concatenating the parent's full title.\n *\n * @return {String}\n * @api public\n */\n\nRunnable.prototype.fullTitle = function(){\n  return this.parent.fullTitle() + ' ' + this.title;\n};\n\n/**\n * Clear the timeout.\n *\n * @api private\n */\n\nRunnable.prototype.clearTimeout = function(){\n  clearTimeout(this.timer);\n};\n\n/**\n * Inspect the runnable void of private properties.\n *\n * @return {String}\n * @api private\n */\n\nRunnable.prototype.inspect = function(){\n  return JSON.stringify(this, function(key, val){\n    if ('_' == key[0]) return;\n    if ('parent' == key) return '#<Suite>';\n    if ('ctx' == key) return '#<Context>';\n    return val;\n  }, 2);\n};\n\n/**\n * Reset the timeout.\n *\n * @api private\n */\n\nRunnable.prototype.resetTimeout = function(){\n  var self = this;\n  var ms = this.timeout() || 1e9;\n\n  this.clearTimeout();\n  this.timer = setTimeout(function(){\n    self.callback(new Error('timeout of ' + ms + 'ms exceeded'));\n    self.timedOut = true;\n  }, ms);\n};\n\n/**\n * Whitelist these globals for this test run\n *\n * @api private\n */\nRunnable.prototype.globals = function(arr){\n  var self = this;\n  this._allowedGlobals = arr;\n};\n\n/**\n * Run the test and invoke `fn(err)`.\n *\n * @param {Function} fn\n * @api private\n */\n\nRunnable.prototype.run = function(fn){\n  var self = this\n    , ms = this.timeout()\n    , start = new Date\n    , ctx = this.ctx\n    , finished\n    , emitted;\n\n  if (ctx) ctx.runnable(this);\n\n  // timeout\n  if (this.async) {\n    if (ms) {\n      this.timer = setTimeout(function(){\n        done(new Error('timeout of ' + ms + 'ms exceeded'));\n        self.timedOut = true;\n      }, ms);\n    }\n  }\n\n  // called multiple times\n  function multiple(err) {\n    if (emitted) return;\n    emitted = true;\n    self.emit('error', err || new Error('done() called multiple times'));\n  }\n\n  // finished\n  function done(err) {\n    if (self.timedOut) return;\n    if (finished) return multiple(err);\n    self.clearTimeout();\n    self.duration = new Date - start;\n    finished = true;\n    fn(err);\n  }\n\n  // for .resetTimeout()\n  this.callback = done;\n\n  // async\n  if (this.async) {\n    try {\n      this.fn.call(ctx, function(err){\n        if (err instanceof Error || toString.call(err) === \"[object Error]\") return done(err);\n        if (null != err) return done(new Error('done() invoked with non-Error: ' + err));\n        done();\n      });\n    } catch (err) {\n      done(err);\n    }\n    return;\n  }\n\n  if (this.asyncOnly) {\n    return done(new Error('--async-only option in use without declaring `done()`'));\n  }\n\n  // sync\n  try {\n    if (!this.pending) this.fn.call(ctx);\n    this.duration = new Date - start;\n    fn();\n  } catch (err) {\n    fn(err);\n  }\n};\n\n}); // module: runnable.js\n\nrequire.register(\"runner.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('browser/events').EventEmitter\n  , debug = require('browser/debug')('mocha:runner')\n  , Test = require('./test')\n  , utils = require('./utils')\n  , filter = utils.filter\n  , keys = utils.keys;\n\n/**\n * Non-enumerable globals.\n */\n\nvar globals = [\n  'setTimeout',\n  'clearTimeout',\n  'setInterval',\n  'clearInterval',\n  'XMLHttpRequest',\n  'Date'\n];\n\n/**\n * Expose `Runner`.\n */\n\nmodule.exports = Runner;\n\n/**\n * Initialize a `Runner` for the given `suite`.\n *\n * Events:\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n *\n * @api public\n */\n\nfunction Runner(suite) {\n  var self = this;\n  this._globals = [];\n  this._abort = false;\n  this.suite = suite;\n  this.total = suite.total();\n  this.failures = 0;\n  this.on('test end', function(test){ self.checkGlobals(test); });\n  this.on('hook end', function(hook){ self.checkGlobals(hook); });\n  this.grep(/.*/);\n  this.globals(this.globalProps().concat(extraGlobals()));\n}\n\n/**\n * Wrapper for setImmediate, process.nextTick, or browser polyfill.\n *\n * @param {Function} fn\n * @api private\n */\n\nRunner.immediately = global.setImmediate || process.nextTick;\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nfunction F(){};\nF.prototype = EventEmitter.prototype;\nRunner.prototype = new F;\nRunner.prototype.constructor = Runner;\n\n\n/**\n * Run tests with full titles matching `re`. Updates runner.total\n * with number of tests matched.\n *\n * @param {RegExp} re\n * @param {Boolean} invert\n * @return {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.grep = function(re, invert){\n  debug('grep %s', re);\n  this._grep = re;\n  this._invert = invert;\n  this.total = this.grepTotal(this.suite);\n  return this;\n};\n\n/**\n * Returns the number of tests matching the grep search for the\n * given suite.\n *\n * @param {Suite} suite\n * @return {Number}\n * @api public\n */\n\nRunner.prototype.grepTotal = function(suite) {\n  var self = this;\n  var total = 0;\n\n  suite.eachTest(function(test){\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) match = !match;\n    if (match) total++;\n  });\n\n  return total;\n};\n\n/**\n * Return a list of global properties.\n *\n * @return {Array}\n * @api private\n */\n\nRunner.prototype.globalProps = function() {\n  var props = utils.keys(global);\n\n  // non-enumerables\n  for (var i = 0; i < globals.length; ++i) {\n    if (~utils.indexOf(props, globals[i])) continue;\n    props.push(globals[i]);\n  }\n\n  return props;\n};\n\n/**\n * Allow the given `arr` of globals.\n *\n * @param {Array} arr\n * @return {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.globals = function(arr){\n  if (0 == arguments.length) return this._globals;\n  debug('globals %j', arr);\n  this._globals = this._globals.concat(arr);\n  return this;\n};\n\n/**\n * Check for global variable leaks.\n *\n * @api private\n */\n\nRunner.prototype.checkGlobals = function(test){\n  if (this.ignoreLeaks) return;\n  var ok = this._globals;\n\n  var globals = this.globalProps();\n  var isNode = process.kill;\n  var leaks;\n\n  if (test) {\n    ok = ok.concat(test._allowedGlobals || []);\n  }\n\n  if(this.prevGlobalsLength == globals.length) return;\n  this.prevGlobalsLength = globals.length;\n\n  leaks = filterLeaks(ok, globals);\n  this._globals = this._globals.concat(leaks);\n\n  if (leaks.length > 1) {\n    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));\n  } else if (leaks.length) {\n    this.fail(test, new Error('global leak detected: ' + leaks[0]));\n  }\n};\n\n/**\n * Fail the given `test`.\n *\n * @param {Test} test\n * @param {Error} err\n * @api private\n */\n\nRunner.prototype.fail = function(test, err){\n  ++this.failures;\n  test.state = 'failed';\n\n  if ('string' == typeof err) {\n    err = new Error('the string \"' + err + '\" was thrown, throw an Error :)');\n  }\n\n  this.emit('fail', test, err);\n};\n\n/**\n * Fail the given `hook` with `err`.\n *\n * Hook failures work in the following pattern:\n * - If bail, then exit\n * - Failed `before` hook skips all tests in a suite and subsuites,\n *   but jumps to corresponding `after` hook\n * - Failed `before each` hook skips remaining tests in a\n *   suite and jumps to corresponding `after each` hook,\n *   which is run only once\n * - Failed `after` hook does not alter\n *   execution order\n * - Failed `after each` hook skips remaining tests in a\n *   suite and subsuites, but executes other `after each`\n *   hooks\n *\n * @param {Hook} hook\n * @param {Error} err\n * @api private\n */\n\nRunner.prototype.failHook = function(hook, err){\n  this.fail(hook, err);\n  if (this.suite.bail()) {\n    this.emit('end');\n  }\n};\n\n/**\n * Run hook `name` callbacks and then invoke `fn()`.\n *\n * @param {String} name\n * @param {Function} function\n * @api private\n */\n\nRunner.prototype.hook = function(name, fn){\n  var suite = this.suite\n    , hooks = suite['_' + name]\n    , self = this\n    , timer;\n\n  function next(i) {\n    var hook = hooks[i];\n    if (!hook) return fn();\n    if (self.failures && suite.bail()) return fn();\n    self.currentRunnable = hook;\n\n    hook.ctx.currentTest = self.test;\n\n    self.emit('hook', hook);\n\n    hook.on('error', function(err){\n      self.failHook(hook, err);\n    });\n\n    hook.run(function(err){\n      hook.removeAllListeners('error');\n      var testError = hook.error();\n      if (testError) self.fail(self.test, testError);\n      if (err) {\n        self.failHook(hook, err);\n\n        // stop executing hooks, notify callee of hook err\n        return fn(err);\n      }\n      self.emit('hook end', hook);\n      delete hook.ctx.currentTest;\n      next(++i);\n    });\n  }\n\n  Runner.immediately(function(){\n    next(0);\n  });\n};\n\n/**\n * Run hook `name` for the given array of `suites`\n * in order, and callback `fn(err, errSuite)`.\n *\n * @param {String} name\n * @param {Array} suites\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.hooks = function(name, suites, fn){\n  var self = this\n    , orig = this.suite;\n\n  function next(suite) {\n    self.suite = suite;\n\n    if (!suite) {\n      self.suite = orig;\n      return fn();\n    }\n\n    self.hook(name, function(err){\n      if (err) {\n        var errSuite = self.suite;\n        self.suite = orig;\n        return fn(err, errSuite);\n      }\n\n      next(suites.pop());\n    });\n  }\n\n  next(suites.pop());\n};\n\n/**\n * Run hooks from the top level down.\n *\n * @param {String} name\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.hookUp = function(name, fn){\n  var suites = [this.suite].concat(this.parents()).reverse();\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Run hooks from the bottom up.\n *\n * @param {String} name\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.hookDown = function(name, fn){\n  var suites = [this.suite].concat(this.parents());\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Return an array of parent Suites from\n * closest to furthest.\n *\n * @return {Array}\n * @api private\n */\n\nRunner.prototype.parents = function(){\n  var suite = this.suite\n    , suites = [];\n  while (suite = suite.parent) suites.push(suite);\n  return suites;\n};\n\n/**\n * Run the current test and callback `fn(err)`.\n *\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.runTest = function(fn){\n  var test = this.test\n    , self = this;\n\n  if (this.asyncOnly) test.asyncOnly = true;\n\n  try {\n    test.on('error', function(err){\n      self.fail(test, err);\n    });\n    test.run(fn);\n  } catch (err) {\n    fn(err);\n  }\n};\n\n/**\n * Run tests in the given `suite` and invoke\n * the callback `fn()` when complete.\n *\n * @param {Suite} suite\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.runTests = function(suite, fn){\n  var self = this\n    , tests = suite.tests.slice()\n    , test;\n\n\n  function hookErr(err, errSuite, after) {\n    // before/after Each hook for errSuite failed:\n    var orig = self.suite;\n\n    // for failed 'after each' hook start from errSuite parent,\n    // otherwise start from errSuite itself\n    self.suite = after ? errSuite.parent : errSuite;\n\n    if (self.suite) {\n      // call hookUp afterEach\n      self.hookUp('afterEach', function(err2, errSuite2) {\n        self.suite = orig;\n        // some hooks may fail even now\n        if (err2) return hookErr(err2, errSuite2, true);\n        // report error suite\n        fn(errSuite);\n      });\n    } else {\n      // there is no need calling other 'after each' hooks\n      self.suite = orig;\n      fn(errSuite);\n    }\n  }\n\n  function next(err, errSuite) {\n    // if we bail after first err\n    if (self.failures && suite._bail) return fn();\n\n    if (self._abort) return fn();\n\n    if (err) return hookErr(err, errSuite, true);\n\n    // next test\n    test = tests.shift();\n\n    // all done\n    if (!test) return fn();\n\n    // grep\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) match = !match;\n    if (!match) return next();\n\n    // pending\n    if (test.pending) {\n      self.emit('pending', test);\n      self.emit('test end', test);\n      return next();\n    }\n\n    // execute test and hook(s)\n    self.emit('test', self.test = test);\n    self.hookDown('beforeEach', function(err, errSuite){\n\n      if (err) return hookErr(err, errSuite, false);\n\n      self.currentRunnable = self.test;\n      self.runTest(function(err){\n        test = self.test;\n\n        if (err) {\n          self.fail(test, err);\n          self.emit('test end', test);\n          return self.hookUp('afterEach', next);\n        }\n\n        test.state = 'passed';\n        self.emit('pass', test);\n        self.emit('test end', test);\n        self.hookUp('afterEach', next);\n      });\n    });\n  }\n\n  this.next = next;\n  next();\n};\n\n/**\n * Run the given `suite` and invoke the\n * callback `fn()` when complete.\n *\n * @param {Suite} suite\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.runSuite = function(suite, fn){\n  var total = this.grepTotal(suite)\n    , self = this\n    , i = 0;\n\n  debug('run suite %s', suite.fullTitle());\n\n  if (!total) return fn();\n\n  this.emit('suite', this.suite = suite);\n\n  function next(errSuite) {\n    if (errSuite) {\n      // current suite failed on a hook from errSuite\n      if (errSuite == suite) {\n        // if errSuite is current suite\n        // continue to the next sibling suite\n        return done();\n      } else {\n        // errSuite is among the parents of current suite\n        // stop execution of errSuite and all sub-suites\n        return done(errSuite);\n      }\n    }\n\n    if (self._abort) return done();\n\n    var curr = suite.suites[i++];\n    if (!curr) return done();\n    self.runSuite(curr, next);\n  }\n\n  function done(errSuite) {\n    self.suite = suite;\n    self.hook('afterAll', function(){\n      self.emit('suite end', suite);\n      fn(errSuite);\n    });\n  }\n\n  this.hook('beforeAll', function(err){\n    if (err) return done();\n    self.runTests(suite, next);\n  });\n};\n\n/**\n * Handle uncaught exceptions.\n *\n * @param {Error} err\n * @api private\n */\n\nRunner.prototype.uncaught = function(err){\n  debug('uncaught exception %s', err.message);\n  var runnable = this.currentRunnable;\n  if (!runnable || 'failed' == runnable.state) return;\n  runnable.clearTimeout();\n  err.uncaught = true;\n  this.fail(runnable, err);\n\n  // recover from test\n  if ('test' == runnable.type) {\n    this.emit('test end', runnable);\n    this.hookUp('afterEach', this.next);\n    return;\n  }\n\n  // bail on hooks\n  this.emit('end');\n};\n\n/**\n * Run the root suite and invoke `fn(failures)`\n * on completion.\n *\n * @param {Function} fn\n * @return {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.run = function(fn){\n  var self = this\n    , fn = fn || function(){};\n\n  function uncaught(err){\n    self.uncaught(err);\n  }\n\n  debug('start');\n\n  // callback\n  this.on('end', function(){\n    debug('end');\n    process.removeListener('uncaughtException', uncaught);\n    fn(self.failures);\n  });\n\n  // run suites\n  this.emit('start');\n  this.runSuite(this.suite, function(){\n    debug('finished running');\n    self.emit('end');\n  });\n\n  // uncaught exception\n  process.on('uncaughtException', uncaught);\n\n  return this;\n};\n\n/**\n * Cleanly abort execution\n *\n * @return {Runner} for chaining\n * @api public\n */\nRunner.prototype.abort = function(){\n  debug('aborting');\n  this._abort = true;\n}\n\n/**\n * Filter leaks with the given globals flagged as `ok`.\n *\n * @param {Array} ok\n * @param {Array} globals\n * @return {Array}\n * @api private\n */\n\nfunction filterLeaks(ok, globals) {\n  return filter(globals, function(key){\n    // Firefox and Chrome exposes iframes as index inside the window object\n    if (/^d+/.test(key)) return false;\n\n    // in firefox\n    // if runner runs in an iframe, this iframe's window.getInterface method not init at first\n    // it is assigned in some seconds\n    if (global.navigator && /^getInterface/.test(key)) return false;\n\n    // an iframe could be approached by window[iframeIndex]\n    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak\n    if (global.navigator && /^\\d+/.test(key)) return false;\n\n    // Opera and IE expose global variables for HTML element IDs (issue #243)\n    if (/^mocha-/.test(key)) return false;\n\n    var matched = filter(ok, function(ok){\n      if (~ok.indexOf('*')) return 0 == key.indexOf(ok.split('*')[0]);\n      return key == ok;\n    });\n    return matched.length == 0 && (!global.navigator || 'onerror' !== key);\n  });\n}\n\n/**\n * Array of globals dependent on the environment.\n *\n * @return {Array}\n * @api private\n */\n\n function extraGlobals() {\n  if (typeof(process) === 'object' &&\n      typeof(process.version) === 'string') {\n\n    var nodeVersion = process.version.split('.').reduce(function(a, v) {\n      return a << 8 | v;\n    });\n\n    // 'errno' was renamed to process._errno in v0.9.11.\n\n    if (nodeVersion < 0x00090B) {\n      return ['errno'];\n    }\n  }\n\n  return [];\n }\n\n}); // module: runner.js\n\nrequire.register(\"suite.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('browser/events').EventEmitter\n  , debug = require('browser/debug')('mocha:suite')\n  , milliseconds = require('./ms')\n  , utils = require('./utils')\n  , Hook = require('./hook');\n\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n\n/**\n * Create a new `Suite` with the given `title`\n * and parent `Suite`. When a suite with the\n * same title is already present, that suite\n * is returned to provide nicer reporter\n * and more flexible meta-testing.\n *\n * @param {Suite} parent\n * @param {String} title\n * @return {Suite}\n * @api public\n */\n\nexports.create = function(parent, title){\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  if (parent.pending) suite.pending = true;\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n\n/**\n * Initialize a new `Suite` with the given\n * `title` and `ctx`.\n *\n * @param {String} title\n * @param {Context} ctx\n * @api private\n */\n\nfunction Suite(title, ctx) {\n  this.title = title;\n  this.ctx = ctx;\n  this.suites = [];\n  this.tests = [];\n  this.pending = false;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this.root = !title;\n  this._timeout = 2000;\n  this._slow = 75;\n  this._bail = false;\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nfunction F(){};\nF.prototype = EventEmitter.prototype;\nSuite.prototype = new F;\nSuite.prototype.constructor = Suite;\n\n\n/**\n * Return a clone of this `Suite`.\n *\n * @return {Suite}\n * @api private\n */\n\nSuite.prototype.clone = function(){\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.timeout(this.timeout());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n\n/**\n * Set timeout `ms` or short-hand such as \"2s\".\n *\n * @param {Number|String} ms\n * @return {Suite|Number} for chaining\n * @api private\n */\n\nSuite.prototype.timeout = function(ms){\n  if (0 == arguments.length) return this._timeout;\n  if ('string' == typeof ms) ms = milliseconds(ms);\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n\n/**\n * Set slow `ms` or short-hand such as \"2s\".\n *\n * @param {Number|String} ms\n * @return {Suite|Number} for chaining\n * @api private\n */\n\nSuite.prototype.slow = function(ms){\n  if (0 === arguments.length) return this._slow;\n  if ('string' == typeof ms) ms = milliseconds(ms);\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Sets whether to bail after first error.\n *\n * @parma {Boolean} bail\n * @return {Suite|Number} for chaining\n * @api private\n */\n\nSuite.prototype.bail = function(bail){\n  if (0 == arguments.length) return this._bail;\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @param {Function} fn\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.beforeAll = function(fn){\n  if (this.pending) return this;\n  var hook = new Hook('\"before all\" hook', fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeAll.push(hook);\n  this.emit('beforeAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @param {Function} fn\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.afterAll = function(fn){\n  if (this.pending) return this;\n  var hook = new Hook('\"after all\" hook', fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterAll.push(hook);\n  this.emit('afterAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @param {Function} fn\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.beforeEach = function(fn){\n  if (this.pending) return this;\n  var hook = new Hook('\"before each\" hook', fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeEach.push(hook);\n  this.emit('beforeEach', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @param {Function} fn\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.afterEach = function(fn){\n  if (this.pending) return this;\n  var hook = new Hook('\"after each\" hook', fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterEach.push(hook);\n  this.emit('afterEach', hook);\n  return this;\n};\n\n/**\n * Add a test `suite`.\n *\n * @param {Suite} suite\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.addSuite = function(suite){\n  suite.parent = this;\n  suite.timeout(this.timeout());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit('suite', suite);\n  return this;\n};\n\n/**\n * Add a `test` to this suite.\n *\n * @param {Test} test\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.addTest = function(test){\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit('test', test);\n  return this;\n};\n\n/**\n * Return the full title generated by recursively\n * concatenating the parent's full title.\n *\n * @return {String}\n * @api public\n */\n\nSuite.prototype.fullTitle = function(){\n  if (this.parent) {\n    var full = this.parent.fullTitle();\n    if (full) return full + ' ' + this.title;\n  }\n  return this.title;\n};\n\n/**\n * Return the total number of tests.\n *\n * @return {Number}\n * @api public\n */\n\nSuite.prototype.total = function(){\n  return utils.reduce(this.suites, function(sum, suite){\n    return sum + suite.total();\n  }, 0) + this.tests.length;\n};\n\n/**\n * Iterates through each suite recursively to find\n * all tests. Applies a function in the format\n * `fn(test)`.\n *\n * @param {Function} fn\n * @return {Suite}\n * @api private\n */\n\nSuite.prototype.eachTest = function(fn){\n  utils.forEach(this.tests, fn);\n  utils.forEach(this.suites, function(suite){\n    suite.eachTest(fn);\n  });\n  return this;\n};\n\n}); // module: suite.js\n\nrequire.register(\"test.js\", function(module, exports, require){\n\n/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\n\n/**\n * Expose `Test`.\n */\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n */\n\nfunction Test(title, fn) {\n  Runnable.call(this, title, fn);\n  this.pending = !fn;\n  this.type = 'test';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\n\nfunction F(){};\nF.prototype = Runnable.prototype;\nTest.prototype = new F;\nTest.prototype.constructor = Test;\n\n\n}); // module: test.js\n\nrequire.register(\"utils.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar fs = require('browser/fs')\n  , path = require('browser/path')\n  , join = path.join\n  , debug = require('browser/debug')('mocha:watch');\n\n/**\n * Ignored directories.\n */\n\nvar ignore = ['node_modules', '.git'];\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {String} html\n * @return {String}\n * @api private\n */\n\nexports.escape = function(html){\n  return String(html)\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\n/**\n * Array#forEach (<=IE8)\n *\n * @param {Array} array\n * @param {Function} fn\n * @param {Object} scope\n * @api private\n */\n\nexports.forEach = function(arr, fn, scope){\n  for (var i = 0, l = arr.length; i < l; i++)\n    fn.call(scope, arr[i], i);\n};\n\n/**\n * Array#map (<=IE8)\n *\n * @param {Array} array\n * @param {Function} fn\n * @param {Object} scope\n * @api private\n */\n\nexports.map = function(arr, fn, scope){\n  var result = [];\n  for (var i = 0, l = arr.length; i < l; i++)\n    result.push(fn.call(scope, arr[i], i));\n  return result;\n};\n\n/**\n * Array#indexOf (<=IE8)\n *\n * @parma {Array} arr\n * @param {Object} obj to find index of\n * @param {Number} start\n * @api private\n */\n\nexports.indexOf = function(arr, obj, start){\n  for (var i = start || 0, l = arr.length; i < l; i++) {\n    if (arr[i] === obj)\n      return i;\n  }\n  return -1;\n};\n\n/**\n * Array#reduce (<=IE8)\n *\n * @param {Array} array\n * @param {Function} fn\n * @param {Object} initial value\n * @api private\n */\n\nexports.reduce = function(arr, fn, val){\n  var rval = val;\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    rval = fn(rval, arr[i], i, arr);\n  }\n\n  return rval;\n};\n\n/**\n * Array#filter (<=IE8)\n *\n * @param {Array} array\n * @param {Function} fn\n * @api private\n */\n\nexports.filter = function(arr, fn){\n  var ret = [];\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    var val = arr[i];\n    if (fn(val, i, arr)) ret.push(val);\n  }\n\n  return ret;\n};\n\n/**\n * Object.keys (<=IE8)\n *\n * @param {Object} obj\n * @return {Array} keys\n * @api private\n */\n\nexports.keys = Object.keys || function(obj) {\n  var keys = []\n    , has = Object.prototype.hasOwnProperty // for `window` on <=IE8\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n\n/**\n * Watch the given `files` for changes\n * and invoke `fn(file)` on modification.\n *\n * @param {Array} files\n * @param {Function} fn\n * @api private\n */\n\nexports.watch = function(files, fn){\n  var options = { interval: 100 };\n  files.forEach(function(file){\n    debug('file %s', file);\n    fs.watchFile(file, options, function(curr, prev){\n      if (prev.mtime < curr.mtime) fn(file);\n    });\n  });\n};\n\n/**\n * Ignored files.\n */\n\nfunction ignored(path){\n  return !~ignore.indexOf(path);\n}\n\n/**\n * Lookup files in the given `dir`.\n *\n * @return {Array}\n * @api private\n */\n\nexports.files = function(dir, ret){\n  ret = ret || [];\n\n  fs.readdirSync(dir)\n  .filter(ignored)\n  .forEach(function(path){\n    path = join(dir, path);\n    if (fs.statSync(path).isDirectory()) {\n      exports.files(path, ret);\n    } else if (path.match(/\\.(js|coffee|litcoffee|coffee.md)$/)) {\n      ret.push(path);\n    }\n  });\n\n  return ret;\n};\n\n/**\n * Compute a slug from the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.slug = function(str){\n  return str\n    .toLowerCase()\n    .replace(/ +/g, '-')\n    .replace(/[^-\\w]/g, '');\n};\n\n/**\n * Strip the function definition from `str`,\n * and re-indent for pre whitespace.\n */\n\nexports.clean = function(str) {\n  str = str\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, \"\\n\").replace(/^\\uFEFF/, '')\n    .replace(/^function *\\(.*\\) *{/, '')\n    .replace(/\\s+\\}$/, '');\n\n  var spaces = str.match(/^\\n?( *)/)[1].length\n    , tabs = str.match(/^\\n?(\\t*)/)[1].length\n    , re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');\n\n  str = str.replace(re, '');\n\n  return exports.trim(str);\n};\n\n/**\n * Escape regular expression characters in `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.escapeRegexp = function(str){\n  return str.replace(/[-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n};\n\n/**\n * Trim the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.trim = function(str){\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * Parse the given `qs`.\n *\n * @param {String} qs\n * @return {Object}\n * @api private\n */\n\nexports.parseQuery = function(qs){\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair){\n    var i = pair.indexOf('=')\n      , key = pair.slice(0, i)\n      , val = pair.slice(++i);\n\n    obj[key] = decodeURIComponent(val);\n    return obj;\n  }, {});\n};\n\n/**\n * Highlight the given string of `js`.\n *\n * @param {String} js\n * @return {String}\n * @api private\n */\n\nfunction highlight(js) {\n  return js\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/\\bnew *(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>')\n}\n\n/**\n * Highlight the contents of tag `name`.\n *\n * @param {String} name\n * @api private\n */\n\nexports.highlightTags = function(name) {\n  var code = document.getElementsByTagName(name);\n  for (var i = 0, len = code.length; i < len; ++i) {\n    code[i].innerHTML = highlight(code[i].innerHTML);\n  }\n};\n\n}); // module: utils.js\n// The global object is \"self\" in Web Workers.\nglobal = (function() { return this; })();\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n\n/**\n * Node shims.\n *\n * These are meant only to allow\n * mocha.js to run untouched, not\n * to allow running node code in\n * the browser.\n */\n\nvar process = {};\nprocess.exit = function(status){};\nprocess.stdout = {};\n\nvar uncaughtExceptionHandlers = [];\n\n/**\n * Remove uncaughtException listener.\n */\n\nprocess.removeListener = function(e, fn){\n  if ('uncaughtException' == e) {\n    global.onerror = function() {};\n    var i = Mocha.utils.indexOf(uncaughtExceptionHandlers, fn);\n    if (i != -1) { uncaughtExceptionHandlers.splice(i, 1); }\n  }\n};\n\n/**\n * Implements uncaughtException listener.\n */\n\nprocess.on = function(e, fn){\n  if ('uncaughtException' == e) {\n    global.onerror = function(err, url, line){\n      fn(new Error(err + ' (' + url + ':' + line + ')'));\n      return true;\n    };\n    uncaughtExceptionHandlers.push(fn);\n  }\n};\n\n/**\n * Expose mocha.\n */\n\nvar Mocha = global.Mocha = require('mocha'),\n    mocha = global.mocha = new Mocha({ reporter: 'html' });\n\n// The BDD UI is registered by default, but no UI will be functional in the\n// browser without an explicit call to the overridden `mocha.ui` (see below).\n// Ensure that this default UI does not expose its methods to the global scope.\nmocha.suite.removeAllListeners('pre-require');\n\nvar immediateQueue = []\n  , immediateTimeout;\n\nfunction timeslice() {\n  var immediateStart = new Date().getTime();\n  while (immediateQueue.length && (new Date().getTime() - immediateStart) < 100) {\n    immediateQueue.shift()();\n  }\n  if (immediateQueue.length) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  } else {\n    immediateTimeout = null;\n  }\n}\n\n/**\n * High-performance override of Runner.immediately.\n */\n\nMocha.Runner.immediately = function(callback) {\n  immediateQueue.push(callback);\n  if (!immediateTimeout) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  }\n};\n\n/**\n * Function to allow assertion libraries to throw errors directly into mocha.\n * This is useful when running tests in a browser because window.onerror will\n * only receive the 'message' attribute of the Error.\n */\nmocha.throwError = function(err) {\n  Mocha.utils.forEach(uncaughtExceptionHandlers, function (fn) {\n    fn(err);\n  });\n  throw err;\n};\n\n/**\n * Override ui to ensure that the ui functions are initialized.\n * Normally this would happen in Mocha.prototype.loadFiles.\n */\n\nmocha.ui = function(ui){\n  Mocha.prototype.ui.call(this, ui);\n  this.suite.emit('pre-require', global, null, this);\n  return this;\n};\n\n/**\n * Setup mocha with the given setting options.\n */\n\nmocha.setup = function(opts){\n  if ('string' == typeof opts) opts = { ui: opts };\n  for (var opt in opts) this[opt](opts[opt]);\n  return this;\n};\n\n/**\n * Run mocha, returning the Runner.\n */\n\nmocha.run = function(fn){\n  var options = mocha.options;\n  mocha.globals('location');\n\n  var query = Mocha.utils.parseQuery(global.location.search || '');\n  if (query.grep) mocha.grep(query.grep);\n  if (query.invert) mocha.invert();\n\n  return Mocha.prototype.run.call(mocha, function(){\n    // The DOM Document is not available in Web Workers.\n    if (global.document) {\n      Mocha.utils.highlightTags('code');\n    }\n    if (fn) fn();\n  });\n};\n\n/**\n * Expose the process shim.\n */\n\nMocha.process = process;\n})();","MochaWeb = this.MochaWeb = {};\n\nif (Meteor.isServer)\n  var Base = Npm.require(\"mocha/lib/reporters\").Base;\nelse\n  Base = Mocha.reporters.Base\n\nfunction getAncestors(testObject, ancestors){\n  if (!ancestors)\n    ancestors = []\n  if (testObject.parent && testObject.parent.title !== \"\"){\n    ancestors.push(testObject.parent.title)\n    return getAncestors(testObject.parent, ancestors);\n  }\n  else{\n    return ancestors;\n  }\n};\n\nMochaWeb.MeteorCollectionTestReporter = function(runner){\n  Base.call(this, runner);\n  var self = this;\n\n  function saveTestResult(test){\n    if (test.state === \"failed\"){\n      console.log(test.err.message);\n      console.log(test.err.stack);\n    }\n\n    // console.log(\"SAVE TEST RESULT\", test);\n\n    var ancestors = getAncestors(test);\n    var result = {\n      id: \"mocha:\" + ancestors.join(\":\") + \":\" + test.title,\n      async: !!test.async,\n      framework: \"mocha\",\n      name: test.title,\n      pending: test.pending,\n      result: test.state,\n      duration: test.duration,\n      timeOut: test._timeout,\n      timedOut: test.timedOut,\n      ancestors: ancestors,\n      isClient: Meteor.isClient,\n      isServer: Meteor.isServer,\n      timestamp: new Date()\n    };\n    if (typeof test.state === \"undefined\" && test.pending === true) {\n      result.result = \"pending\";\n    }\n    if (test.err){\n      result.failureMessage = test.err.message;\n      result.failureStackTrace = test.err.stack;\n    }\n    // console.log(\"POSTING RESULT\", result);\n\n    ddpParentConnection.call(\"velocity/reports/submit\", result, function(error, result){\n      if (error){\n        console.error(\"ERROR WRITING TEST\", error);\n      }\n    });\n  }\n\n  runner.on(\"start\", Meteor.bindEnvironment(\n    function(){\n      //TODO tell testRunner that mocha tests have started\n    },\n    function(err){\n      throw err;\n    }\n  ));\n\n  [\"pass\", \"fail\", \"pending\"].forEach(function(testEvent){\n    runner.on(testEvent, Meteor.bindEnvironment(\n      function(test){\n        saveTestResult(test);\n      },\n      function(err){\n        throw err;\n      }\n    ));\n  });\n\n  runner.on('end', Meteor.bindEnvironment(function(){\n    //TODO tell testRunner all mocha web tests have finished\n  }, function(err){\n    throw err;\n  }));\n};\n","ddpParentConnection = null;\nwindow.mochaWebClientTestsComplete = false;\n\nvar testSetupFunctions = [];\n\nMochaWeb.testOnly = function(callback){\n  testSetupFunctions.push(callback);\n};\n\nwindow.MirrorURLs = new Meteor.Collection(\"mirrorUrls\");\n\nwindow.chai = Package['practicalmeteor:chai'].chai;\n\n\nMeteor.startup(function(){\n  //TODO this method should probably live in the Velocity namespace velocity/mirrorInfo?\n  Meteor.call(\"mirrorInfo\", function(error, mirrorInfo){\n    if (mirrorInfo.isMirror){\n      Session.set(\"mochaWebMirror\", true);\n      Meteor.setTimeout(function(){\n        ddpParentConnection = DDP.connect(mirrorInfo.parentUrl);\n        ddpParentConnection.call(\"velocity/reports/reset\", {framework: 'mocha'}, function(err, result){\n          // enable stack trace with line numbers with assertions\n          chai.config.includeStack = true;\n          //TODO allow ui to be customized with Meteor.settings\n          mocha.setup({reporter: MochaWeb.MeteorCollectionTestReporter, ui: \"bdd\"});\n          testSetupFunctions.forEach(function(testFunction){\n            testFunction();\n          });\n          mocha.run(function(){\n            window.mochaWebClientTestsComplete = true;\n            Meteor.call(\"clientTestsComplete\", function(err, result){\n              if (err){\n                console.error(\"ERROR INVOKING CLIENT TESTS COMPLETE\", err);\n              }\n            });\n          });\n        });\n      }, 0);\n    } else {\n      Session.set(\"mochaWebMirror\", false);\n    }\n  });\n});\n\nTemplate.mochaweb.helpers({\n  mochaWebIFrameURL: function(){\n    var mirror = VelocityMirrors.findOne({framework: \"mocha\", state: \"ready\"});\n    if (mirror && mirror.rootUrl){\n      return mirror.rootUrl + mirror.rootUrlPath + \"&lastModified=\" + mirror.lastModified;\n    }\n    return null;\n  }\n});\n"]}}]